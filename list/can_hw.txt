; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\can_hw.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\can_hw.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\cstartup -I.\drivers\uart -I.\app\cfg -I.\iap -I.\drivers -I.\usb -I.\drivers\adc -I.\drivers\gpio -I.\drivers -I.\RTE\_lpc17xx_can_loader_debug -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DLPC175x_6x -D__DEBUG_UART2_PRINTF__ -D__UART0__ -D__UART1__ -D__UART2__ -D__UART3__ -D__UART2_ENABLE__ -D__UART3_ENABLE__ -D__UART0_ENABLE__ -D__UART1_ENABLE__ --omf_browse=.\output\can_hw.crf can\can_hw.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CAN_SoftReset PROC
;;;66     
;;;67     static void CAN_SoftReset (LPC_CAN_TypeDef *CANx)
000000  2109              MOVS     r1,#9
;;;68     {
;;;69     	CANx->MOD = 9;
000002  6001              STR      r1,[r0,#0]
;;;70     	CANx->GSR = 0;
000004  2100              MOVS     r1,#0
000006  6081              STR      r1,[r0,#8]
;;;71     	CANx->MOD = 0x08;
000008  2108              MOVS     r1,#8
00000a  6001              STR      r1,[r0,#0]
;;;72     }
00000c  4770              BX       lr
;;;73     
                          ENDP

                  CAN_TBS_INTRoute PROC
;;;441    /****************************** can TX INT process ***************************/
;;;442    void CAN_TBS_INTRoute(LPC_CAN_TypeDef *pCANx, CPU_INT32U idx_TBS)
00000e  b570              PUSH     {r4-r6,lr}
;;;443    {
000010  4604              MOV      r4,r0
000012  460d              MOV      r5,r1
;;;444        if( pCANx == LPC_CAN1 ) {
000014  48f7              LDR      r0,|L1.1012|
000016  4284              CMP      r4,r0
000018  d131              BNE      |L1.126|
;;;445            if( !CAN_RING_BUF_IS_EMPTY( &can1TxRingBuf ) ) {
00001a  48f7              LDR      r0,|L1.1016|
00001c  f7fffffe          BL       CAN_RING_BUF_IS_EMPTY
000020  b928              CBNZ     r0,|L1.46|
;;;446                CAN_tx_function( pCANx, &can1TxRingBuf, idx_TBS );
000022  462a              MOV      r2,r5
000024  49f4              LDR      r1,|L1.1016|
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       CAN_tx_function
00002c  e028              B        |L1.128|
                  |L1.46|
;;;447            }else if( !CAN_RING_BUF_IS_EMPTY( &can1Tx2RingBuf ) ){
00002e  48f3              LDR      r0,|L1.1020|
000030  f7fffffe          BL       CAN_RING_BUF_IS_EMPTY
000034  b928              CBNZ     r0,|L1.66|
;;;448    						CAN_tx_function( pCANx, &can1Tx2RingBuf, idx_TBS );
000036  462a              MOV      r2,r5
000038  49f0              LDR      r1,|L1.1020|
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       CAN_tx_function
000040  e01e              B        |L1.128|
                  |L1.66|
;;;449    				}else if( !CAN_RING_BUF_IS_EMPTY( &can1Tx3RingBuf ) ){
000042  48ef              LDR      r0,|L1.1024|
000044  f7fffffe          BL       CAN_RING_BUF_IS_EMPTY
000048  b928              CBNZ     r0,|L1.86|
;;;450    						CAN_tx_function( pCANx, &can1Tx3RingBuf, idx_TBS );
00004a  462a              MOV      r2,r5
00004c  49ec              LDR      r1,|L1.1024|
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       CAN_tx_function
000054  e014              B        |L1.128|
                  |L1.86|
;;;451    				}else if( !CAN_RING_BUF_IS_EMPTY( &can1UpgradeAckTxRingBuf ) ){
000056  48eb              LDR      r0,|L1.1028|
000058  f7fffffe          BL       CAN_RING_BUF_IS_EMPTY
00005c  b928              CBNZ     r0,|L1.106|
;;;452    						CAN_tx_function( pCANx, &can1UpgradeAckTxRingBuf, idx_TBS );
00005e  462a              MOV      r2,r5
000060  49e8              LDR      r1,|L1.1028|
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       CAN_tx_function
000068  e00a              B        |L1.128|
                  |L1.106|
;;;453    				}else if( !CAN_RING_BUF_IS_EMPTY( &can1LEDTxRingBuf ) ){
00006a  48e7              LDR      r0,|L1.1032|
00006c  f7fffffe          BL       CAN_RING_BUF_IS_EMPTY
000070  b930              CBNZ     r0,|L1.128|
;;;454    						CAN_tx_function( pCANx, &can1LEDTxRingBuf, idx_TBS );
000072  462a              MOV      r2,r5
000074  49e4              LDR      r1,|L1.1032|
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       CAN_tx_function
00007c  e000              B        |L1.128|
                  |L1.126|
;;;455    				}
;;;456        } else if( pCANx == LPC_CAN2 ) {
00007e  bf00              NOP      
                  |L1.128|
;;;457    #if __CAN2_ENABLE__			
;;;458            if( !CAN_RING_BUF_IS_EMPTY( &can2TxRingBuf ) ) {
;;;459                CAN_tx_function( pCANx, &can2TxRingBuf, idx_TBS );
;;;460            }
;;;461    #endif				
;;;462        }
;;;463    }
000080  bd70              POP      {r4-r6,pc}
;;;464    
                          ENDP

                  CAN_TxINTRoute PROC
;;;465    void CAN_TxINTRoute(LPC_CAN_TypeDef *pCANx)
000082  b510              PUSH     {r4,lr}
;;;466    {
000084  4604              MOV      r4,r0
;;;467    	switch(pCANx->SR & 0x040404)
000086  69e0              LDR      r0,[r4,#0x1c]
000088  49e0              LDR      r1,|L1.1036|
00008a  4008              ANDS     r0,r0,r1
00008c  f5b02f80          CMP      r0,#0x40000
000090  d01d              BEQ      |L1.206|
000092  dc09              BGT      |L1.168|
000094  2804              CMP      r0,#4
000096  d010              BEQ      |L1.186|
000098  f5b06f80          CMP      r0,#0x400
00009c  d012              BEQ      |L1.196|
00009e  f2a04004          SUB      r0,r0,#0x404
0000a2  2800              CMP      r0,#0
0000a4  d138              BNE      |L1.280|
0000a6  e017              B        |L1.216|
                  |L1.168|
0000a8  f1b01f04          CMP      r0,#0x40004
0000ac  d01d              BEQ      |L1.234|
0000ae  49d8              LDR      r1,|L1.1040|
0000b0  4408              ADD      r0,r0,r1
0000b2  b318              CBZ      r0,|L1.252|
0000b4  2804              CMP      r0,#4
0000b6  d12f              BNE      |L1.280|
0000b8  e029              B        |L1.270|
                  |L1.186|
;;;468    	{
;;;469    		case 0x04:
;;;470    			CAN_TBS_INTRoute(pCANx,1);
0000ba  2101              MOVS     r1,#1
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       CAN_TBS_INTRoute
;;;471    		break;
0000c2  e02a              B        |L1.282|
                  |L1.196|
;;;472    		case 0x0400:
;;;473    			CAN_TBS_INTRoute(pCANx,2);
0000c4  2102              MOVS     r1,#2
0000c6  4620              MOV      r0,r4
0000c8  f7fffffe          BL       CAN_TBS_INTRoute
;;;474    		break;
0000cc  e025              B        |L1.282|
                  |L1.206|
;;;475    		case 0x040000:
;;;476    			CAN_TBS_INTRoute(pCANx,3);
0000ce  2103              MOVS     r1,#3
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       CAN_TBS_INTRoute
;;;477    		break;
0000d6  e020              B        |L1.282|
                  |L1.216|
;;;478    		case 0x0404:
;;;479    			CAN_TBS_INTRoute(pCANx,1);
0000d8  2101              MOVS     r1,#1
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       CAN_TBS_INTRoute
;;;480    			CAN_TBS_INTRoute(pCANx,2);
0000e0  2102              MOVS     r1,#2
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       CAN_TBS_INTRoute
;;;481    		break;
0000e8  e017              B        |L1.282|
                  |L1.234|
;;;482    		case 0x040004:
;;;483    			CAN_TBS_INTRoute(pCANx,1);
0000ea  2101              MOVS     r1,#1
0000ec  4620              MOV      r0,r4
0000ee  f7fffffe          BL       CAN_TBS_INTRoute
;;;484    			CAN_TBS_INTRoute(pCANx,3);
0000f2  2103              MOVS     r1,#3
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       CAN_TBS_INTRoute
;;;485    		break;
0000fa  e00e              B        |L1.282|
                  |L1.252|
;;;486    		case 0x040400:
;;;487    			CAN_TBS_INTRoute(pCANx,2);
0000fc  2102              MOVS     r1,#2
0000fe  4620              MOV      r0,r4
000100  f7fffffe          BL       CAN_TBS_INTRoute
;;;488    			CAN_TBS_INTRoute(pCANx,3);
000104  2103              MOVS     r1,#3
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       CAN_TBS_INTRoute
;;;489    		break;
00010c  e005              B        |L1.282|
                  |L1.270|
;;;490    		case 0x040404:
;;;491    			CAN_TBS_INTRoute(pCANx,4);
00010e  2104              MOVS     r1,#4
000110  4620              MOV      r0,r4
000112  f7fffffe          BL       CAN_TBS_INTRoute
;;;492    			break;
000116  e000              B        |L1.282|
                  |L1.280|
;;;493    		default:
;;;494    			return;
;;;495    	}
;;;496    }
000118  bd10              POP      {r4,pc}
                  |L1.282|
00011a  bf00              NOP                            ;471
00011c  bf00              NOP      
00011e  e7fb              B        |L1.280|
;;;497    
                          ENDP

                  CAN_RxINTRoute PROC
;;;498    void CAN_RxINTRoute(LPC_CAN_TypeDef *pCANx)
000120  b510              PUSH     {r4,lr}
;;;499    {
000122  4604              MOV      r4,r0
;;;500    	msgRxBuf.cnt            = (pCANx->RFS>>16)&0x0000000F;  //将接收帧信息寄存器的值写入帧缓冲区结构体相应位
000124  6a20              LDR      r0,[r4,#0x20]
000126  f3c04003          UBFX     r0,r0,#16,#4
00012a  49ba              LDR      r1,|L1.1044|
00012c  6008              STR      r0,[r1,#0]  ; msgRxBuf
;;;501        msgRxBuf.id             = pCANx->RID&0x7ff;             //同上写入ID
00012e  6a60              LDR      r0,[r4,#0x24]
000130  f3c0000a          UBFX     r0,r0,#0,#11
000134  6048              STR      r0,[r1,#4]  ; msgRxBuf
;;;502    	msgRxBuf.data.dwData[0] = pCANx->RDA;
000136  6aa0              LDR      r0,[r4,#0x28]
000138  6088              STR      r0,[r1,#8]  ; msgRxBuf
;;;503    	msgRxBuf.data.dwData[1] = pCANx->RDB;
00013a  6ae1              LDR      r1,[r4,#0x2c]
00013c  48b5              LDR      r0,|L1.1044|
00013e  60c1              STR      r1,[r0,#0xc]
;;;504    
;;;505    	RELEASE_RECEIVE_BUFF_HW(pCANx);
000140  bf00              NOP      
000142  2004              MOVS     r0,#4
000144  6060              STR      r0,[r4,#4]
000146  bf00              NOP      
;;;506    	if( pCANx == LPC_CAN1 ) {
000148  48aa              LDR      r0,|L1.1012|
00014a  4284              CMP      r4,r0
00014c  d137              BNE      |L1.446|
;;;507    		if( msgRxBuf.id == can1RxRingBuf.id ) {
00014e  48b1              LDR      r0,|L1.1044|
000150  6840              LDR      r0,[r0,#4]  ; msgRxBuf
000152  49b1              LDR      r1,|L1.1048|
000154  6909              LDR      r1,[r1,#0x10]  ; can1RxRingBuf
000156  4288              CMP      r0,r1
000158  d107              BNE      |L1.362|
;;;508    			CAN_RING_BUF_WR_BLOCK( &can1RxRingBuf, msgRxBuf.data.bData, msgRxBuf.cnt );
00015a  48ae              LDR      r0,|L1.1044|
00015c  f1000108          ADD      r1,r0,#8
000160  6802              LDR      r2,[r0,#0]  ; msgRxBuf
000162  48ad              LDR      r0,|L1.1048|
000164  f7fffffe          BL       CAN_RING_BUF_WR_BLOCK
000168  e02a              B        |L1.448|
                  |L1.362|
;;;509    		}else if( msgRxBuf.id == can1Rx2RingBuf.id ) {
00016a  48aa              LDR      r0,|L1.1044|
00016c  6840              LDR      r0,[r0,#4]  ; msgRxBuf
00016e  49ab              LDR      r1,|L1.1052|
000170  6909              LDR      r1,[r1,#0x10]  ; can1Rx2RingBuf
000172  4288              CMP      r0,r1
000174  d107              BNE      |L1.390|
;;;510    			CAN_RING_BUF_WR_BLOCK( &can1Rx2RingBuf, msgRxBuf.data.bData, msgRxBuf.cnt );
000176  48a7              LDR      r0,|L1.1044|
000178  f1000108          ADD      r1,r0,#8
00017c  6802              LDR      r2,[r0,#0]  ; msgRxBuf
00017e  48a7              LDR      r0,|L1.1052|
000180  f7fffffe          BL       CAN_RING_BUF_WR_BLOCK
000184  e01c              B        |L1.448|
                  |L1.390|
;;;511    		}else if( msgRxBuf.id == can1RxUpgradeRingBuf.id ) {
000186  48a3              LDR      r0,|L1.1044|
000188  6840              LDR      r0,[r0,#4]  ; msgRxBuf
00018a  49a5              LDR      r1,|L1.1056|
00018c  6909              LDR      r1,[r1,#0x10]  ; can1RxUpgradeRingBuf
00018e  4288              CMP      r0,r1
000190  d107              BNE      |L1.418|
;;;512    			CAN_RING_BUF_WR_BLOCK( &can1RxUpgradeRingBuf, msgRxBuf.data.bData, msgRxBuf.cnt );
000192  48a0              LDR      r0,|L1.1044|
000194  f1000108          ADD      r1,r0,#8
000198  6802              LDR      r2,[r0,#0]  ; msgRxBuf
00019a  48a1              LDR      r0,|L1.1056|
00019c  f7fffffe          BL       CAN_RING_BUF_WR_BLOCK
0001a0  e00e              B        |L1.448|
                  |L1.418|
;;;513    		}else if( msgRxBuf.id == can1RxLEDRingBuf.id ) {
0001a2  489c              LDR      r0,|L1.1044|
0001a4  6840              LDR      r0,[r0,#4]  ; msgRxBuf
0001a6  499f              LDR      r1,|L1.1060|
0001a8  6909              LDR      r1,[r1,#0x10]  ; can1RxLEDRingBuf
0001aa  4288              CMP      r0,r1
0001ac  d108              BNE      |L1.448|
;;;514    			CAN_RING_BUF_WR_BLOCK( &can1RxLEDRingBuf, msgRxBuf.data.bData, msgRxBuf.cnt );
0001ae  4899              LDR      r0,|L1.1044|
0001b0  f1000108          ADD      r1,r0,#8
0001b4  6802              LDR      r2,[r0,#0]  ; msgRxBuf
0001b6  489b              LDR      r0,|L1.1060|
0001b8  f7fffffe          BL       CAN_RING_BUF_WR_BLOCK
0001bc  e000              B        |L1.448|
                  |L1.446|
;;;515    		}
;;;516    	} else if( pCANx == LPC_CAN2 ) {
0001be  bf00              NOP      
                  |L1.448|
;;;517    #if __CAN2_ENABLE__		
;;;518    		if( msgRxBuf.id == can2RxRingBuf.id ) {
;;;519    			CAN_RING_BUF_WR_BLOCK( &can2RxRingBuf, msgRxBuf.data.bData, msgRxBuf.cnt );
;;;520    		}
;;;521    #endif		
;;;522    	} 
;;;523    }
0001c0  bd10              POP      {r4,pc}
;;;524    
                          ENDP

                  CAN1_ISR PROC
;;;73     
;;;74     static void CAN1_ISR(void)
0001c2  b570              PUSH     {r4-r6,lr}
;;;75     {
;;;76     	uint32_t status;
;;;77     	uint32_t TmpStatus;
;;;78     
;;;79     	status    = LPC_CAN1->ICR;
0001c4  488b              LDR      r0,|L1.1012|
0001c6  68c4              LDR      r4,[r0,#0xc]
;;;80     	TmpStatus = LPC_CANAF->LUTerrAd;
0001c8  4897              LDR      r0,|L1.1064|
0001ca  6985              LDR      r5,[r0,#0x18]
;;;81     
;;;82     #ifdef __CAN_DEBUG_UART_PRINT__
;;;83     	if(TmpStatus&0x00001FFC) /* 10:2 */
0001cc  f64170fc          MOV      r0,#0x1ffc
0001d0  4028              ANDS     r0,r0,r5
0001d2  b120              CBZ      r0,|L1.478|
;;;84     	{
;;;85     		CAN_PRINT((0,"AF:%.2x\r\n",TmpStatus));
0001d4  462a              MOV      r2,r5
0001d6  a195              ADR      r1,|L1.1068|
0001d8  2000              MOVS     r0,#0
0001da  f7fffffe          BL       uart_printf
                  |L1.478|
;;;86     	}
;;;87     #endif
;;;88     
;;;89        	if(status & ICR_RI_SET)           /* read interrupt state	*/
0001de  f0040001          AND      r0,r4,#1
0001e2  b110              CBZ      r0,|L1.490|
;;;90        	{
;;;91     	  	CAN_RxINTRoute(LPC_CAN1);
0001e4  4883              LDR      r0,|L1.1012|
0001e6  f7fffffe          BL       CAN_RxINTRoute
                  |L1.490|
;;;92        	}
;;;93     
;;;94        	if( status & ( ICR_TI1_SET | ICR_TI2_SET | ICR_TI3_SET) )
0001ea  f2406002          MOV      r0,#0x602
0001ee  4020              ANDS     r0,r0,r4
0001f0  b110              CBZ      r0,|L1.504|
;;;95        	{
;;;96        	  	CAN_TxINTRoute(LPC_CAN1);
0001f2  4880              LDR      r0,|L1.1012|
0001f4  f7fffffe          BL       CAN_TxINTRoute
                  |L1.504|
;;;97        	}
;;;98     
;;;99     	/* err occur */
;;;100    	if((status & ICR_ERRSTA_BIT_MASK) != 0)
0001f8  f40470fe          AND      r0,r4,#0x1fc
0001fc  2800              CMP      r0,#0
0001fe  d042              BEQ      |L1.646|
;;;101    	{
;;;102    		if(status&ICR_EI_SET) // error warning interrupt
000200  f0040004          AND      r0,r4,#4
000204  b118              CBZ      r0,|L1.526|
;;;103    		{
;;;104    			// todo error warnning
;;;105    			CAN_PRINT((0,"error warning.\r\n"));
000206  a18c              ADR      r1,|L1.1080|
000208  2000              MOVS     r0,#0
00020a  f7fffffe          BL       uart_printf
                  |L1.526|
;;;106    		}
;;;107    
;;;108    		if(status&ICR_DOI_SET) // Data overrun interrupt
00020e  f0040008          AND      r0,r4,#8
000212  b110              CBZ      r0,|L1.538|
;;;109    		{
;;;110    			// todo dataoverun
;;;111    // 		    CAN_PRINT((0,"data overrun.\r\n"));
;;;112    			CAN_SoftReset(LPC_CAN1);
000214  4877              LDR      r0,|L1.1012|
000216  f7fffffe          BL       CAN_SoftReset
                  |L1.538|
;;;113    		}
;;;114    
;;;115    		if(status&ICR_WUI_SET) // wake up interrupt
;;;116    		{
;;;117    
;;;118    		}
;;;119    
;;;120    		if(status&ICR_EPI_SET) // error passive interrupt
00021a  f0040020          AND      r0,r4,#0x20
00021e  b118              CBZ      r0,|L1.552|
;;;121    		{
;;;122    			CAN_PRINT((0,"error passive.\r\n"));
000220  a18a              ADR      r1,|L1.1100|
000222  2000              MOVS     r0,#0
000224  f7fffffe          BL       uart_printf
                  |L1.552|
;;;123    		}
;;;124    
;;;125    		if(status&ICR_ALI_SET) // arbitration lost
000228  f0040040          AND      r0,r4,#0x40
00022c  b118              CBZ      r0,|L1.566|
;;;126    		{
;;;127    			CAN_PRINT((0,"arbitration lost.\r\n"));
00022e  a18c              ADR      r1,|L1.1120|
000230  2000              MOVS     r0,#0
000232  f7fffffe          BL       uart_printf
                  |L1.566|
;;;128    		}
;;;129    
;;;130    		if(status & ICR_BEI_SET)     // BEI 总线错误中断
000236  f0040080          AND      r0,r4,#0x80
00023a  2800              CMP      r0,#0
00023c  d023              BEQ      |L1.646|
;;;131    	   	{
;;;132    		    //CAN_PRINT((0,"bus error.\r\n"));
;;;133    	 	  	if( (LPC_CAN1->MOD & 0x01) ) // rm == 1,说明是有busoff导致的can控制器复位
00023e  486d              LDR      r0,|L1.1012|
000240  6800              LDR      r0,[r0,#0]
000242  f0000001          AND      r0,r0,#1
000246  b160              CBZ      r0,|L1.610|
;;;134    	   	  	{
;;;135    	        	CAN_PRINT((0,"can reset in int 0x%08x.\r\n",LPC_CAN1->GSR));
000248  486a              LDR      r0,|L1.1012|
00024a  6882              LDR      r2,[r0,#8]
00024c  a189              ADR      r1,|L1.1140|
00024e  2000              MOVS     r0,#0
000250  f7fffffe          BL       uart_printf
;;;136    		    	LPC_CAN1->GSR =0;
000254  2000              MOVS     r0,#0
000256  4967              LDR      r1,|L1.1012|
000258  6088              STR      r0,[r1,#8]
;;;137    		    	LPC_CAN1->MOD =( (1<<3) );
00025a  2008              MOVS     r0,#8
00025c  6008              STR      r0,[r1,#0]
;;;138    		    	LPC_CAN1->CMR =0x02;
00025e  2002              MOVS     r0,#2
000260  6048              STR      r0,[r1,#4]
                  |L1.610|
;;;139    	      	}
;;;140    
;;;141    	      	if( LPC_CAN1->GSR & 0x80)  /* bus off */
000262  4864              LDR      r0,|L1.1012|
000264  6880              LDR      r0,[r0,#8]
000266  f0000080          AND      r0,r0,#0x80
00026a  b160              CBZ      r0,|L1.646|
;;;142    	      	{
;;;143    		  		CAN_PRINT((0,"buf off.\r\n"));
00026c  a188              ADR      r1,|L1.1168|
00026e  2000              MOVS     r0,#0
000270  f7fffffe          BL       uart_printf
;;;144    				  CAN_PRINT((0,"can reset in int 0x%08x.\r\n",LPC_CAN1->GSR));
000274  485f              LDR      r0,|L1.1012|
000276  6882              LDR      r2,[r0,#8]
000278  a17e              ADR      r1,|L1.1140|
00027a  2000              MOVS     r0,#0
00027c  f7fffffe          BL       uart_printf
;;;145    	        	CAN_SoftReset(LPC_CAN1);
000280  485c              LDR      r0,|L1.1012|
000282  f7fffffe          BL       CAN_SoftReset
                  |L1.646|
;;;146    		  	}
;;;147    	   	}
;;;148    	}
;;;149    }
000286  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

                  CAN_IRQHandler PROC
;;;55     /* public Function -----------------------------------------------------------*/
;;;56     void CAN_IRQHandler(void)
000288  b510              PUSH     {r4,lr}
;;;57     {
;;;58     #if __CAN1_ENABLE__
;;;59         CAN1_ISR();
00028a  f7fffffe          BL       CAN1_ISR
;;;60     #endif
;;;61     
;;;62     #if __CAN2_ENABLE__
;;;63         CAN2_ISR();
;;;64     #endif
;;;65     }
00028e  bd10              POP      {r4,pc}
;;;66     
                          ENDP

                  CAN2_ISR PROC
;;;150    
;;;151    void CAN2_ISR(void)
000290  b570              PUSH     {r4-r6,lr}
;;;152    {
;;;153    	uint32_t status;
;;;154    	uint32_t TmpStatus;
;;;155    
;;;156    	status = LPC_CAN2->ICR;
000292  4882              LDR      r0,|L1.1180|
000294  68c4              LDR      r4,[r0,#0xc]
;;;157        TmpStatus = LPC_CANAF->LUTerrAd;
000296  4864              LDR      r0,|L1.1064|
000298  6985              LDR      r5,[r0,#0x18]
;;;158        
;;;159    #ifdef __CAN_DEBUG_UART_PRINT__
;;;160    	if(TmpStatus&0x00001FFC) /* 10:2 */
00029a  f64170fc          MOV      r0,#0x1ffc
00029e  4028              ANDS     r0,r0,r5
0002a0  b120              CBZ      r0,|L1.684|
;;;161    	{
;;;162    		CAN_PRINT((0,"AF:%.2x\r\n",TmpStatus));
0002a2  462a              MOV      r2,r5
0002a4  a161              ADR      r1,|L1.1068|
0002a6  2000              MOVS     r0,#0
0002a8  f7fffffe          BL       uart_printf
                  |L1.684|
;;;163    	}
;;;164    #endif
;;;165    
;;;166       	if(status & ICR_RI_SET)           /* read interrupt state	*/
0002ac  f0040001          AND      r0,r4,#1
0002b0  b110              CBZ      r0,|L1.696|
;;;167       	{
;;;168    	  	CAN_RxINTRoute(LPC_CAN2);
0002b2  487a              LDR      r0,|L1.1180|
0002b4  f7fffffe          BL       CAN_RxINTRoute
                  |L1.696|
;;;169       	}
;;;170       	if( status & ( ICR_TI1_SET | ICR_TI2_SET | ICR_TI3_SET))
0002b8  f2406002          MOV      r0,#0x602
0002bc  4020              ANDS     r0,r0,r4
0002be  b110              CBZ      r0,|L1.710|
;;;171       	{
;;;172       	  	CAN_TxINTRoute(LPC_CAN2);
0002c0  4876              LDR      r0,|L1.1180|
0002c2  f7fffffe          BL       CAN_TxINTRoute
                  |L1.710|
;;;173       	}
;;;174    
;;;175    	/* err occur*/
;;;176    	if((status & ICR_ERRSTA_BIT_MASK) != 0)
0002c6  f40470fe          AND      r0,r4,#0x1fc
0002ca  2800              CMP      r0,#0
0002cc  d042              BEQ      |L1.852|
;;;177    	{
;;;178            if(status&ICR_EI_SET) // error warning interrupt
0002ce  f0040004          AND      r0,r4,#4
0002d2  b118              CBZ      r0,|L1.732|
;;;179    		{
;;;180    			// todo error warnning
;;;181    			CAN_PRINT((0,"error warning.\r\n"));
0002d4  a158              ADR      r1,|L1.1080|
0002d6  2000              MOVS     r0,#0
0002d8  f7fffffe          BL       uart_printf
                  |L1.732|
;;;182    		}
;;;183    
;;;184    		if(status&ICR_DOI_SET) // Data overrun interrupt
0002dc  f0040008          AND      r0,r4,#8
0002e0  b110              CBZ      r0,|L1.744|
;;;185    		{
;;;186    			// todo dataoverun
;;;187    // 		    CAN_PRINT((0,"data overrun.\r\n"));
;;;188    			CAN_SoftReset(LPC_CAN2);
0002e2  486e              LDR      r0,|L1.1180|
0002e4  f7fffffe          BL       CAN_SoftReset
                  |L1.744|
;;;189    		}
;;;190    
;;;191    		if(status&ICR_WUI_SET) // wake up interrupt
;;;192    		{
;;;193    
;;;194    		}
;;;195    
;;;196    		if(status&ICR_EPI_SET) // error passive interrupt
0002e8  f0040020          AND      r0,r4,#0x20
0002ec  b118              CBZ      r0,|L1.758|
;;;197    		{
;;;198    			CAN_PRINT((0,"error passive.\r\n"));
0002ee  a157              ADR      r1,|L1.1100|
0002f0  2000              MOVS     r0,#0
0002f2  f7fffffe          BL       uart_printf
                  |L1.758|
;;;199    		}
;;;200    
;;;201    		if(status&ICR_ALI_SET) // arbitration lost
0002f6  f0040040          AND      r0,r4,#0x40
0002fa  b118              CBZ      r0,|L1.772|
;;;202    		{
;;;203    			CAN_PRINT((0,"arbitration lost.\r\n"));
0002fc  a158              ADR      r1,|L1.1120|
0002fe  2000              MOVS     r0,#0
000300  f7fffffe          BL       uart_printf
                  |L1.772|
;;;204    		}
;;;205            
;;;206    	   	if(status & ICR_BEI_SET)     // BEI 总线错误中断
000304  f0040080          AND      r0,r4,#0x80
000308  2800              CMP      r0,#0
00030a  d023              BEQ      |L1.852|
;;;207    	   	{
;;;208    			//CAN_PRINT((0,"bus error.\r\n"));
;;;209    	 	  	if( (LPC_CAN2->MOD & 0x01) ) // rm == 1,说明是有busoff导致的can控制器复位
00030c  4863              LDR      r0,|L1.1180|
00030e  6800              LDR      r0,[r0,#0]
000310  f0000001          AND      r0,r0,#1
000314  b160              CBZ      r0,|L1.816|
;;;210    	   	  	{
;;;211    	        	CAN_PRINT((0,"can reset in int 0x%08x.\r\n",LPC_CAN2->GSR));
000316  4861              LDR      r0,|L1.1180|
000318  6882              LDR      r2,[r0,#8]
00031a  a156              ADR      r1,|L1.1140|
00031c  2000              MOVS     r0,#0
00031e  f7fffffe          BL       uart_printf
;;;212    		    	LPC_CAN2->GSR =0;
000322  2000              MOVS     r0,#0
000324  495d              LDR      r1,|L1.1180|
000326  6088              STR      r0,[r1,#8]
;;;213    		    	LPC_CAN2->MOD =( (1<<3) );
000328  2008              MOVS     r0,#8
00032a  6008              STR      r0,[r1,#0]
;;;214    		    	LPC_CAN2->CMR =0x02;
00032c  2002              MOVS     r0,#2
00032e  6048              STR      r0,[r1,#4]
                  |L1.816|
;;;215    	      	}
;;;216    
;;;217    	      	if( LPC_CAN2->GSR & 0x80)
000330  485a              LDR      r0,|L1.1180|
000332  6880              LDR      r0,[r0,#8]
000334  f0000080          AND      r0,r0,#0x80
000338  b160              CBZ      r0,|L1.852|
;;;218    	      	{
;;;219    		  		CAN_PRINT((0,"buf off.\r\n"));
00033a  a155              ADR      r1,|L1.1168|
00033c  2000              MOVS     r0,#0
00033e  f7fffffe          BL       uart_printf
;;;220    				CAN_PRINT((0,"can reset in int 0x%08x.\r\n",LPC_CAN2->GSR));
000342  4856              LDR      r0,|L1.1180|
000344  6882              LDR      r2,[r0,#8]
000346  a14b              ADR      r1,|L1.1140|
000348  2000              MOVS     r0,#0
00034a  f7fffffe          BL       uart_printf
;;;221    	        	CAN_SoftReset(LPC_CAN2);
00034e  4853              LDR      r0,|L1.1180|
000350  f7fffffe          BL       CAN_SoftReset
                  |L1.852|
;;;222    		  	}
;;;223    	   	}
;;;224    	}
;;;225    }
000354  bd70              POP      {r4-r6,pc}
;;;226    
                          ENDP

                  CAN_CtrlInit PROC
;;;241    
;;;242    static void CAN_CtrlInit(LPC_CAN_TypeDef *CANx, CPU_INT32U can_btr)
000356  4a27              LDR      r2,|L1.1012|
;;;243    {
;;;244    	if( CANx == LPC_CAN1 ) {
000358  4290              CMP      r0,r2
00035a  d11d              BNE      |L1.920|
;;;245            LPC_SC->PCONP |= 1 << 13;
00035c  4a50              LDR      r2,|L1.1184|
00035e  6812              LDR      r2,[r2,#0]
000360  f4425200          ORR      r2,r2,#0x2000
000364  4b4e              LDR      r3,|L1.1184|
000366  3bc4              SUBS     r3,r3,#0xc4
000368  f8c320c4          STR      r2,[r3,#0xc4]
;;;246        #if defined( __CAN1_PIN021_PIN022__ )
;;;247    		/* p0.21,p0.22 FCNT4 -- RD1,TD1 */
;;;248    		PINSEL1 &= ~( 3 << 10 );            
00036c  4a4d              LDR      r2,|L1.1188|
00036e  6852              LDR      r2,[r2,#4]
000370  f4226240          BIC      r2,r2,#0xc00
000374  4b4b              LDR      r3,|L1.1188|
000376  605a              STR      r2,[r3,#4]
;;;249    		PINSEL1 |=  ( 3 << 10 );			 
000378  461a              MOV      r2,r3
00037a  6852              LDR      r2,[r2,#4]
00037c  f4426240          ORR      r2,r2,#0xc00
000380  605a              STR      r2,[r3,#4]
;;;250    		PINSEL1 &= ~( 3 << 12 );            
000382  461a              MOV      r2,r3
000384  6852              LDR      r2,[r2,#4]
000386  f4225240          BIC      r2,r2,#0x3000
00038a  605a              STR      r2,[r3,#4]
;;;251    		PINSEL1 |=  ( 3 << 12 );
00038c  461a              MOV      r2,r3
00038e  6852              LDR      r2,[r2,#4]
000390  f4425240          ORR      r2,r2,#0x3000
000394  605a              STR      r2,[r3,#4]
000396  e00a              B        |L1.942|
                  |L1.920|
;;;252        #elif defined( __CAN1_PIN000_PIN001__ )
;;;253            /* p0.0,p0.1 FCNT2 -- RD1,TD1 */
;;;254    		PINSEL0 &= ~( 3 << 0 );            
;;;255    		PINSEL0 |=  ( 1 << 0 );			 
;;;256    		PINSEL0 &= ~( 3 << 2 );            
;;;257    		PINSEL0 |=  ( 1 << 2 );
;;;258        #endif
;;;259        } else if( CANx == LPC_CAN2 ) {
000398  4a40              LDR      r2,|L1.1180|
00039a  4290              CMP      r0,r2
00039c  d107              BNE      |L1.942|
;;;260    		LPC_SC->PCONP |= 1 << 14;
00039e  4a40              LDR      r2,|L1.1184|
0003a0  6812              LDR      r2,[r2,#0]
0003a2  f4424280          ORR      r2,r2,#0x4000
0003a6  4b3e              LDR      r3,|L1.1184|
0003a8  3bc4              SUBS     r3,r3,#0xc4
0003aa  f8c320c4          STR      r2,[r3,#0xc4]
                  |L1.942|
;;;261        #if defined( __CAN2_PIN004_PIN005__ )
;;;262    		/* p0.4,p0.5 FCNT3 -- RD2,TD2 */
;;;263     		PINSEL0 &= ~( 3 << 8 );            
;;;264     		PINSEL0 |=  ( 2 << 8 );			 
;;;265     		PINSEL0 &= ~( 3 << 10 );            
;;;266     		PINSEL0 |=  ( 2 << 10 );
;;;267        #elif defined( __CAN2_PIN207_PIN208__ )
;;;268    		/* p2.7,p2.8 FCNT2 -- RD2,TD2 */
;;;269    		PINSEL4 &= ~( 3 << 14 );            
;;;270    		PINSEL4 |=  ( 1 << 14 );			 
;;;271    		PINSEL4 &= ~( 3 << 16 );            
;;;272    		PINSEL4 |=  ( 1 << 16 );
;;;273        #endif
;;;274    	}
;;;275    
;;;276    	CANx->MOD = 0x09;	    // 复位CAN，并置位TPM
0003ae  2209              MOVS     r2,#9
0003b0  6002              STR      r2,[r0,#0]
;;;277      	CANx->IER = 0x00;	    // Disable Receive Interrupt
0003b2  2200              MOVS     r2,#0
0003b4  6102              STR      r2,[r0,#0x10]
;;;278      	CANx->GSR = 0x00;	    // Reset error counter when CANxMOD is in reset
0003b6  6082              STR      r2,[r0,#8]
;;;279      	CANx->BTR = can_btr;	// 设置CAN总线时钟，具体计算见can.h
0003b8  6141              STR      r1,[r0,#0x14]
;;;280    
;;;281    	// 使能 接收 发送 总线错误
;;;282        //CANx->IER |=  IER_RIE | IER_TIE1 | IER_EIE | IER_DOIE | IER_BEIE | IER_TIE2 | IER_TIE3;
;;;283    
;;;284    	CANx->IER |=  IER_RIE | IER_TIE1 | IER_EIE | IER_BEIE | IER_DOIE | IER_TIE2 | IER_TIE3;
0003ba  6902              LDR      r2,[r0,#0x10]
0003bc  f240638f          MOV      r3,#0x68f
0003c0  431a              ORRS     r2,r2,r3
0003c2  6102              STR      r2,[r0,#0x10]
;;;285    
;;;286    	CANx->MOD =  0x08;      //取消复位状态
0003c4  2208              MOVS     r2,#8
0003c6  6002              STR      r2,[r0,#0]
;;;287    }
0003c8  4770              BX       lr
;;;288    
                          ENDP

                  CAN_Init PROC
;;;226    
;;;227    void CAN_Init(void)
0003ca  b510              PUSH     {r4,lr}
;;;228    {
;;;229    #if __CAN1_ENABLE__
;;;230    	CAN_CtrlInit(LPC_CAN1,BITRATE_1000K25MHZ);
0003cc  4936              LDR      r1,|L1.1192|
0003ce  4809              LDR      r0,|L1.1012|
0003d0  f7fffffe          BL       CAN_CtrlInit
;;;231    #endif
;;;232    #if __CAN2_ENABLE__
;;;233        CAN_CtrlInit(LPC_CAN2,BITRATE_1000K25MHZ);
;;;234    #endif
;;;235    	CAN_RING_BUF_Init();
0003d4  f7fffffe          BL       CAN_RING_BUF_Init
;;;236    	/* 填写验收滤波表格，node表示要接收数据(本站)的站号*/
;;;237      CAN_InitAFTable();
0003d8  f7fffffe          BL       CAN_InitAFTable
;;;238      /* 不从UCOS的中断管理函数进入 */
;;;239    	NVIC_EnableIRQ( CAN_IRQn );
0003dc  2019              MOVS     r0,#0x19
0003de  2101              MOVS     r1,#1
0003e0  4081              LSLS     r1,r1,r0
0003e2  0942              LSRS     r2,r0,#5
0003e4  0092              LSLS     r2,r2,#2
0003e6  f10222e0          ADD      r2,r2,#0xe000e000
0003ea  f8c21100          STR      r1,[r2,#0x100]
0003ee  bf00              NOP      
;;;240    }
0003f0  bd10              POP      {r4,pc}
0003f2  0000              DCW      0x0000
                  |L1.1012|
                          DCD      0x40044000
                  |L1.1016|
                          DCD      can1TxRingBuf
                  |L1.1020|
                          DCD      can1Tx2RingBuf
                  |L1.1024|
                          DCD      can1Tx3RingBuf
                  |L1.1028|
                          DCD      can1UpgradeAckTxRingBuf
                  |L1.1032|
                          DCD      can1LEDTxRingBuf
                  |L1.1036|
                          DCD      0x00040404
                  |L1.1040|
                          DCD      0xfffbfc00
                  |L1.1044|
                          DCD      msgRxBuf
                  |L1.1048|
                          DCD      can1RxRingBuf
                  |L1.1052|
                          DCD      can1Rx2RingBuf
                  |L1.1056|
                          DCD      can1RxUpgradeRingBuf
                  |L1.1060|
                          DCD      can1RxLEDRingBuf
                  |L1.1064|
                          DCD      0x4003c000
                  |L1.1068|
00042c  41463a25          DCB      "AF:%.2x\r\n",0
000430  2e32780d
000434  0a00    
000436  00                DCB      0
000437  00                DCB      0
                  |L1.1080|
000438  6572726f          DCB      "error warning.\r\n",0
00043c  72207761
000440  726e696e
000444  672e0d0a
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
                  |L1.1100|
00044c  6572726f          DCB      "error passive.\r\n",0
000450  72207061
000454  73736976
000458  652e0d0a
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L1.1120|
000460  61726269          DCB      "arbitration lost.\r\n",0
000464  74726174
000468  696f6e20
00046c  6c6f7374
000470  2e0d0a00
                  |L1.1140|
000474  63616e20          DCB      "can reset in int 0x%08x.\r\n",0
000478  72657365
00047c  7420696e
000480  20696e74
000484  20307825
000488  3038782e
00048c  0d0a00  
00048f  00                DCB      0
                  |L1.1168|
000490  62756620          DCB      "buf off.\r\n",0
000494  6f66662e
000498  0d0a00  
00049b  00                DCB      0
                  |L1.1180|
                          DCD      0x40048000
                  |L1.1184|
                          DCD      0x400fc0c4
                  |L1.1188|
                          DCD      0x4002c000
                  |L1.1192|
                          DCD      0x00020004
                          ENDP

                  CAN_CtrlDeInit PROC
;;;299    
;;;300    static void CAN_CtrlDeInit( LPC_CAN_TypeDef *CANx )
0004ac  2109              MOVS     r1,#9
;;;301    {
;;;302    	CANx->MOD = 0x09;	    // 复位CAN，并置位TPM
0004ae  6001              STR      r1,[r0,#0]
;;;303      	CANx->IER = 0x00;	    // Disable all Interrupt
0004b0  2100              MOVS     r1,#0
0004b2  6101              STR      r1,[r0,#0x10]
;;;304      	CANx->GSR = 0x00;	    // Reset error counter when CANxMOD is in reset
0004b4  6081              STR      r1,[r0,#8]
;;;305    	CANx->MOD = 0x08;       //取消复位状态
0004b6  2108              MOVS     r1,#8
0004b8  6001              STR      r1,[r0,#0]
;;;306    
;;;307    	if( CANx == LPC_CAN1 ) {
0004ba  4998              LDR      r1,|L1.1820|
0004bc  4288              CMP      r0,r1
0004be  d108              BNE      |L1.1234|
;;;308            LPC_SC->PCONP &= ~( 1u << 13 );
0004c0  4997              LDR      r1,|L1.1824|
0004c2  6809              LDR      r1,[r1,#0]
0004c4  f4215100          BIC      r1,r1,#0x2000
0004c8  4a95              LDR      r2,|L1.1824|
0004ca  3ac4              SUBS     r2,r2,#0xc4
0004cc  f8c210c4          STR      r1,[r2,#0xc4]
0004d0  e00a              B        |L1.1256|
                  |L1.1234|
;;;309        } else if( CANx == LPC_CAN2 ) {
0004d2  4994              LDR      r1,|L1.1828|
0004d4  4288              CMP      r0,r1
0004d6  d107              BNE      |L1.1256|
;;;310    	    LPC_SC->PCONP &= ~( 1u << 14 );
0004d8  4991              LDR      r1,|L1.1824|
0004da  6809              LDR      r1,[r1,#0]
0004dc  f4214180          BIC      r1,r1,#0x4000
0004e0  4a8f              LDR      r2,|L1.1824|
0004e2  3ac4              SUBS     r2,r2,#0xc4
0004e4  f8c210c4          STR      r1,[r2,#0xc4]
                  |L1.1256|
;;;311    	}
;;;312    }
0004e8  4770              BX       lr
;;;313    
                          ENDP

                  CAN_DeInit PROC
;;;288    
;;;289    void CAN_DeInit(void)
0004ea  b510              PUSH     {r4,lr}
;;;290    {
;;;291    #if __CAN1_ENABLE__
;;;292    	CAN_CtrlDeInit(LPC_CAN1);
0004ec  488b              LDR      r0,|L1.1820|
0004ee  f7fffffe          BL       CAN_CtrlDeInit
;;;293    #endif
;;;294    
;;;295    #if __CAN2_ENABLE__
;;;296        CAN_CtrlDeInit(LPC_CAN2);
;;;297    #endif
;;;298    }
0004f2  bd10              POP      {r4,pc}
;;;299    
                          ENDP

                  CAN_TBS1_WRITE PROC
;;;313    
;;;314    void CAN_TBS1_WRITE(LPC_CAN_TypeDef *pCANx,CPU_INT32U DATA_A,CPU_INT32U DATA_B,CPU_INT32U TFI, CPU_INT32U TID)
0004f4  b510              PUSH     {r4,lr}
;;;315    {
0004f6  9c02              LDR      r4,[sp,#8]
;;;316    	pCANx->TFI1 = TFI;
0004f8  6303              STR      r3,[r0,#0x30]
;;;317    	pCANx->TID1 = TID;
0004fa  6344              STR      r4,[r0,#0x34]
;;;318    	pCANx->TDA1 = DATA_A;
0004fc  6381              STR      r1,[r0,#0x38]
;;;319    	pCANx->TDB1 = DATA_B;
0004fe  63c2              STR      r2,[r0,#0x3c]
;;;320    }
000500  bd10              POP      {r4,pc}
;;;321    
                          ENDP

                  CAN_TBS2_WRITE PROC
;;;322    void CAN_TBS2_WRITE(LPC_CAN_TypeDef *pCANx,CPU_INT32U DATA_A, CPU_INT32U DATA_B, CPU_INT32U TFI, CPU_INT32U TID)
000502  b510              PUSH     {r4,lr}
;;;323    {
000504  9c02              LDR      r4,[sp,#8]
;;;324    	pCANx->TFI2 = TFI;
000506  6403              STR      r3,[r0,#0x40]
;;;325    	pCANx->TID2 = TID;
000508  6444              STR      r4,[r0,#0x44]
;;;326    	pCANx->TDA2 = DATA_A;
00050a  6481              STR      r1,[r0,#0x48]
;;;327    	pCANx->TDB2 = DATA_B;
00050c  64c2              STR      r2,[r0,#0x4c]
;;;328    }
00050e  bd10              POP      {r4,pc}
;;;329    
                          ENDP

                  CAN_TBS3_WRITE PROC
;;;330    void CAN_TBS3_WRITE(LPC_CAN_TypeDef *pCANx,CPU_INT32U DATA_A, CPU_INT32U DATA_B, CPU_INT32U TFI, CPU_INT32U TID)
000510  b510              PUSH     {r4,lr}
;;;331    {
000512  9c02              LDR      r4,[sp,#8]
;;;332    	pCANx->TFI3 = TFI;
000514  6503              STR      r3,[r0,#0x50]
;;;333    	pCANx->TID3 = TID;
000516  6544              STR      r4,[r0,#0x54]
;;;334    	pCANx->TDA3 = DATA_A;
000518  6581              STR      r1,[r0,#0x58]
;;;335    	pCANx->TDB3 = DATA_B;
00051a  65c2              STR      r2,[r0,#0x5c]
;;;336    }
00051c  bd10              POP      {r4,pc}
;;;337    
                          ENDP

                  CAN_tx_action PROC
;;;340    /****************************** can TX process ***************************/
;;;341    void CAN_tx_action(LPC_CAN_TypeDef *pCANx, CAN_RING_BUF_Type* buf,CPU_INT32U cnt,CPU_INT32U flag)
00051e  e92d4ffe          PUSH     {r1-r11,lr}
;;;342    {
000522  4604              MOV      r4,r0
000524  4689              MOV      r9,r1
000526  4615              MOV      r5,r2
000528  461e              MOV      r6,r3
;;;343    	uint32_t DATA[2] = { 0 }; // must init all data to 0
00052a  2000              MOVS     r0,#0
00052c  9001              STR      r0,[sp,#4]
00052e  9002              STR      r0,[sp,#8]
;;;344    	uint32_t TFI = 0;
000530  4682              MOV      r10,r0
;;;345    	uint32_t TID = 0;
000532  4680              MOV      r8,r0
;;;346    
;;;347        CPU_INT08U *pTxPrio = 0;
000534  2700              MOVS     r7,#0
;;;348    
;;;349        if( pCANx == LPC_CAN1 ) {
000536  4879              LDR      r0,|L1.1820|
000538  4284              CMP      r4,r0
00053a  d101              BNE      |L1.1344|
;;;350            pTxPrio = &TxPrio1;
00053c  4f7a              LDR      r7,|L1.1832|
00053e  e003              B        |L1.1352|
                  |L1.1344|
;;;351        } else if( pCANx == LPC_CAN2 ) {
000540  4878              LDR      r0,|L1.1828|
000542  4284              CMP      r4,r0
000544  d100              BNE      |L1.1352|
;;;352            pTxPrio = &TxPrio2;
000546  4f79              LDR      r7,|L1.1836|
                  |L1.1352|
;;;353        }
;;;354    
;;;355        if(*pTxPrio == 255)return; /* 防止CAN发送优先级反转的情况发生 */
000548  7838              LDRB     r0,[r7,#0]
00054a  28ff              CMP      r0,#0xff
00054c  d101              BNE      |L1.1362|
                  |L1.1358|
;;;356    
;;;357    	cnt = (cnt >= 8)?8:cnt;
;;;358    	if( CAN_RING_BUF_RD_BLOCK((CPU_INT08U*)&DATA[0],buf,cnt) == cnt)
;;;359    	{
;;;360    		//CAN_PRINT((0,"%d length:%d.\r\n",__LINE__,cnt));
;;;361    		TFI = ( ((cnt<<16)&0x000F0000) | (*pTxPrio)++ );
;;;362    		TID = buf->id;
;;;363    
;;;364    	    if(flag == 1)
;;;365    		{
;;;366    		    CAN_TBS1_WRITE(pCANx,DATA[0],DATA[1],TFI,TID);
;;;367    		}else if(flag == 2)
;;;368    		{
;;;369    			CAN_TBS2_WRITE(pCANx,DATA[0],DATA[1],TFI,TID);
;;;370    		}else
;;;371    		{
;;;372    		    flag = 3; /* 确保flag为1,2,3中的数 */
;;;373    			CAN_TBS3_WRITE(pCANx,DATA[0],DATA[1],TFI,TID);
;;;374    		}
;;;375    
;;;376    		pCANx->CMR = (0x10 << flag) | 0x01;
;;;377    	}else
;;;378    	{
;;;379    		return;
;;;380    	}
;;;381    }
00054e  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.1362|
000552  2d08              CMP      r5,#8                 ;357
000554  d301              BCC      |L1.1370|
000556  2008              MOVS     r0,#8                 ;357
000558  e000              B        |L1.1372|
                  |L1.1370|
00055a  4628              MOV      r0,r5                 ;357
                  |L1.1372|
00055c  4605              MOV      r5,r0                 ;357
00055e  462a              MOV      r2,r5                 ;358
000560  4649              MOV      r1,r9                 ;358
000562  a801              ADD      r0,sp,#4              ;358
000564  f7fffffe          BL       CAN_RING_BUF_RD_BLOCK
000568  42a8              CMP      r0,r5                 ;358
00056a  d12f              BNE      |L1.1484|
00056c  7838              LDRB     r0,[r7,#0]            ;361
00056e  1c41              ADDS     r1,r0,#1              ;361
000570  7039              STRB     r1,[r7,#0]            ;361
000572  f44f2170          MOV      r1,#0xf0000           ;361
000576  ea014105          AND      r1,r1,r5,LSL #16      ;361
00057a  ea400a01          ORR      r10,r0,r1             ;361
00057e  f8d98010          LDR      r8,[r9,#0x10]         ;362
000582  2e01              CMP      r6,#1                 ;364
000584  d108              BNE      |L1.1432|
000586  f8cd8000          STR      r8,[sp,#0]            ;366
00058a  4653              MOV      r3,r10                ;366
00058c  4620              MOV      r0,r4                 ;366
00058e  e9dd1201          LDRD     r1,r2,[sp,#4]         ;366
000592  f7fffffe          BL       CAN_TBS1_WRITE
000596  e013              B        |L1.1472|
                  |L1.1432|
000598  2e02              CMP      r6,#2                 ;367
00059a  d108              BNE      |L1.1454|
00059c  f8cd8000          STR      r8,[sp,#0]            ;369
0005a0  4653              MOV      r3,r10                ;369
0005a2  4620              MOV      r0,r4                 ;369
0005a4  e9dd1201          LDRD     r1,r2,[sp,#4]         ;369
0005a8  f7fffffe          BL       CAN_TBS2_WRITE
0005ac  e008              B        |L1.1472|
                  |L1.1454|
0005ae  2603              MOVS     r6,#3                 ;372
0005b0  f8cd8000          STR      r8,[sp,#0]            ;373
0005b4  4653              MOV      r3,r10                ;373
0005b6  4620              MOV      r0,r4                 ;373
0005b8  e9dd1201          LDRD     r1,r2,[sp,#4]         ;373
0005bc  f7fffffe          BL       CAN_TBS3_WRITE
                  |L1.1472|
0005c0  2010              MOVS     r0,#0x10              ;376
0005c2  40b0              LSLS     r0,r0,r6              ;376
0005c4  f0400001          ORR      r0,r0,#1              ;376
0005c8  6060              STR      r0,[r4,#4]            ;376
0005ca  e000              B        |L1.1486|
                  |L1.1484|
0005cc  e7bf              B        |L1.1358|
                  |L1.1486|
0005ce  bf00              NOP      
0005d0  e7bd              B        |L1.1358|
;;;382    
                          ENDP

                  CAN_tx_action_all PROC
;;;383    void CAN_tx_action_all(LPC_CAN_TypeDef *pCANx, CAN_RING_BUF_Type* buf,CPU_INT32U cnt)
0005d2  e92d43f0          PUSH     {r4-r9,lr}
;;;384    {
0005d6  b087              SUB      sp,sp,#0x1c
0005d8  4606              MOV      r6,r0
0005da  460f              MOV      r7,r1
0005dc  4615              MOV      r5,r2
;;;385    	uint32_t DATA[6] = {0};// must init all data to 0
0005de  2118              MOVS     r1,#0x18
0005e0  a801              ADD      r0,sp,#4
0005e2  f7fffffe          BL       __aeabi_memclr4
;;;386    	uint32_t TFI     = 0;
0005e6  f04f0900          MOV      r9,#0
;;;387    	uint32_t TID     = 0;
0005ea  46c8              MOV      r8,r9
;;;388    
;;;389        CPU_INT08U *pTxPrio = 0;
0005ec  2400              MOVS     r4,#0
;;;390    
;;;391        if( pCANx == LPC_CAN1 ) {
0005ee  484b              LDR      r0,|L1.1820|
0005f0  4286              CMP      r6,r0
0005f2  d101              BNE      |L1.1528|
;;;392            pTxPrio = &TxPrio1;
0005f4  4c4c              LDR      r4,|L1.1832|
0005f6  e003              B        |L1.1536|
                  |L1.1528|
;;;393        } else if( pCANx == LPC_CAN2 ) {
0005f8  484a              LDR      r0,|L1.1828|
0005fa  4286              CMP      r6,r0
0005fc  d100              BNE      |L1.1536|
;;;394            pTxPrio = &TxPrio2;
0005fe  4c4b              LDR      r4,|L1.1836|
                  |L1.1536|
;;;395        }
;;;396      	cnt    = (cnt >= 24) ? 24:cnt;
000600  2d18              CMP      r5,#0x18
000602  d301              BCC      |L1.1544|
000604  2018              MOVS     r0,#0x18
000606  e000              B        |L1.1546|
                  |L1.1544|
000608  4628              MOV      r0,r5
                  |L1.1546|
00060a  4605              MOV      r5,r0
;;;397    	*pTxPrio = 0;
00060c  2000              MOVS     r0,#0
00060e  7020              STRB     r0,[r4,#0]
;;;398      	if( CAN_RING_BUF_RD_BLOCK((CPU_INT08U*)&DATA[0],buf,cnt) == cnt)
000610  462a              MOV      r2,r5
000612  4639              MOV      r1,r7
000614  a801              ADD      r0,sp,#4
000616  f7fffffe          BL       CAN_RING_BUF_RD_BLOCK
00061a  42a8              CMP      r0,r5
00061c  d179              BNE      |L1.1810|
;;;399    	{
;;;400    		if( cnt<=8 )
00061e  2d08              CMP      r5,#8
000620  d815              BHI      |L1.1614|
;;;401    		{
;;;402    			TFI = ( ((cnt<<16) & 0x000F0000) | (*pTxPrio)++ );
000622  7820              LDRB     r0,[r4,#0]
000624  1c41              ADDS     r1,r0,#1
000626  7021              STRB     r1,[r4,#0]
000628  f44f2170          MOV      r1,#0xf0000
00062c  ea014105          AND      r1,r1,r5,LSL #16
000630  ea400901          ORR      r9,r0,r1
;;;403    			TID = buf->id;
000634  f8d78010          LDR      r8,[r7,#0x10]
;;;404    			CAN_TBS1_WRITE(pCANx,DATA[0],DATA[1],TFI,TID);
000638  f8cd8000          STR      r8,[sp,#0]
00063c  464b              MOV      r3,r9
00063e  4630              MOV      r0,r6
000640  e9dd1201          LDRD     r1,r2,[sp,#4]
000644  f7fffffe          BL       CAN_TBS1_WRITE
;;;405    
;;;406    			CAN_TBS1_EN(pCANx)
000648  2021              MOVS     r0,#0x21
00064a  6070              STR      r0,[r6,#4]
00064c  e064              B        |L1.1816|
                  |L1.1614|
;;;407    
;;;408    		}else if( cnt<=16 )
00064e  2d10              CMP      r5,#0x10
000650  d828              BHI      |L1.1700|
;;;409    		{
;;;410    			TFI = ( ((8<<16)&0x000F0000) | (*pTxPrio)++ );
000652  7821              LDRB     r1,[r4,#0]
000654  1c48              ADDS     r0,r1,#1
000656  7020              STRB     r0,[r4,#0]
000658  f4412900          ORR      r9,r1,#0x80000
;;;411                TID = buf->id;
00065c  f8d78010          LDR      r8,[r7,#0x10]
;;;412    			CAN_TBS1_WRITE(pCANx,DATA[0],DATA[1],TFI,TID);
000660  f8cd8000          STR      r8,[sp,#0]
000664  464b              MOV      r3,r9
000666  4630              MOV      r0,r6
000668  e9dd1201          LDRD     r1,r2,[sp,#4]
00066c  f7fffffe          BL       CAN_TBS1_WRITE
;;;413    			CAN_TBS1_EN(pCANx)
000670  2021              MOVS     r0,#0x21
000672  6070              STR      r0,[r6,#4]
;;;414    
;;;415    			TFI = ( (((cnt-8)<< 16)&0x000F0000) | (*pTxPrio)++);
000674  7820              LDRB     r0,[r4,#0]
000676  1c41              ADDS     r1,r0,#1
000678  7021              STRB     r1,[r4,#0]
00067a  f1a50108          SUB      r1,r5,#8
00067e  f44f2270          MOV      r2,#0xf0000
000682  ea024101          AND      r1,r2,r1,LSL #16
000686  ea400901          ORR      r9,r0,r1
;;;416                TID = buf->id;
00068a  f8d78010          LDR      r8,[r7,#0x10]
;;;417    			CAN_TBS2_WRITE(pCANx,DATA[2],DATA[3],TFI,TID);
00068e  f8cd8000          STR      r8,[sp,#0]
000692  464b              MOV      r3,r9
000694  4630              MOV      r0,r6
000696  e9dd1203          LDRD     r1,r2,[sp,#0xc]
00069a  f7fffffe          BL       CAN_TBS2_WRITE
;;;418    			CAN_TBS2_EN(pCANx)
00069e  2041              MOVS     r0,#0x41
0006a0  6070              STR      r0,[r6,#4]
0006a2  e039              B        |L1.1816|
                  |L1.1700|
;;;419    		}else  /* 到这里肯定是 16<cnt<=24 */
;;;420    		{
;;;421    			TFI = ( ((8 << 16) & 0x000F0000) | (*pTxPrio)++ );
0006a4  7821              LDRB     r1,[r4,#0]
0006a6  1c48              ADDS     r0,r1,#1
0006a8  7020              STRB     r0,[r4,#0]
0006aa  f4412900          ORR      r9,r1,#0x80000
;;;422                TID = buf->id;
0006ae  f8d78010          LDR      r8,[r7,#0x10]
;;;423    			CAN_TBS1_WRITE(pCANx,DATA[0],DATA[1],TFI,TID);
0006b2  f8cd8000          STR      r8,[sp,#0]
0006b6  464b              MOV      r3,r9
0006b8  4630              MOV      r0,r6
0006ba  e9dd1201          LDRD     r1,r2,[sp,#4]
0006be  f7fffffe          BL       CAN_TBS1_WRITE
;;;424    
;;;425    			TFI = ( ((8<<16)&0x000F0000) | (*pTxPrio)++ );
0006c2  7821              LDRB     r1,[r4,#0]
0006c4  1c48              ADDS     r0,r1,#1
0006c6  7020              STRB     r0,[r4,#0]
0006c8  f4412900          ORR      r9,r1,#0x80000
;;;426                TID = buf->id;
0006cc  f8d78010          LDR      r8,[r7,#0x10]
;;;427    			CAN_TBS2_WRITE(pCANx,DATA[2],DATA[3],TFI,TID);
0006d0  f8cd8000          STR      r8,[sp,#0]
0006d4  464b              MOV      r3,r9
0006d6  4630              MOV      r0,r6
0006d8  e9dd1203          LDRD     r1,r2,[sp,#0xc]
0006dc  f7fffffe          BL       CAN_TBS2_WRITE
;;;428    
;;;429    			TFI = ( (((cnt-16)<<16) & 0x000F0000) | (*pTxPrio)++);
0006e0  7820              LDRB     r0,[r4,#0]
0006e2  1c41              ADDS     r1,r0,#1
0006e4  7021              STRB     r1,[r4,#0]
0006e6  f1a50110          SUB      r1,r5,#0x10
0006ea  f44f2270          MOV      r2,#0xf0000
0006ee  ea024101          AND      r1,r2,r1,LSL #16
0006f2  ea400901          ORR      r9,r0,r1
;;;430                TID = buf->id;
0006f6  f8d78010          LDR      r8,[r7,#0x10]
;;;431    			CAN_TBS3_WRITE(pCANx,DATA[4],DATA[5],TFI,TID);
0006fa  f8cd8000          STR      r8,[sp,#0]
0006fe  464b              MOV      r3,r9
000700  4630              MOV      r0,r6
000702  e9dd1205          LDRD     r1,r2,[sp,#0x14]
000706  f7fffffe          BL       CAN_TBS3_WRITE
;;;432    
;;;433    			CAN_TBS123_EN(pCANx)
00070a  20e1              MOVS     r0,#0xe1
00070c  6070              STR      r0,[r6,#4]
00070e  e003              B        |L1.1816|
000710  e7ff              B        |L1.1810|
                  |L1.1810|
;;;434    		}
;;;435    	}else
;;;436    	{
;;;437    		return;
;;;438    	}
;;;439    }
000712  b007              ADD      sp,sp,#0x1c
000714  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1816|
000718  bf00              NOP      
00071a  e7fa              B        |L1.1810|
;;;440    
                          ENDP

                  |L1.1820|
                          DCD      0x40044000
                  |L1.1824|
                          DCD      0x400fc0c4
                  |L1.1828|
                          DCD      0x40048000
                  |L1.1832|
                          DCD      TxPrio1
                  |L1.1836|
                          DCD      TxPrio2

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  msgRxBuf
                          %        16

                          AREA ||.data||, DATA, ALIGN=0

                  TxPrio1
000000  00                DCB      0x00
                  TxPrio2
000001  00                DCB      0x00
