; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\hex\cfg_pack.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\hex\cfg_pack.d --cpu=Cortex-M3 --apcs=interwork -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC17xx -D__DEBUG_UART0_PRINTF__ -D__USB__ --omf_browse=.\hex\cfg_pack.crf app\cfg\cfg_pack.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  encryp_cmd PROC
;;;29     /* Function define -----------------------------------------------------------*/
;;;30     int encryp_cmd(U08 *source, U16 source_len, U08 *des, U16 des_size, U16 *p_des_len)
000000  b570              PUSH     {r4-r6,lr}
;;;31     {
000002  4615              MOV      r5,r2
000004  9e04              LDR      r6,[sp,#0x10]
000006  460c              MOV      r4,r1
000008  b120              CBZ      r0,|L1.20|
;;;32     	if( NULL == source ||
;;;33     		NULL == des ||
00000a  b11d              CBZ      r5,|L1.20|
;;;34     		source == des ||
00000c  42a8              CMP      r0,r5
00000e  d001              BEQ      |L1.20|
;;;35     		des_size < source_len )
000010  42a3              CMP      r3,r4
000012  d202              BCS      |L1.26|
                  |L1.20|
;;;36     	{
;;;37     		return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
;;;38     	}
;;;39     
;;;40     	//TODO: encrytion
;;;41     
;;;42     	memcpy(des, source, source_len);
;;;43     
;;;44     	*p_des_len =  source_len;
;;;45     
;;;46     	return 1;
;;;47     }
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  460a              MOV      r2,r1                 ;42
00001c  4601              MOV      r1,r0                 ;42
00001e  4628              MOV      r0,r5                 ;42
000020  f7fffffe          BL       __aeabi_memcpy
000024  8034              STRH     r4,[r6,#0]            ;44
000026  2001              MOVS     r0,#1                 ;46
000028  bd70              POP      {r4-r6,pc}
;;;48     
                          ENDP

                  check_sum_calculate PROC
;;;49     int check_sum_calculate(U08 *source,U16 source_len,U16 *p_des_len)
00002a  b570              PUSH     {r4-r6,lr}
;;;50     {
00002c  4615              MOV      r5,r2
00002e  460c              MOV      r4,r1
000030  0006              MOVS     r6,r0
000032  d00b              BEQ      |L1.76|
;;;51     	U16 R_CRC;
;;;52     
;;;53     	if( NULL == source ) 
;;;54     	{
;;;55     		return -1;
;;;56     	}
;;;57     
;;;58     	R_CRC = Get_CRC16_Check_Sum ( (U08 *)source, source_len, CRC_INIT ); 
000034  f2436292          MOV      r2,#0x3692
000038  f7fffffe          BL       Get_CRC16_Check_Sum
;;;59          
;;;60         source[source_len+2] = (U08)(R_CRC & 0x00ff); 
00003c  1933              ADDS     r3,r6,r4
00003e  7098              STRB     r0,[r3,#2]
;;;61         source[source_len+3] = (U08)((R_CRC>>8)& 0x00ff);
000040  0a00              LSRS     r0,r0,#8
000042  70d8              STRB     r0,[r3,#3]
;;;62     
;;;63     	*p_des_len = source_len+4;
000044  1d24              ADDS     r4,r4,#4
000046  802c              STRH     r4,[r5,#0]
;;;64     	
;;;65     	return 1;
000048  2001              MOVS     r0,#1
;;;66     }
00004a  bd70              POP      {r4-r6,pc}
                  |L1.76|
00004c  f04f30ff          MOV      r0,#0xffffffff        ;55
000050  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  valuate_checksum PROC
;;;68     int valuate_checksum(U08 *buf, unsigned short buf_len)
000052  b570              PUSH     {r4-r6,lr}
;;;69     {
000054  460c              MOV      r4,r1
000056  0005              MOVS     r5,r0
000058  d001              BEQ      |L1.94|
;;;70         U16 wExpected = 0; 
;;;71          
;;;72         if ((buf == NULL) || (buf_len <= 2)) 
00005a  2c02              CMP      r4,#2
00005c  d802              BHI      |L1.100|
                  |L1.94|
;;;73         { 
;;;74             return -1; 
00005e  f04f30ff          MOV      r0,#0xffffffff
;;;75         } 
;;;76         wExpected = Get_CRC16_Check_Sum ( (U08*)buf, buf_len - 4, CRC_INIT); 
;;;77          
;;;78         return ((char)(wExpected & 0xff) == buf[buf_len - 2] && 
;;;79     		(char)((wExpected >> 8) & 0xff) == buf[buf_len - 1]);
;;;80     }
000062  bd70              POP      {r4-r6,pc}
                  |L1.100|
000064  f2436292          MOV      r2,#0x3692            ;76
000068  1f21              SUBS     r1,r4,#4              ;76
00006a  f7fffffe          BL       Get_CRC16_Check_Sum
00006e  1929              ADDS     r1,r5,r4              ;78
000070  b2c2              UXTB     r2,r0                 ;78
000072  f8113c02          LDRB     r3,[r1,#-2]           ;78
000076  429a              CMP      r2,r3                 ;78
000078  d106              BNE      |L1.136|
00007a  f8111c01          LDRB     r1,[r1,#-1]           ;79
00007e  ebb12f10          CMP      r1,r0,LSR #8          ;79
000082  d101              BNE      |L1.136|
000084  2001              MOVS     r0,#1                 ;78
000086  bd70              POP      {r4-r6,pc}
                  |L1.136|
000088  2000              MOVS     r0,#0                 ;78
00008a  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  send_cmd PROC
;;;82     void send_cmd(U08 encryp_type, U08 *buf, U16 buf_len)
00008c  b537              PUSH     {r0-r2,r4,r5,lr}
;;;83     {	
;;;84     	send_buf[0] = 0x55;
00008e  4c11              LDR      r4,|L1.212|
000090  b082              SUB      sp,sp,#8              ;83
000092  2355              MOVS     r3,#0x55
000094  7023              STRB     r3,[r4,#0]
;;;85     	send_buf[1] = 0xAA;
000096  22aa              MOVS     r2,#0xaa
000098  7062              STRB     r2,[r4,#1]
;;;86     	send_buf[2] = 0x55;
00009a  70a3              STRB     r3,[r4,#2]
00009c  4608              MOV      r0,r1                 ;83
;;;87     	send_buf[3] = 0xAA;
00009e  70e2              STRB     r2,[r4,#3]
;;;88     
;;;89     	if(encryp_cmd(buf, buf_len, &send_buf[4], SEND_BUF_MAX_LEN - 4, &buf_len) < 0)
0000a0  a904              ADD      r1,sp,#0x10
0000a2  9100              STR      r1,[sp,#0]
0000a4  23fb              MOVS     r3,#0xfb
0000a6  1d22              ADDS     r2,r4,#4
0000a8  f8bd1010          LDRH     r1,[sp,#0x10]
0000ac  f7fffffe          BL       encryp_cmd
0000b0  2800              CMP      r0,#0
0000b2  db0d              BLT      |L1.208|
;;;90     	{
;;;91     		//TODO: warn
;;;92     		return;
;;;93     	}
;;;94     		
;;;95     	if( check_sum_calculate(&send_buf[4],buf_len,&buf_len) < 0)// syn header not check sum
0000b4  aa04              ADD      r2,sp,#0x10
0000b6  f8bd1010          LDRH     r1,[sp,#0x10]
0000ba  1d20              ADDS     r0,r4,#4
0000bc  f7fffffe          BL       check_sum_calculate
0000c0  2800              CMP      r0,#0
0000c2  db05              BLT      |L1.208|
;;;96     	{
;;;97     	    //TODO: warn
;;;98     		return;
;;;99     	}
;;;100    #ifdef __CAN__	
;;;101    	CAN_sendbytes_View( LPC_CAN2, &upgradeTxRingBuf, send_buf, buf_len+4);
;;;102    #endif
;;;103    #ifdef __USB__
;;;104    	VCOM_sendpackage( ( const char * )send_buf, buf_len + 4 );  //4 is for 0x55AA55AA
0000c4  f8bd1010          LDRH     r1,[sp,#0x10]
0000c8  4620              MOV      r0,r4
0000ca  1d09              ADDS     r1,r1,#4
0000cc  f7fffffe          BL       VCOM_sendpackage
                  |L1.208|
;;;105    #endif
;;;106    }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  bd30              POP      {r4,r5,pc}
;;;107    
                          ENDP

                  |L1.212|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  send_buf
                          %        255

;*** Start embedded assembler ***

#line 1 "app\\cfg\\cfg_pack.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_cfg_pack_c_f3fafdce____REV16|
#line 129 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_cfg_pack_c_f3fafdce____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_cfg_pack_c_f3fafdce____REVSH|
#line 144
|__asm___10_cfg_pack_c_f3fafdce____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
