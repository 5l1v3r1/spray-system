; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\mf_crc16.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\mf_crc16.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\cstartup -I.\drivers\uart -I.\app\cfg -I.\iap -I.\drivers -I.\usb -I.\drivers\adc -I.\drivers\gpio -I.\drivers -I.\RTE\_lpc17xx_can_loader_debug -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DLPC175x_6x -D__DEBUG_UART2_PRINTF__ -D__UART0__ -D__UART1__ -D__UART2__ -D__UART3__ -D__UART2_ENABLE__ -D__UART3_ENABLE__ -D__UART0_ENABLE__ -D__UART1_ENABLE__ --omf_browse=.\output\mf_crc16.crf app\crc\MF_CRC16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Get_CRC16_Check_Sum PROC
;;;57     */ 
;;;58     uint16_t Get_CRC16_Check_Sum( uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC ) 
000000  b530              PUSH     {r4,r5,lr}
;;;59     {  
000002  4603              MOV      r3,r0
;;;60     	uint8_t chData = 0; 
000004  2400              MOVS     r4,#0
;;;61     	if( pchMessage == NULL ) { 
000006  b913              CBNZ     r3,|L1.14|
;;;62     		return 0xFFFF;
000008  f64f70ff          MOV      r0,#0xffff
                  |L1.12|
;;;63     	}     
;;;64          
;;;65     	while( dwLength-- ) {
;;;66     		chData = *pchMessage++;
;;;67     		(wCRC) = ((U16)(wCRC) >> 8)  ^ wCRC_Table[((U16)(wCRC) ^ (U16)(chData)) & 0x00ff];
;;;68     	} 
;;;69          
;;;70     	return wCRC; 
;;;71     }
00000c  bd30              POP      {r4,r5,pc}
                  |L1.14|
00000e  e009              B        |L1.36|
                  |L1.16|
000010  f8134b01          LDRB     r4,[r3],#1            ;66
000014  ea820004          EOR      r0,r2,r4              ;67
000018  b2c0              UXTB     r0,r0                 ;67
00001a  4d20              LDR      r5,|L1.156|
00001c  f8350010          LDRH     r0,[r5,r0,LSL #1]     ;67
000020  ea802222          EOR      r2,r0,r2,ASR #8       ;67
                  |L1.36|
000024  1e08              SUBS     r0,r1,#0              ;65
000026  f1a10101          SUB      r1,r1,#1              ;65
00002a  d1f1              BNE      |L1.16|
00002c  4610              MOV      r0,r2                 ;70
00002e  e7ed              B        |L1.12|
;;;72     
                          ENDP

                  Verify_CRC16_Check_Sum PROC
;;;73     uint32_t Verify_CRC16_Check_Sum( uint8_t *pchMessage, uint32_t dwLength ) 
000030  b570              PUSH     {r4-r6,lr}
;;;74     { 
000032  4605              MOV      r5,r0
000034  460c              MOV      r4,r1
;;;75     	uint16_t wExpected = 0; 
000036  2600              MOVS     r6,#0
;;;76     
;;;77     	if( ( pchMessage == NULL ) || ( dwLength <= 2 ) ) {
000038  b10d              CBZ      r5,|L1.62|
00003a  2c02              CMP      r4,#2
00003c  d802              BHI      |L1.68|
                  |L1.62|
;;;78     			return 0xFFFF;
00003e  f64f70ff          MOV      r0,#0xffff
                  |L1.66|
;;;79     	} 
;;;80     	wExpected = Get_CRC16_Check_Sum( pchMessage, dwLength - 2, CRC_INIT ); 
;;;81     
;;;82     	return ( ( wExpected & 0xff ) == pchMessage[dwLength - 2] ) && ( ( ( wExpected >> 8 ) & 0xff ) == pchMessage[dwLength - 1] ); 
;;;83     } 
000042  bd70              POP      {r4-r6,pc}
                  |L1.68|
000044  1ea1              SUBS     r1,r4,#2              ;80
000046  f2436292          MOV      r2,#0x3692            ;80
00004a  4628              MOV      r0,r5                 ;80
00004c  f7fffffe          BL       Get_CRC16_Check_Sum
000050  4606              MOV      r6,r0                 ;80
000052  b2f1              UXTB     r1,r6                 ;82
000054  1ea0              SUBS     r0,r4,#2              ;82
000056  5c28              LDRB     r0,[r5,r0]            ;82
000058  4281              CMP      r1,r0                 ;82
00005a  d106              BNE      |L1.106|
00005c  1e60              SUBS     r0,r4,#1              ;82
00005e  5c28              LDRB     r0,[r5,r0]            ;82
000060  ebb02f16          CMP      r0,r6,LSR #8          ;82
000064  d101              BNE      |L1.106|
000066  2001              MOVS     r0,#1                 ;82
000068  e7eb              B        |L1.66|
                  |L1.106|
00006a  2000              MOVS     r0,#0                 ;82
00006c  e7e9              B        |L1.66|
;;;84      
                          ENDP

                  Append_CRC16_Check_Sum PROC
;;;85     void Append_CRC16_Check_Sum( uint8_t *pchMessage, uint32_t dwLength ) 
00006e  b570              PUSH     {r4-r6,lr}
;;;86     {  
000070  4605              MOV      r5,r0
000072  460c              MOV      r4,r1
;;;87     	unsigned short wCRC = 0; 
000074  2600              MOVS     r6,#0
;;;88     	 
;;;89     	if ((pchMessage == NULL) || (dwLength <= 2)) 
000076  b10d              CBZ      r5,|L1.124|
000078  2c02              CMP      r4,#2
00007a  d800              BHI      |L1.126|
                  |L1.124|
;;;90     	{ 
;;;91     			return; 
;;;92     	} 
;;;93     	wCRC = Get_CRC16_Check_Sum ( ( uint8_t * )pchMessage, dwLength-2, CRC_INIT ); 
;;;94     	 
;;;95     	pchMessage[dwLength-2] = ( uint8_t )( wCRC & 0x00ff ); 
;;;96     	pchMessage[dwLength-1] = ( uint8_t )( ( wCRC >> 8 ) & 0x00ff ); 
;;;97     }
00007c  bd70              POP      {r4-r6,pc}
                  |L1.126|
00007e  1ea1              SUBS     r1,r4,#2              ;93
000080  f2436292          MOV      r2,#0x3692            ;93
000084  4628              MOV      r0,r5                 ;93
000086  f7fffffe          BL       Get_CRC16_Check_Sum
00008a  4606              MOV      r6,r0                 ;93
00008c  1ea0              SUBS     r0,r4,#2              ;95
00008e  542e              STRB     r6,[r5,r0]            ;95
000090  0a31              LSRS     r1,r6,#8              ;96
000092  1e60              SUBS     r0,r4,#1              ;96
000094  5429              STRB     r1,[r5,r0]            ;96
000096  bf00              NOP      
000098  e7f0              B        |L1.124|
;;;98     
                          ENDP

00009a  0000              DCW      0x0000
                  |L1.156|
                          DCD      wCRC_Table

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  wCRC_Table
000000  00001189          DCW      0x0000,0x1189
000004  2312329b          DCW      0x2312,0x329b
000008  462457ad          DCW      0x4624,0x57ad
00000c  653674bf          DCW      0x6536,0x74bf
000010  8c489dc1          DCW      0x8c48,0x9dc1
000014  af5abed3          DCW      0xaf5a,0xbed3
000018  ca6cdbe5          DCW      0xca6c,0xdbe5
00001c  e97ef8f7          DCW      0xe97e,0xf8f7
000020  10810108          DCW      0x1081,0x0108
000024  3393221a          DCW      0x3393,0x221a
000028  56a5472c          DCW      0x56a5,0x472c
00002c  75b7643e          DCW      0x75b7,0x643e
000030  9cc98d40          DCW      0x9cc9,0x8d40
000034  bfdbae52          DCW      0xbfdb,0xae52
000038  daedcb64          DCW      0xdaed,0xcb64
00003c  f9ffe876          DCW      0xf9ff,0xe876
000040  2102308b          DCW      0x2102,0x308b
000044  02101399          DCW      0x0210,0x1399
000048  672676af          DCW      0x6726,0x76af
00004c  443455bd          DCW      0x4434,0x55bd
000050  ad4abcc3          DCW      0xad4a,0xbcc3
000054  8e589fd1          DCW      0x8e58,0x9fd1
000058  eb6efae7          DCW      0xeb6e,0xfae7
00005c  c87cd9f5          DCW      0xc87c,0xd9f5
000060  3183200a          DCW      0x3183,0x200a
000064  12910318          DCW      0x1291,0x0318
000068  77a7662e          DCW      0x77a7,0x662e
00006c  54b5453c          DCW      0x54b5,0x453c
000070  bdcbac42          DCW      0xbdcb,0xac42
000074  9ed98f50          DCW      0x9ed9,0x8f50
000078  fbefea66          DCW      0xfbef,0xea66
00007c  d8fdc974          DCW      0xd8fd,0xc974
000080  4204538d          DCW      0x4204,0x538d
000084  6116709f          DCW      0x6116,0x709f
000088  042015a9          DCW      0x0420,0x15a9
00008c  273236bb          DCW      0x2732,0x36bb
000090  ce4cdfc5          DCW      0xce4c,0xdfc5
000094  ed5efcd7          DCW      0xed5e,0xfcd7
000098  886899e1          DCW      0x8868,0x99e1
00009c  ab7abaf3          DCW      0xab7a,0xbaf3
0000a0  5285430c          DCW      0x5285,0x430c
0000a4  7197601e          DCW      0x7197,0x601e
0000a8  14a10528          DCW      0x14a1,0x0528
0000ac  37b3263a          DCW      0x37b3,0x263a
0000b0  decdcf44          DCW      0xdecd,0xcf44
0000b4  fddfec56          DCW      0xfddf,0xec56
0000b8  98e98960          DCW      0x98e9,0x8960
0000bc  bbfbaa72          DCW      0xbbfb,0xaa72
0000c0  6306728f          DCW      0x6306,0x728f
0000c4  4014519d          DCW      0x4014,0x519d
0000c8  252234ab          DCW      0x2522,0x34ab
0000cc  063017b9          DCW      0x0630,0x17b9
0000d0  ef4efec7          DCW      0xef4e,0xfec7
0000d4  cc5cddd5          DCW      0xcc5c,0xddd5
0000d8  a96ab8e3          DCW      0xa96a,0xb8e3
0000dc  8a789bf1          DCW      0x8a78,0x9bf1
0000e0  7387620e          DCW      0x7387,0x620e
0000e4  5095411c          DCW      0x5095,0x411c
0000e8  35a3242a          DCW      0x35a3,0x242a
0000ec  16b10738          DCW      0x16b1,0x0738
0000f0  ffcfee46          DCW      0xffcf,0xee46
0000f4  dcddcd54          DCW      0xdcdd,0xcd54
0000f8  b9eba862          DCW      0xb9eb,0xa862
0000fc  9af98b70          DCW      0x9af9,0x8b70
000100  84089581          DCW      0x8408,0x9581
000104  a71ab693          DCW      0xa71a,0xb693
000108  c22cd3a5          DCW      0xc22c,0xd3a5
00010c  e13ef0b7          DCW      0xe13e,0xf0b7
000110  084019c9          DCW      0x0840,0x19c9
000114  2b523adb          DCW      0x2b52,0x3adb
000118  4e645fed          DCW      0x4e64,0x5fed
00011c  6d767cff          DCW      0x6d76,0x7cff
000120  94898500          DCW      0x9489,0x8500
000124  b79ba612          DCW      0xb79b,0xa612
000128  d2adc324          DCW      0xd2ad,0xc324
00012c  f1bfe036          DCW      0xf1bf,0xe036
000130  18c10948          DCW      0x18c1,0x0948
000134  3bd32a5a          DCW      0x3bd3,0x2a5a
000138  5ee54f6c          DCW      0x5ee5,0x4f6c
00013c  7df76c7e          DCW      0x7df7,0x6c7e
000140  a50ab483          DCW      0xa50a,0xb483
000144  86189791          DCW      0x8618,0x9791
000148  e32ef2a7          DCW      0xe32e,0xf2a7
00014c  c03cd1b5          DCW      0xc03c,0xd1b5
000150  294238cb          DCW      0x2942,0x38cb
000154  0a501bd9          DCW      0x0a50,0x1bd9
000158  6f667eef          DCW      0x6f66,0x7eef
00015c  4c745dfd          DCW      0x4c74,0x5dfd
000160  b58ba402          DCW      0xb58b,0xa402
000164  96998710          DCW      0x9699,0x8710
000168  f3afe226          DCW      0xf3af,0xe226
00016c  d0bdc134          DCW      0xd0bd,0xc134
000170  39c3284a          DCW      0x39c3,0x284a
000174  1ad10b58          DCW      0x1ad1,0x0b58
000178  7fe76e6e          DCW      0x7fe7,0x6e6e
00017c  5cf54d7c          DCW      0x5cf5,0x4d7c
000180  c60cd785          DCW      0xc60c,0xd785
000184  e51ef497          DCW      0xe51e,0xf497
000188  802891a1          DCW      0x8028,0x91a1
00018c  a33ab2b3          DCW      0xa33a,0xb2b3
000190  4a445bcd          DCW      0x4a44,0x5bcd
000194  695678df          DCW      0x6956,0x78df
000198  0c601de9          DCW      0x0c60,0x1de9
00019c  2f723efb          DCW      0x2f72,0x3efb
0001a0  d68dc704          DCW      0xd68d,0xc704
0001a4  f59fe416          DCW      0xf59f,0xe416
0001a8  90a98120          DCW      0x90a9,0x8120
0001ac  b3bba232          DCW      0xb3bb,0xa232
0001b0  5ac54b4c          DCW      0x5ac5,0x4b4c
0001b4  79d7685e          DCW      0x79d7,0x685e
0001b8  1ce10d68          DCW      0x1ce1,0x0d68
0001bc  3ff32e7a          DCW      0x3ff3,0x2e7a
0001c0  e70ef687          DCW      0xe70e,0xf687
0001c4  c41cd595          DCW      0xc41c,0xd595
0001c8  a12ab0a3          DCW      0xa12a,0xb0a3
0001cc  823893b1          DCW      0x8238,0x93b1
0001d0  6b467acf          DCW      0x6b46,0x7acf
0001d4  485459dd          DCW      0x4854,0x59dd
0001d8  2d623ceb          DCW      0x2d62,0x3ceb
0001dc  0e701ff9          DCW      0x0e70,0x1ff9
0001e0  f78fe606          DCW      0xf78f,0xe606
0001e4  d49dc514          DCW      0xd49d,0xc514
0001e8  b1aba022          DCW      0xb1ab,0xa022
0001ec  92b98330          DCW      0x92b9,0x8330
0001f0  7bc76a4e          DCW      0x7bc7,0x6a4e
0001f4  58d5495c          DCW      0x58d5,0x495c
0001f8  3de32c6a          DCW      0x3de3,0x2c6a
0001fc  1ef10f78          DCW      0x1ef1,0x0f78
