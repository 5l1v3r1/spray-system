; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\cfg_unpack.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\cfg_unpack.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\cstartup -I.\drivers\uart -I.\app\cfg -I.\iap -I.\drivers -I.\usb -I.\drivers\adc -I.\drivers\gpio -I.\drivers -I.\RTE\_lpc17xx_can_loader_debug -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DLPC175x_6x -D__DEBUG_UART2_PRINTF__ -D__UART0__ -D__UART1__ -D__UART2__ -D__UART3__ -D__UART2_ENABLE__ -D__UART3_ENABLE__ -D__UART0_ENABLE__ -D__UART1_ENABLE__ --omf_browse=.\output\cfg_unpack.crf app\cfg\cfg_unpack.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  cfg_unpack_init PROC
;;;71     
;;;72     void cfg_unpack_init( void )
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74     #if __USB_ENABLE__
;;;75         cfg_decoder_init( &usb_decoder_obj, usb_data_buff, USB_UNPACK_MAX_SIZE );
;;;76     #endif
;;;77     #if __CAN1_ENABLE__
;;;78         cfg_decoder_init( &can1_decoder_obj, can1_data_buff, CAN1_UNPACK_MAX_SIZE );
000002  f44f7200          MOV      r2,#0x200
000006  49d1              LDR      r1,|L1.844|
000008  48d1              LDR      r0,|L1.848|
00000a  f7fffffe          BL       cfg_decoder_init
;;;79     		cfg_decoder_init( &can1_decoder_obj2, can1_data_buff2, CAN1_UNPACK_MAX_SIZE );
00000e  f44f7200          MOV      r2,#0x200
000012  49d0              LDR      r1,|L1.852|
000014  48d0              LDR      r0,|L1.856|
000016  f7fffffe          BL       cfg_decoder_init
;;;80         cfg_decoder_init( &can1_decoder_obj_LED, can1_data_buff_LED, CAN1_UNPACK_MAX_SIZE );
00001a  f44f7200          MOV      r2,#0x200
00001e  49cf              LDR      r1,|L1.860|
000020  48cf              LDR      r0,|L1.864|
000022  f7fffffe          BL       cfg_decoder_init
;;;81     		cfg_decoder_init( &can1_decoder_obj_upgrade, can1_data_buff_upgrade, CAN1_UNPACK_MAX_SIZE );
000026  f44f7200          MOV      r2,#0x200
00002a  49ce              LDR      r1,|L1.868|
00002c  48ce              LDR      r0,|L1.872|
00002e  f7fffffe          BL       cfg_decoder_init
;;;82     #endif
;;;83     #if __CAN2_ENABLE__
;;;84         cfg_decoder_init( &can2_decoder_obj, can2_data_buff, CAN2_UNPACK_MAX_SIZE );
;;;85     #endif
;;;86     #ifdef __UART0__
;;;87         cfg_decoder_init( &uart0_decoder_obj, uart0_data_buff, UART0_UNPACK_MAX_SIZE );
000032  f44f7200          MOV      r2,#0x200
000036  49cd              LDR      r1,|L1.876|
000038  48cd              LDR      r0,|L1.880|
00003a  f7fffffe          BL       cfg_decoder_init
;;;88     #endif
;;;89     #ifdef __UART1__
;;;90         cfg_decoder_init( &uart1_decoder_obj, uart1_data_buff, UART1_UNPACK_MAX_SIZE );
00003e  f44f7200          MOV      r2,#0x200
000042  49cc              LDR      r1,|L1.884|
000044  48cc              LDR      r0,|L1.888|
000046  f7fffffe          BL       cfg_decoder_init
;;;91     #endif
;;;92     #ifdef __UART2__
;;;93         cfg_decoder_init( &uart2_decoder_obj, uart2_data_buff, UART2_UNPACK_MAX_SIZE );
00004a  f44f7200          MOV      r2,#0x200
00004e  49cb              LDR      r1,|L1.892|
000050  48cb              LDR      r0,|L1.896|
000052  f7fffffe          BL       cfg_decoder_init
;;;94     		cfg_decoder_init( &uart2_decoder_obj_copy, uart2_data_buff_copy, UART2_UNPACK_MAX_SIZE );
000056  f44f7200          MOV      r2,#0x200
00005a  49ca              LDR      r1,|L1.900|
00005c  48ca              LDR      r0,|L1.904|
00005e  f7fffffe          BL       cfg_decoder_init
;;;95     #endif
;;;96     #ifdef __UART3__
;;;97         cfg_decoder_init( &uart3_decoder_obj, uart3_data_buff, UART3_UNPACK_MAX_SIZE );
000062  f44f7200          MOV      r2,#0x200
000066  49c9              LDR      r1,|L1.908|
000068  48c9              LDR      r0,|L1.912|
00006a  f7fffffe          BL       cfg_decoder_init
;;;98     #endif
;;;99     }
00006e  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  cfg_unpack_tick PROC
;;;101    void cfg_unpack_tick( void )        
000070  b570              PUSH     {r4-r6,lr}
;;;102    {
;;;103    	uint8_t data = 0;
000072  2500              MOVS     r5,#0
;;;104        uint16_t length = 0;
000074  2400              MOVS     r4,#0
;;;105    
;;;106    #if __USB_ENABLE__
;;;107    	length = OutBufAvailBytes();
;;;108        while( length-- ) {
;;;109            data = VCOM_GetByte();
;;;110            if( cfg_decoder_upack( &usb_decoder_obj, data ) ) {
;;;111                g_cfg_end_point = EP_USB;
;;;112                command_process_v1( usb_decoder_obj.p_data, usb_decoder_obj.len );
;;;113                g_cfg_end_point = EP_NULL;
;;;114            }
;;;115        }
;;;116    #endif
;;;117    #if __CAN1_ENABLE__
;;;118    	length = CAN_RING_BUF_COUNT( &can1RxRingBuf );
000076  48c7              LDR      r0,|L1.916|
000078  f7fffffe          BL       CAN_RING_BUF_COUNT
00007c  b284              UXTH     r4,r0
;;;119        while( length-- ) {
00007e  e013              B        |L1.168|
                  |L1.128|
;;;120            data = CAN_RING_BUF_RD( &can1RxRingBuf );
000080  48c4              LDR      r0,|L1.916|
000082  f7fffffe          BL       CAN_RING_BUF_RD
000086  4605              MOV      r5,r0
;;;121            if( cfg_decoder_upack( &can1_decoder_obj, data ) ) {
000088  4629              MOV      r1,r5
00008a  48b1              LDR      r0,|L1.848|
00008c  f7fffffe          BL       cfg_decoder_upack
000090  b150              CBZ      r0,|L1.168|
;;;122                g_cfg_end_point = EP_CAN1;
000092  2001              MOVS     r0,#1
000094  49c0              LDR      r1,|L1.920|
000096  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
;;;123                command_process_v1( can1_decoder_obj.p_data, can1_decoder_obj.len );
000098  4aad              LDR      r2,|L1.848|
00009a  8891              LDRH     r1,[r2,#4]  ; can1_decoder_obj
00009c  68d0              LDR      r0,[r2,#0xc]  ; can1_decoder_obj
00009e  f7fffffe          BL       command_process_v1
;;;124                g_cfg_end_point = EP_NULL;
0000a2  2000              MOVS     r0,#0
0000a4  49bc              LDR      r1,|L1.920|
0000a6  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
                  |L1.168|
0000a8  1e20              SUBS     r0,r4,#0              ;119
0000aa  f1a40101          SUB      r1,r4,#1              ;119
0000ae  b28c              UXTH     r4,r1                 ;119
0000b0  d1e6              BNE      |L1.128|
;;;125            }
;;;126        }
;;;127    //CAN1µÄBUF2
;;;128    	length = CAN_RING_BUF_COUNT( &can1Rx2RingBuf );
0000b2  48ba              LDR      r0,|L1.924|
0000b4  f7fffffe          BL       CAN_RING_BUF_COUNT
0000b8  b284              UXTH     r4,r0
;;;129        while( length-- ) {
0000ba  e013              B        |L1.228|
                  |L1.188|
;;;130            data = CAN_RING_BUF_RD( &can1Rx2RingBuf );
0000bc  48b7              LDR      r0,|L1.924|
0000be  f7fffffe          BL       CAN_RING_BUF_RD
0000c2  4605              MOV      r5,r0
;;;131            if( cfg_decoder_upack( &can1_decoder_obj2, data ) ) {
0000c4  4629              MOV      r1,r5
0000c6  48a4              LDR      r0,|L1.856|
0000c8  f7fffffe          BL       cfg_decoder_upack
0000cc  b150              CBZ      r0,|L1.228|
;;;132                g_cfg_end_point = EP_CAN1;
0000ce  2001              MOVS     r0,#1
0000d0  49b1              LDR      r1,|L1.920|
0000d2  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
;;;133    						command_process_v1( can1_decoder_obj2.p_data, can1_decoder_obj2.len );
0000d4  4aa0              LDR      r2,|L1.856|
0000d6  8891              LDRH     r1,[r2,#4]  ; can1_decoder_obj2
0000d8  68d0              LDR      r0,[r2,#0xc]  ; can1_decoder_obj2
0000da  f7fffffe          BL       command_process_v1
;;;134                g_cfg_end_point = EP_NULL;
0000de  2000              MOVS     r0,#0
0000e0  49ad              LDR      r1,|L1.920|
0000e2  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
                  |L1.228|
0000e4  1e20              SUBS     r0,r4,#0              ;129
0000e6  f1a40101          SUB      r1,r4,#1              ;129
0000ea  b28c              UXTH     r4,r1                 ;129
0000ec  d1e6              BNE      |L1.188|
;;;135            }
;;;136        }
;;;137    //CAN1µÄBUF3
;;;138    	length = CAN_RING_BUF_COUNT( &can1RxLEDRingBuf );
0000ee  48ac              LDR      r0,|L1.928|
0000f0  f7fffffe          BL       CAN_RING_BUF_COUNT
0000f4  b284              UXTH     r4,r0
;;;139        while( length-- ) {
0000f6  e013              B        |L1.288|
                  |L1.248|
;;;140            data = CAN_RING_BUF_RD( &can1RxLEDRingBuf );
0000f8  48a9              LDR      r0,|L1.928|
0000fa  f7fffffe          BL       CAN_RING_BUF_RD
0000fe  4605              MOV      r5,r0
;;;141            if( cfg_decoder_upack( &can1_decoder_obj_LED, data ) ) {
000100  4629              MOV      r1,r5
000102  4897              LDR      r0,|L1.864|
000104  f7fffffe          BL       cfg_decoder_upack
000108  b150              CBZ      r0,|L1.288|
;;;142                g_cfg_end_point = EP_CAN1_LED;
00010a  2002              MOVS     r0,#2
00010c  49a2              LDR      r1,|L1.920|
00010e  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
;;;143                command_process_v1( can1_decoder_obj_LED.p_data, can1_decoder_obj_LED.len );
000110  4a93              LDR      r2,|L1.864|
000112  8891              LDRH     r1,[r2,#4]  ; can1_decoder_obj_LED
000114  68d0              LDR      r0,[r2,#0xc]  ; can1_decoder_obj_LED
000116  f7fffffe          BL       command_process_v1
;;;144                g_cfg_end_point = EP_NULL;
00011a  2000              MOVS     r0,#0
00011c  499e              LDR      r1,|L1.920|
00011e  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
                  |L1.288|
000120  1e20              SUBS     r0,r4,#0              ;139
000122  f1a40101          SUB      r1,r4,#1              ;139
000126  b28c              UXTH     r4,r1                 ;139
000128  d1e6              BNE      |L1.248|
;;;145            }
;;;146        }
;;;147    #endif
;;;148    #if __CAN2_ENABLE__
;;;149    	length = CAN_RING_BUF_COUNT( &can2RxRingBuf );
;;;150        while( length-- ) {
;;;151            data = CAN_RING_BUF_RD( &can2RxRingBuf );
;;;152            if( cfg_decoder_upack( &can2_decoder_obj, data ) ) {
;;;153                g_cfg_end_point = EP_CAN2;
;;;154                command_process_v1( can2_decoder_obj.p_data, can2_decoder_obj.len );
;;;155                g_cfg_end_point = EP_NULL;
;;;156            }
;;;157        }
;;;158    #endif
;;;159    #if __UART0__
;;;160    	length = RING_BUF_COUNT( UART0_rx_buf );
00012a  489e              LDR      r0,|L1.932|
00012c  6800              LDR      r0,[r0,#0]  ; UART0_rx_buf
00012e  499d              LDR      r1,|L1.932|
000130  6849              LDR      r1,[r1,#4]  ; UART0_rx_buf
000132  1a40              SUBS     r0,r0,r1
000134  499b              LDR      r1,|L1.932|
000136  8909              LDRH     r1,[r1,#8]  ; UART0_rx_buf
000138  4008              ANDS     r0,r0,r1
00013a  b284              UXTH     r4,r0
;;;161        while( length-- ) {
00013c  e019              B        |L1.370|
                  |L1.318|
;;;162            data = RING_BUF_RD( UART0_rx_buf );
00013e  4999              LDR      r1,|L1.932|
000140  6848              LDR      r0,[r1,#4]  ; UART0_rx_buf
000142  1c41              ADDS     r1,r0,#1
000144  4a97              LDR      r2,|L1.932|
000146  6051              STR      r1,[r2,#4]  ; UART0_rx_buf
000148  4611              MOV      r1,r2
00014a  6889              LDR      r1,[r1,#8]  ; UART0_rx_buf
00014c  4001              ANDS     r1,r1,r0
00014e  68d2              LDR      r2,[r2,#0xc]  ; UART0_rx_buf
000150  5c55              LDRB     r5,[r2,r1]
;;;163            if( cfg_decoder_upack( &uart0_decoder_obj, data ) ) {
000152  4629              MOV      r1,r5
000154  4886              LDR      r0,|L1.880|
000156  f7fffffe          BL       cfg_decoder_upack
00015a  b150              CBZ      r0,|L1.370|
;;;164                g_cfg_end_point = EP_UART0;
00015c  2004              MOVS     r0,#4
00015e  498e              LDR      r1,|L1.920|
000160  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
;;;165                command_process_v1( uart0_decoder_obj.p_data, uart0_decoder_obj.len );
000162  4a83              LDR      r2,|L1.880|
000164  8891              LDRH     r1,[r2,#4]  ; uart0_decoder_obj
000166  68d0              LDR      r0,[r2,#0xc]  ; uart0_decoder_obj
000168  f7fffffe          BL       command_process_v1
;;;166                g_cfg_end_point = EP_NULL;
00016c  2000              MOVS     r0,#0
00016e  498a              LDR      r1,|L1.920|
000170  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
                  |L1.370|
000172  1e20              SUBS     r0,r4,#0              ;161
000174  f1a40101          SUB      r1,r4,#1              ;161
000178  b28c              UXTH     r4,r1                 ;161
00017a  d1e0              BNE      |L1.318|
;;;167            }
;;;168        }
;;;169    #endif
;;;170    		
;;;171    
;;;172    #if __UART1__
;;;173    	length = RING_BUF_COUNT( UART1_rx_buf );
00017c  488a              LDR      r0,|L1.936|
00017e  6800              LDR      r0,[r0,#0]  ; UART1_rx_buf
000180  4989              LDR      r1,|L1.936|
000182  6849              LDR      r1,[r1,#4]  ; UART1_rx_buf
000184  1a40              SUBS     r0,r0,r1
000186  4988              LDR      r1,|L1.936|
000188  8909              LDRH     r1,[r1,#8]  ; UART1_rx_buf
00018a  4008              ANDS     r0,r0,r1
00018c  b284              UXTH     r4,r0
;;;174    		if( length != 0 )
00018e  b1fc              CBZ      r4,|L1.464|
;;;175        while( length-- ) {
000190  e019              B        |L1.454|
                  |L1.402|
;;;176            data = RING_BUF_RD( UART1_rx_buf );
000192  4985              LDR      r1,|L1.936|
000194  6848              LDR      r0,[r1,#4]  ; UART1_rx_buf
000196  1c41              ADDS     r1,r0,#1
000198  4a83              LDR      r2,|L1.936|
00019a  6051              STR      r1,[r2,#4]  ; UART1_rx_buf
00019c  4611              MOV      r1,r2
00019e  6889              LDR      r1,[r1,#8]  ; UART1_rx_buf
0001a0  4001              ANDS     r1,r1,r0
0001a2  68d2              LDR      r2,[r2,#0xc]  ; UART1_rx_buf
0001a4  5c55              LDRB     r5,[r2,r1]
;;;177            if( cfg_decoder_upack( &uart1_decoder_obj, data ) ) {
0001a6  4629              MOV      r1,r5
0001a8  4873              LDR      r0,|L1.888|
0001aa  f7fffffe          BL       cfg_decoder_upack
0001ae  b150              CBZ      r0,|L1.454|
;;;178                g_cfg_end_point = EP_UART1;
0001b0  2005              MOVS     r0,#5
0001b2  4979              LDR      r1,|L1.920|
0001b4  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
;;;179                command_process_v1( uart1_decoder_obj.p_data, uart1_decoder_obj.len );
0001b6  4a70              LDR      r2,|L1.888|
0001b8  8891              LDRH     r1,[r2,#4]  ; uart1_decoder_obj
0001ba  68d0              LDR      r0,[r2,#0xc]  ; uart1_decoder_obj
0001bc  f7fffffe          BL       command_process_v1
;;;180                g_cfg_end_point = EP_NULL;
0001c0  2000              MOVS     r0,#0
0001c2  4975              LDR      r1,|L1.920|
0001c4  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
                  |L1.454|
0001c6  1e20              SUBS     r0,r4,#0              ;175
0001c8  f1a40101          SUB      r1,r4,#1              ;175
0001cc  b28c              UXTH     r4,r1                 ;175
0001ce  d1e0              BNE      |L1.402|
                  |L1.464|
;;;181            }
;;;182        }
;;;183    #endif	
;;;184    
;;;185    #if __UART2__
;;;186    {
;;;187    	
;;;188    	length = RING_BUF_COUNT( UART2_rx_buf_copy );	
0001d0  4876              LDR      r0,|L1.940|
0001d2  6800              LDR      r0,[r0,#0]  ; UART2_rx_buf_copy
0001d4  4975              LDR      r1,|L1.940|
0001d6  6849              LDR      r1,[r1,#4]  ; UART2_rx_buf_copy
0001d8  1a40              SUBS     r0,r0,r1
0001da  4974              LDR      r1,|L1.940|
0001dc  8909              LDRH     r1,[r1,#8]  ; UART2_rx_buf_copy
0001de  4008              ANDS     r0,r0,r1
0001e0  b284              UXTH     r4,r0
;;;189    	if( length != 0 ){	
0001e2  b1fc              CBZ      r4,|L1.548|
;;;190        while( length-- ) {
0001e4  e019              B        |L1.538|
                  |L1.486|
;;;191            data = RING_BUF_RD( UART2_rx_buf_copy );
0001e6  4971              LDR      r1,|L1.940|
0001e8  6848              LDR      r0,[r1,#4]  ; UART2_rx_buf_copy
0001ea  1c41              ADDS     r1,r0,#1
0001ec  4a6f              LDR      r2,|L1.940|
0001ee  6051              STR      r1,[r2,#4]  ; UART2_rx_buf_copy
0001f0  4611              MOV      r1,r2
0001f2  6889              LDR      r1,[r1,#8]  ; UART2_rx_buf_copy
0001f4  4001              ANDS     r1,r1,r0
0001f6  68d2              LDR      r2,[r2,#0xc]  ; UART2_rx_buf_copy
0001f8  5c55              LDRB     r5,[r2,r1]
;;;192    
;;;193            if( cfg_decoder_upack( &uart2_decoder_obj_copy, data ) ) {
0001fa  4629              MOV      r1,r5
0001fc  4862              LDR      r0,|L1.904|
0001fe  f7fffffe          BL       cfg_decoder_upack
000202  b150              CBZ      r0,|L1.538|
;;;194                g_cfg_end_point = EP_UART2;
000204  2006              MOVS     r0,#6
000206  4964              LDR      r1,|L1.920|
000208  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
;;;195                command_process_v1( uart2_decoder_obj_copy.p_data, uart2_decoder_obj_copy.len );
00020a  4a5f              LDR      r2,|L1.904|
00020c  8891              LDRH     r1,[r2,#4]  ; uart2_decoder_obj_copy
00020e  68d0              LDR      r0,[r2,#0xc]  ; uart2_decoder_obj_copy
000210  f7fffffe          BL       command_process_v1
;;;196                g_cfg_end_point = EP_NULL;
000214  2000              MOVS     r0,#0
000216  4960              LDR      r1,|L1.920|
000218  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
                  |L1.538|
00021a  1e20              SUBS     r0,r4,#0              ;190
00021c  f1a40101          SUB      r1,r4,#1              ;190
000220  b28c              UXTH     r4,r1                 ;190
000222  d1e0              BNE      |L1.486|
                  |L1.548|
;;;197            }
;;;198        }
;;;199    	}
;;;200    //	length = RING_BUF_COUNT( UART2_rx_buf_copy );	
;;;201    //	if( length != 0 ){	
;;;202    //    while( length-- ) {
;;;203    //        data = RING_BUF_RD( UART2_rx_buf_copy );
;;;204    
;;;205    ////        if( cfg_decoder_upack( &uart2_decoder_obj_copy, data ) ) {
;;;206    ////            g_cfg_end_point = EP_UART2;
;;;207    ////            command_process_v1( uart2_decoder_obj_copy.p_data, uart2_decoder_obj_copy.len );
;;;208    ////            g_cfg_end_point = EP_NULL;
;;;209    ////        }
;;;210    //			 g_cfg_end_point = EP_UART2;
;;;211    //			 Flow_Sensor_Unpack(&uart2_decoder_obj_copy, data);
;;;212    //			 g_cfg_end_point = EP_NULL;
;;;213    		
;;;214    }
;;;215    #endif	
;;;216    
;;;217    #if __UART3__
;;;218    	length = RING_BUF_COUNT( UART3_rx_buf );
000224  4862              LDR      r0,|L1.944|
000226  6800              LDR      r0,[r0,#0]  ; UART3_rx_buf
000228  4961              LDR      r1,|L1.944|
00022a  6849              LDR      r1,[r1,#4]  ; UART3_rx_buf
00022c  1a40              SUBS     r0,r0,r1
00022e  4960              LDR      r1,|L1.944|
000230  8909              LDRH     r1,[r1,#8]  ; UART3_rx_buf
000232  4008              ANDS     r0,r0,r1
000234  b284              UXTH     r4,r0
;;;219    		if( length != 0 )
000236  b1fc              CBZ      r4,|L1.632|
;;;220        while( length-- ) {
000238  e019              B        |L1.622|
                  |L1.570|
;;;221            data = RING_BUF_RD( UART3_rx_buf );
00023a  495d              LDR      r1,|L1.944|
00023c  6848              LDR      r0,[r1,#4]  ; UART3_rx_buf
00023e  1c41              ADDS     r1,r0,#1
000240  4a5b              LDR      r2,|L1.944|
000242  6051              STR      r1,[r2,#4]  ; UART3_rx_buf
000244  4611              MOV      r1,r2
000246  6889              LDR      r1,[r1,#8]  ; UART3_rx_buf
000248  4001              ANDS     r1,r1,r0
00024a  68d2              LDR      r2,[r2,#0xc]  ; UART3_rx_buf
00024c  5c55              LDRB     r5,[r2,r1]
;;;222            if( cfg_decoder_upack( &uart3_decoder_obj, data ) ) {
00024e  4629              MOV      r1,r5
000250  484f              LDR      r0,|L1.912|
000252  f7fffffe          BL       cfg_decoder_upack
000256  b150              CBZ      r0,|L1.622|
;;;223                g_cfg_end_point = EP_UART3;
000258  2007              MOVS     r0,#7
00025a  494f              LDR      r1,|L1.920|
00025c  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
;;;224                command_process_v1( uart3_decoder_obj.p_data, uart3_decoder_obj.len );
00025e  4a4c              LDR      r2,|L1.912|
000260  8891              LDRH     r1,[r2,#4]  ; uart3_decoder_obj
000262  68d0              LDR      r0,[r2,#0xc]  ; uart3_decoder_obj
000264  f7fffffe          BL       command_process_v1
;;;225                g_cfg_end_point = EP_NULL;
000268  2000              MOVS     r0,#0
00026a  494b              LDR      r1,|L1.920|
00026c  6008              STR      r0,[r1,#0]  ; g_cfg_end_point
                  |L1.622|
00026e  1e20              SUBS     r0,r4,#0              ;220
000270  f1a40101          SUB      r1,r4,#1              ;220
000274  b28c              UXTH     r4,r1                 ;220
000276  d1e0              BNE      |L1.570|
                  |L1.632|
;;;226            }
;;;227        }
;;;228    #endif	
;;;229    }
000278  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

                  PC_LOG PROC
;;;231    void PC_LOG( uint8_t num , const uint8_t *pstr, ... )
00027a  b40f              PUSH     {r0-r3}
;;;232    {
00027c  b5f8              PUSH     {r3-r7,lr}
00027e  4605              MOV      r5,r0
;;;233    	static uint8_t pc_log_buf[128] ;
;;;234    	va_list arglist;
;;;235    	uint16_t len ;
;;;236    	cmd_header_v1_t *p_cmd = ( cmd_header_v1_t * )pc_log_buf;
000280  4c4c              LDR      r4,|L1.948|
;;;237    
;;;238    	va_start(arglist, pstr);
000282  a808              ADD      r0,sp,#0x20
000284  9000              STR      r0,[sp,#0]
;;;239      len = vsnprintf((void*)&pc_log_buf[sizeof( cmd_header_v1_t )+1],114,(void*)pstr, arglist);
000286  2172              MOVS     r1,#0x72
000288  f104000c          ADD      r0,r4,#0xc
00028c  9b00              LDR      r3,[sp,#0]
00028e  9a07              LDR      r2,[sp,#0x1c]
000290  f7fffffe          BL       __c89vsnprintf
000294  b286              UXTH     r6,r0
;;;240      va_end(arglist);
000296  2000              MOVS     r0,#0
000298  9000              STR      r0,[sp,#0]
;;;241    	
;;;242    	p_cmd->sof = 0x55;
00029a  2055              MOVS     r0,#0x55
00029c  7020              STRB     r0,[r4,#0]
;;;243    	p_cmd->vl.version = 1;
00029e  78a0              LDRB     r0,[r4,#2]
0002a0  f02000fc          BIC      r0,r0,#0xfc
0002a4  1d00              ADDS     r0,r0,#4
0002a6  70a0              STRB     r0,[r4,#2]
;;;244    	p_cmd->sender.sender_id = DEVICE_ID;
0002a8  7920              LDRB     r0,[r4,#4]
0002aa  f020001f          BIC      r0,r0,#0x1f
0002ae  301c              ADDS     r0,r0,#0x1c
0002b0  7120              STRB     r0,[r4,#4]
;;;245    	p_cmd->sender.sender_index = DEVICE_INDEX;
0002b2  7920              LDRB     r0,[r4,#4]
0002b4  f02000e0          BIC      r0,r0,#0xe0
0002b8  7120              STRB     r0,[r4,#4]
;;;246    	p_cmd->receiver.receiver_id = 0x19 ; 
0002ba  7960              LDRB     r0,[r4,#5]
0002bc  f020001f          BIC      r0,r0,#0x1f
0002c0  3019              ADDS     r0,r0,#0x19
0002c2  7160              STRB     r0,[r4,#5]
;;;247    	p_cmd->receiver.receiver_index = 0 ;
0002c4  7960              LDRB     r0,[r4,#5]
0002c6  f02000e0          BIC      r0,r0,#0xe0
0002ca  7160              STRB     r0,[r4,#5]
;;;248    	p_cmd->seqnum ++ ;
0002cc  88e0              LDRH     r0,[r4,#6]
0002ce  1c40              ADDS     r0,r0,#1
0002d0  80e0              STRH     r0,[r4,#6]
;;;249    	p_cmd->seqnum = (p_cmd->seqnum > 7000)?0:p_cmd->seqnum ; 
0002d2  88e0              LDRH     r0,[r4,#6]
0002d4  f6413158          MOV      r1,#0x1b58
0002d8  4288              CMP      r0,r1
0002da  dd01              BLE      |L1.736|
0002dc  2000              MOVS     r0,#0
0002de  e000              B        |L1.738|
                  |L1.736|
0002e0  88e0              LDRH     r0,[r4,#6]
                  |L1.738|
0002e2  1c64              ADDS     r4,r4,#1
0002e4  f8a40005          STRH     r0,[r4,#5]
;;;250    	p_cmd->type.cmd_type = 0;
0002e8  79e0              LDRB     r0,[r4,#7]
0002ea  f0200080          BIC      r0,r0,#0x80
0002ee  71e0              STRB     r0,[r4,#7]
;;;251    	p_cmd->type.cmd_ack = 0;
0002f0  79e0              LDRB     r0,[r4,#7]
0002f2  f0200060          BIC      r0,r0,#0x60
0002f6  71e0              STRB     r0,[r4,#7]
;;;252    	p_cmd->type.encrypt_type = 0;
0002f8  79e0              LDRB     r0,[r4,#7]
0002fa  f020000f          BIC      r0,r0,#0xf
0002fe  71e0              STRB     r0,[r4,#7]
;;;253    	p_cmd->set = 0x0;
000300  2000              MOVS     r0,#0
000302  7220              STRB     r0,[r4,#8]
;;;254    	p_cmd->id  = 0x0e;
000304  200e              MOVS     r0,#0xe
000306  7260              STRB     r0,[r4,#9]
;;;255    
;;;256    	pc_log_buf[sizeof( cmd_header_v1_t )]=num;
000308  482a              LDR      r0,|L1.948|
00030a  72c5              STRB     r5,[r0,#0xb]
;;;257    	pc_log_buf[sizeof( cmd_header_v1_t )+len + 1]='\0' ;
00030c  2100              MOVS     r1,#0
00030e  f106000c          ADD      r0,r6,#0xc
000312  4a28              LDR      r2,|L1.948|
000314  5411              STRB     r1,[r2,r0]
;;;258    	p_cmd->vl.length = sizeof( cmd_header_v1_t )  + len + 2 + 2 ;
000316  1cc0              ADDS     r0,r0,#3
000318  8821              LDRH     r1,[r4,#0]
00031a  f3600109          BFI      r1,r0,#0,#10
00031e  8021              STRH     r1,[r4,#0]
;;;259    
;;;260    	Append_CRC8_Check_Sum( pc_log_buf , 4 );
000320  2104              MOVS     r1,#4
000322  4610              MOV      r0,r2
000324  f7fffffe          BL       Append_CRC8_Check_Sum
;;;261    	Append_CRC16_Check_Sum( pc_log_buf , p_cmd->vl.length );
000328  8820              LDRH     r0,[r4,#0]
00032a  f3c00109          UBFX     r1,r0,#0,#10
00032e  4821              LDR      r0,|L1.948|
000330  f7fffffe          BL       Append_CRC16_Check_Sum
;;;262    	
;;;263    	CAN_sendbytes_View( LPC_CAN1, &can1TxRingBuf, pc_log_buf, p_cmd->vl.length );
000334  f8340901          LDRH     r0,[r4],#-1
000338  f3c00309          UBFX     r3,r0,#0,#10
00033c  4a1d              LDR      r2,|L1.948|
00033e  491e              LDR      r1,|L1.952|
000340  481e              LDR      r0,|L1.956|
000342  f7fffffe          BL       CAN_sendbytes_View
;;;264    }
000346  bcf8              POP      {r3-r7}
000348  f85dfb14          LDR      pc,[sp],#0x14
;;;265    
                          ENDP

                  |L1.844|
                          DCD      can1_data_buff
                  |L1.848|
                          DCD      can1_decoder_obj
                  |L1.852|
                          DCD      can1_data_buff2
                  |L1.856|
                          DCD      can1_decoder_obj2
                  |L1.860|
                          DCD      can1_data_buff_LED
                  |L1.864|
                          DCD      can1_decoder_obj_LED
                  |L1.868|
                          DCD      can1_data_buff_upgrade
                  |L1.872|
                          DCD      can1_decoder_obj_upgrade
                  |L1.876|
                          DCD      uart0_data_buff
                  |L1.880|
                          DCD      uart0_decoder_obj
                  |L1.884|
                          DCD      uart1_data_buff
                  |L1.888|
                          DCD      uart1_decoder_obj
                  |L1.892|
                          DCD      uart2_data_buff
                  |L1.896|
                          DCD      uart2_decoder_obj
                  |L1.900|
                          DCD      uart2_data_buff_copy
                  |L1.904|
                          DCD      uart2_decoder_obj_copy
                  |L1.908|
                          DCD      uart3_data_buff
                  |L1.912|
                          DCD      uart3_decoder_obj
                  |L1.916|
                          DCD      can1RxRingBuf
                  |L1.920|
                          DCD      g_cfg_end_point
                  |L1.924|
                          DCD      can1Rx2RingBuf
                  |L1.928|
                          DCD      can1RxLEDRingBuf
                  |L1.932|
                          DCD      UART0_rx_buf
                  |L1.936|
                          DCD      UART1_rx_buf
                  |L1.940|
                          DCD      UART2_rx_buf_copy
                  |L1.944|
                          DCD      UART3_rx_buf
                  |L1.948|
                          DCD      pc_log_buf
                  |L1.952|
                          DCD      can1TxRingBuf
                  |L1.956|
                          DCD      0x40044000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  can1_data_buff
                          %        512
                  can1_decoder_obj
                          %        16
                  can1_data_buff2
                          %        512
                  can1_decoder_obj2
                          %        16
                  can1_data_buff_LED
                          %        512
                  can1_decoder_obj_LED
                          %        16
                  can1_data_buff_upgrade
                          %        512
                  can1_decoder_obj_upgrade
                          %        16
                  uart0_data_buff
                          %        512
                  uart0_decoder_obj
                          %        16
                  uart1_data_buff
                          %        512
                  uart1_decoder_obj
                          %        16
                  uart2_data_buff
                          %        512
                  uart2_decoder_obj
                          %        16
                  uart2_data_buff_copy
                          %        512
                  uart2_decoder_obj_copy
                          %        16
                  uart3_data_buff
                          %        512
                  uart3_decoder_obj
                          %        16
                  pc_log_buf
                          %        128
