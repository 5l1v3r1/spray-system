/**
  ******************** (C) COPYRIGHT 2010 DJI **********************************
  *
  * @Project Name       ：xp60.uvproj
  * @File Name          : lpc17xx_adc.h
  * @Environment        : keil mdk4.12/LPC1765/100M cclock
  * @Author&Date        : 2011-08-25 
  * @Version            : 1.00
  ******************************************************************************
  * @Description
  *	    lpc17xx adc module,reference for nxp        
  */

/* Includes ------------------------------------------------------------------- */
#include "lpc17xx_adc.h"

//#define __ADC_DEBUG__

/* constant varible for adc pin config */
const ADC_PIN_CFG_Type adc_pin_config[8] =
{
    {ADC_CH0_PIN, GPIO_OPT_FNCT_2|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_0_3},
	{ADC_CH1_PIN, GPIO_OPT_FNCT_2|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_0_3},
	{ADC_CH2_PIN, GPIO_OPT_FNCT_2|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_0_3},
	{ADC_CH3_PIN, GPIO_OPT_FNCT_2|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_0_3},

	{ADC_CH4_PIN, GPIO_OPT_FNCT_4|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_4_5},         /* 确定FNCT的时候，一定要看手册，不能只看原理图 */
	{ADC_CH5_PIN, GPIO_OPT_FNCT_4|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_4_5},
	
	{ADC_CH6_PIN, GPIO_OPT_FNCT_3|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_6_7},
	{ADC_CH7_PIN, GPIO_OPT_FNCT_3|GPIO_OPT_MODE_NONE, ADC0_PIN_PORT_6_7},
};

/* Public Functions ----------------------------------------------------------- */
/*
 * param[in]	None
 * return 		None
 */
void ADC0_Init(void)
{
    ADC_CFG_Type adc_config_struct;
	
	adc_config_struct.adc_rate       = 2000;                /* 必须大于25M/(256*65) */
	adc_config_struct.adc_int_opt    = ADC_ADINTDIS;
	//adc_config_struct.adc_ch_sel     = ADC_CHANNEL_5 |ADC_CHANNEL_4 |ADC_CHANNEL_3 | ADC_CHANNEL_2 | ADC_CHANNEL_1| ADC_CHANNEL_0; //ADC_CHANNEL_5 |ADC_CHANNEL_4 |ADC_CHANNEL_3 | ADC_CHANNEL_2| ADC_CHANNEL_1| ADC_CHANNEL_0;   
	adc_config_struct.adc_ch_sel     = ADC_CHANNEL_0 |ADC_CHANNEL_3 | ADC_CHANNEL_2 | ADC_CHANNEL_1 |ADC_CHANNEL_4 ;	  //ADC_CHANNEL_5 ||ADC_CHANNEL_3 | ADC_CHANNEL_2 | ADC_CHANNEL_1
	adc_config_struct.adc_burst_en   = ENABLE;
	adc_config_struct.adc_pwd_en	 = DISABLE;
	adc_config_struct.adc_start_edge = ADC_START_ON_RISING; 
	
	ADC_Init(LPC_ADC,&adc_config_struct);
}

/*********************************************************************//**
* @brief 		Get Result conversion from A/D data register
* @param[in]	channel number which want to read back the result
* @return 		Result of conversion
*********************************************************************/
//CPU_INT32S ADC0_GetData(CPU_INT32U channel,CPU_INT16U *pvl)
//{
//    CPU_INT32U adc_value;
//
//	adc_value = *(CPU_INT32U *)((&LPC_ADC->ADDR0) + channel);
//
//	if(adc_value& ADC_DR_DONE_FLAG)
//	{
//	    *pvl = ADC_GDR_RESULT(adc_value); 
//		return 1;
//	}else
//	{
//		return 0;
//	}
//	
//}

CPU_INT16U ADC0_GetData(CPU_INT32U channel)
{
	return (CPU_INT16U)ADC_GDR_RESULT(*(CPU_INT32U *)((&LPC_ADC->ADDR0) + channel));
}

/*
 * param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
 * param[in]	rate ADC conversion rate, should be <=200KHz
 * return 		None
 */
void ADC_Init(LPC_ADC_TypeDef *ADCx, ADC_CFG_Type* ADC_ConfigStruct)
{
	CPU_INT32U temp,i;

	// Turn on power and clock
    if(ADCx == LPC_ADC)
    {
	     PerClkEn(PER_NBR_AD0);	              /* enable ADC0 clock source */
		 temp = PerClkFreqGet(PER_NBR_AD0);

		 for(i=0; i<8; i++)
		 {
		     if(ADC_ConfigStruct->adc_ch_sel & (CPU_INT32U)(1<<i))
		     {														 
				 GPIO_Cfg(adc_pin_config[i].gpio_port,adc_pin_config[i].gpio_pins,adc_pin_config[i].gpio_opt);  /* ADC0 pin select */
#ifdef __ADC_DEBUG__
				 uart_printf(0,"ch%d\r\n",i);
#endif
			 }
		 
		 }
    }else
    {
        return;
	}

	if((ADC_ConfigStruct->adc_rate>200000) \
		|| (ADC_ConfigStruct->adc_rate<(temp/(256*65)))) 
	{
        return;                              /* temp/(256*65) - 200000 */
	}

	ADCx->ADCR = 0;

    /* ADC rate set */
    /* The APB clock (PCLK_ADC0) is divided by (CLKDIV+1) to produce the clock for
	 * A/D converter, which should be less than or equal to 13MHz.
	 * A fully conversion requires 65 of these clocks.
	 * ADC clock = PCLK_ADC0 / (CLKDIV + 1);
	 * ADC rate = ADC clock / 65;
	 */
	temp  = (temp /(ADC_ConfigStruct->adc_rate* 65)) - 1;
	temp &= 0x000000FF;
	temp =  ADC_CR_CLKDIV(temp) & 0x0000FF00;

    if(ADC_ConfigStruct->adc_pwd_en == DISABLE)
    {
        temp |=  ADC_CR_PDN; 
	}else
	{
        temp &= ~ADC_CR_PDN;
	}

	if(ADC_ConfigStruct->adc_burst_en == ENABLE)
	{
        temp |=   ADC_CR_BURST;
		temp &=  ~ADC_CR_START_MASK;        /* START 必须为000 */	
	}else
	{
        temp &=  ~ADC_CR_BURST;
		temp |=   ADC_ConfigStruct->adc_start_edge;
	}

    temp |= ADC_ConfigStruct->adc_ch_sel;
	
	ADCx->ADCR = temp;

	ADCx->ADINTEN = ADC_ConfigStruct->adc_int_opt;

    temp = ADCx->ADGDR;
	temp = ADCx->ADSTAT;                   /* dummy read to clear */
}


/*********************************************************************//**
* @brief 		Close ADC
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @return 		None
**********************************************************************/
void ADC_DeInit(LPC_ADC_TypeDef *ADCx)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	// Clear PDN bit
	ADCx->ADCR &= ~ADC_CR_PDN;

	// Turn off power and clock
    if(ADCx == LPC_ADC)
    {
	     PerClkDis(PER_NBR_AD0);	              /* disable ADC0 clock source */
    }else
    {
        return;
	}
}

/*********************************************************************//**
* @brief 		Set start mode for ADC
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	start_mode Start mode choose one of modes in
* 				'ADC_START_OPT' enumeration type definition, should be:
* 				- ADC_START_CONTINUOUS
* 				- ADC_START_NOW
* 				- ADC_START_ON_EINT0
* 				- ADC_START_ON_CAP01
*				- ADC_START_ON_MAT01
*				- ADC_START_ON_MAT03
*				- ADC_START_ON_MAT10
*				- ADC_START_ON_MAT11
* @return 		None
*********************************************************************/
void ADC_StartCmd(LPC_ADC_TypeDef *ADCx, CPU_INT08U start_mode)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_START_OPT(start_mode));

	ADCx->ADCR &= ~ADC_CR_START_MASK;
	ADCx->ADCR |=ADC_CR_START_MODE_SEL((CPU_INT32U)start_mode);
}


/*********************************************************************//**
* @brief 		ADC Burst mode setting
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	NewState
* 				-	1: Set Burst mode
* 				-	0: reset Burst mode
* @return 		None
**********************************************************************/
void ADC_BurstCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	ADCx->ADCR &= ~ADC_CR_BURST;
	if (NewState){
		ADCx->ADCR |= ADC_CR_BURST;
	}
}

/*********************************************************************//**
* @brief 		Set AD conversion in power mode
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	NewState
* 				-	1: AD converter is optional
* 				-	0: AD Converter is in power down mode
* @return 		None
**********************************************************************/
void ADC_PowerdownCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	ADCx->ADCR &= ~ADC_CR_PDN;
	if (NewState){
		ADCx->ADCR |= ADC_CR_PDN;
	}
}

/*********************************************************************//**
* @brief 		Set Edge start configuration
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	EdgeOption is ADC_START_ON_RISING and ADC_START_ON_FALLING
* 					0:ADC_START_ON_RISING
* 					1:ADC_START_ON_FALLING
* @return 		None
**********************************************************************/
void ADC_EdgeStartConfig(LPC_ADC_TypeDef *ADCx, CPU_INT08U EdgeOption)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_START_ON_EDGE_OPT(EdgeOption));

	ADCx->ADCR &= ~ADC_CR_EDGE;
	if (EdgeOption){
		ADCx->ADCR |= ADC_CR_EDGE;
	}
}

/*********************************************************************//**
* @brief 		ADC interrupt configuration
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	IntType: type of interrupt, should be:
* 				- ADC_ADINTEN0: Interrupt channel 0
* 				- ADC_ADINTEN1: Interrupt channel 1
* 				...
* 				- ADC_ADINTEN7: Interrupt channel 7
* 				- ADC_ADGINTEN: Individual channel/global flag done generate an interrupt
* @param[in]	NewState:
* 					- SET : enable ADC interrupt
* 					- RESET: disable ADC interrupt
* @return 		None
**********************************************************************/
void ADC_IntConfig (LPC_ADC_TypeDef *ADCx, ADC_TYPE_INT_OPT IntType, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_TYPE_INT_OPT(IntType));

	ADCx->ADINTEN &= ~ADC_INTEN_CH(IntType);
	if (NewState){
		ADCx->ADINTEN |= ADC_INTEN_CH(IntType);
	}
}

/*********************************************************************//**
* @brief 		Enable/Disable ADC channel number
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	Channel channel number
* @param[in]	NewState Enable or Disable
*
* @return 		None
**********************************************************************/
void ADC_ChannelCmd (LPC_ADC_TypeDef *ADCx, CPU_INT08U Channel, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));

	if (NewState == ENABLE) {
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
	} else {
		ADCx->ADCR &= ~ADC_CR_CH_SEL(Channel);
	}
}

/*********************************************************************//**
* @brief 		Get ADC result
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	channel: channel number, should be 0...7
* @return 		Data conversion
**********************************************************************/
CPU_INT16U ADC_ChannelGetData(LPC_ADC_TypeDef *ADCx, CPU_INT08U channel)
{
	CPU_INT32U adc_value;

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));

	adc_value = *(CPU_INT32U *) ((&ADCx->ADDR0) + channel);
	return ADC_DR_RESULT(adc_value);
}

/*********************************************************************//**
* @brief 		Get ADC Chanel status from ADC data register
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	channel: channel number, should be 0..7
* @param[in]  	StatusType
*              		 	0:Burst status
*               		1:Done 	status
* @return 		SET / RESET
**********************************************************************/
FlagStatus ADC_ChannelGetStatus(LPC_ADC_TypeDef *ADCx, CPU_INT08U channel, CPU_INT32U StatusType)
{
	CPU_INT32U temp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));

	temp =  *(CPU_INT32U *) ((&ADCx->ADDR0) + channel);
	if (StatusType) {
		temp &= ADC_DR_DONE_FLAG;
	}else{
		temp &= ADC_DR_OVERRUN_FLAG;
	}
	if (temp) {
		return SET;
	} else {
		return RESET;
	}

}

/*********************************************************************//**
* @brief 		Get ADC Data from AD Global register
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @return 		Result of conversion
**********************************************************************/
CPU_INT32U ADC_GlobalGetData(LPC_ADC_TypeDef *ADCx)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	return ((CPU_INT32U)(ADCx->ADGDR));
}

/*********************************************************************//**
* @brief 		Get ADC Chanel status from AD global data register
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]  	StatusType
*              		 	0:Burst status
*               		1:Done 	status
* @return 		SET / RESET
**********************************************************************/
FlagStatus ADC_GlobalGetStatus(LPC_ADC_TypeDef *ADCx, CPU_INT32U StatusType)
{
	CPU_INT32U temp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));

	temp =  ADCx->ADGDR;
	if (StatusType){
		temp &= ADC_DR_DONE_FLAG;
	}else{
		temp &= ADC_DR_OVERRUN_FLAG;
	}
	if (temp){
		return SET;
	}else{
		return RESET;
	}
}

/*******************  (C) COPYRIGHT 2011 DJI ************END OF FILE***********/

