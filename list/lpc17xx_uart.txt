; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\lpc17xx_uart.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\lpc17xx_uart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\cstartup -I.\drivers\uart -I.\app\cfg -I.\iap -I.\drivers -I.\usb -I.\drivers\adc -I.\drivers\gpio -I.\drivers -I.\RTE\_lpc17xx_can_loader_debug -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DLPC175x_6x -D__DEBUG_UART2_PRINTF__ -D__UART0__ -D__UART1__ -D__UART2__ -D__UART3__ -D__UART2_ENABLE__ -D__UART3_ENABLE__ -D__UART0_ENABLE__ -D__UART1_ENABLE__ --omf_browse=.\output\lpc17xx_uart.crf drivers\uart\lpc17xx_uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  uart_swtich_init PROC
;;;45     
;;;46     void uart_swtich_init(void)
000000  48fe              LDR      r0,|L1.1020|
;;;47     {
;;;48     	LPC_GPIO2->FIODIR |= 1<< 2;
000002  6c00              LDR      r0,[r0,#0x40]
000004  f0400004          ORR      r0,r0,#4
000008  49fc              LDR      r1,|L1.1020|
00000a  6408              STR      r0,[r1,#0x40]
;;;49     	LPC_GPIO2->FIOSET |= 1<< 2;
00000c  4608              MOV      r0,r1
00000e  6d80              LDR      r0,[r0,#0x58]
000010  f0400004          ORR      r0,r0,#4
000014  6588              STR      r0,[r1,#0x58]
;;;50     	
;;;51     	LPC_GPIO2->FIODIR |= 1<< 4;
000016  4608              MOV      r0,r1
000018  6c00              LDR      r0,[r0,#0x40]
00001a  f0400010          ORR      r0,r0,#0x10
00001e  6408              STR      r0,[r1,#0x40]
;;;52     	LPC_GPIO2->FIOSET |= 1<< 4;
000020  4608              MOV      r0,r1
000022  6d80              LDR      r0,[r0,#0x58]
000024  f0400010          ORR      r0,r0,#0x10
000028  6588              STR      r0,[r1,#0x58]
;;;53     }
00002a  4770              BX       lr
;;;54     
                          ENDP

                  TX_RX1_ON PROC
;;;55     void TX_RX1_ON(void)
00002c  48f3              LDR      r0,|L1.1020|
;;;56     {
;;;57     	LPC_GPIO2->FIOCLR |= 1<< 2;
00002e  6dc0              LDR      r0,[r0,#0x5c]
000030  f0400004          ORR      r0,r0,#4
000034  49f1              LDR      r1,|L1.1020|
000036  65c8              STR      r0,[r1,#0x5c]
;;;58     	LPC_GPIO2->FIOCLR |= 1<< 4;
000038  4608              MOV      r0,r1
00003a  6dc0              LDR      r0,[r0,#0x5c]
00003c  f0400010          ORR      r0,r0,#0x10
000040  65c8              STR      r0,[r1,#0x5c]
;;;59     }
000042  4770              BX       lr
;;;60     
                          ENDP

                  TX_RX2_ON PROC
;;;61     void TX_RX2_ON(void)
000044  48ed              LDR      r0,|L1.1020|
;;;62     {
;;;63     	LPC_GPIO2->FIOSET |= 1<< 2;
000046  6d80              LDR      r0,[r0,#0x58]
000048  f0400004          ORR      r0,r0,#4
00004c  49eb              LDR      r1,|L1.1020|
00004e  6588              STR      r0,[r1,#0x58]
;;;64     	LPC_GPIO2->FIOCLR |= 1<< 4;
000050  4608              MOV      r0,r1
000052  6dc0              LDR      r0,[r0,#0x5c]
000054  f0400010          ORR      r0,r0,#0x10
000058  65c8              STR      r0,[r1,#0x5c]
;;;65     }
00005a  4770              BX       lr
;;;66     // __DEBUG_UART2_PRINTF__  __DEBUG_UART2_PRINTF__,
                          ENDP

                  UART3_SendByte PROC
;;;890    /* interrupt r&w */
;;;891    void UART3_SendByte(uint8_t data)
00005c  b570              PUSH     {r4-r6,lr}
;;;892    {
00005e  4604              MOV      r4,r0
;;;893    	CPU_SR_ALLOC();
000060  2500              MOVS     r5,#0
;;;894        
;;;895    	while(RING_BUF_COUNT(UART3_tx_buf) >= (uint32_t)TX_BUFFER_SIZE3-16);  /* 不会锁死 */
000062  bf00              NOP      
                  |L1.100|
000064  48e6              LDR      r0,|L1.1024|
000066  6800              LDR      r0,[r0,#0]  ; UART3_tx_buf
000068  49e5              LDR      r1,|L1.1024|
00006a  6849              LDR      r1,[r1,#4]  ; UART3_tx_buf
00006c  1a40              SUBS     r0,r0,r1
00006e  49e4              LDR      r1,|L1.1024|
000070  6889              LDR      r1,[r1,#8]  ; UART3_tx_buf
000072  4008              ANDS     r0,r0,r1
000074  28f0              CMP      r0,#0xf0
000076  d2f5              BCS      |L1.100|
;;;896    
;;;897    	CPU_CRITICAL_ENTER(); 
000078  f7fffffe          BL       CPU_SR_Save
00007c  4605              MOV      r5,r0
;;;898    	RING_BUF_WR(UART3_tx_buf,data);
00007e  49e0              LDR      r1,|L1.1024|
000080  6808              LDR      r0,[r1,#0]  ; UART3_tx_buf
000082  1c41              ADDS     r1,r0,#1
000084  4ade              LDR      r2,|L1.1024|
000086  6011              STR      r1,[r2,#0]  ; UART3_tx_buf
000088  4611              MOV      r1,r2
00008a  6889              LDR      r1,[r1,#8]  ; UART3_tx_buf
00008c  4001              ANDS     r1,r1,r0
00008e  68d2              LDR      r2,[r2,#0xc]  ; UART3_tx_buf
000090  5454              STRB     r4,[r2,r1]
;;;899        if ( ((LPC_UART3->LSR&LSR_THRE) != 0) )LPC_UART3->THR = RING_BUF_RD(UART3_tx_buf);
000092  48dc              LDR      r0,|L1.1028|
000094  7d00              LDRB     r0,[r0,#0x14]
000096  f0000020          AND      r0,r0,#0x20
00009a  b158              CBZ      r0,|L1.180|
00009c  49d8              LDR      r1,|L1.1024|
00009e  6848              LDR      r0,[r1,#4]  ; UART3_tx_buf
0000a0  1c41              ADDS     r1,r0,#1
0000a2  4ad7              LDR      r2,|L1.1024|
0000a4  6051              STR      r1,[r2,#4]  ; UART3_tx_buf
0000a6  4611              MOV      r1,r2
0000a8  6889              LDR      r1,[r1,#8]  ; UART3_tx_buf
0000aa  4001              ANDS     r1,r1,r0
0000ac  68d2              LDR      r2,[r2,#0xc]  ; UART3_tx_buf
0000ae  5c51              LDRB     r1,[r2,r1]
0000b0  4ad4              LDR      r2,|L1.1028|
0000b2  7011              STRB     r1,[r2,#0]
                  |L1.180|
;;;900        CPU_CRITICAL_EXIT();
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       CPU_SR_Restore
;;;901    }
0000ba  bd70              POP      {r4-r6,pc}
;;;902    
                          ENDP

                  UART2_SendByte PROC
;;;668    /* interrupt r&w */
;;;669    void UART2_SendByte(uint8_t data)
0000bc  b570              PUSH     {r4-r6,lr}
;;;670    {
0000be  4604              MOV      r4,r0
;;;671    	CPU_SR_ALLOC();
0000c0  2500              MOVS     r5,#0
;;;672      Radar_RS485_WR();
0000c2  48ce              LDR      r0,|L1.1020|
0000c4  6b80              LDR      r0,[r0,#0x38]
0000c6  f0400001          ORR      r0,r0,#1
0000ca  49cc              LDR      r1,|L1.1020|
0000cc  6388              STR      r0,[r1,#0x38]
;;;673    	while(RING_BUF_COUNT(UART2_tx_buf) >= (uint32_t)TX_BUFFER_SIZE2-16);  /* 不会锁死 */
0000ce  bf00              NOP      
                  |L1.208|
0000d0  48cd              LDR      r0,|L1.1032|
0000d2  6800              LDR      r0,[r0,#0]  ; UART2_tx_buf
0000d4  49cc              LDR      r1,|L1.1032|
0000d6  6849              LDR      r1,[r1,#4]  ; UART2_tx_buf
0000d8  1a40              SUBS     r0,r0,r1
0000da  49cb              LDR      r1,|L1.1032|
0000dc  6889              LDR      r1,[r1,#8]  ; UART2_tx_buf
0000de  4008              ANDS     r0,r0,r1
0000e0  f5b07ff8          CMP      r0,#0x1f0
0000e4  d2f4              BCS      |L1.208|
;;;674    
;;;675    	CPU_CRITICAL_ENTER(); 
0000e6  f7fffffe          BL       CPU_SR_Save
0000ea  4605              MOV      r5,r0
;;;676    	RING_BUF_WR(UART2_tx_buf,data);
0000ec  49c6              LDR      r1,|L1.1032|
0000ee  6808              LDR      r0,[r1,#0]  ; UART2_tx_buf
0000f0  1c41              ADDS     r1,r0,#1
0000f2  4ac5              LDR      r2,|L1.1032|
0000f4  6011              STR      r1,[r2,#0]  ; UART2_tx_buf
0000f6  4611              MOV      r1,r2
0000f8  6889              LDR      r1,[r1,#8]  ; UART2_tx_buf
0000fa  4001              ANDS     r1,r1,r0
0000fc  68d2              LDR      r2,[r2,#0xc]  ; UART2_tx_buf
0000fe  5454              STRB     r4,[r2,r1]
;;;677        if ( ((LPC_UART2->LSR&LSR_THRE) != 0) )LPC_UART2->THR = RING_BUF_RD(UART2_tx_buf);
000100  48c2              LDR      r0,|L1.1036|
000102  7d00              LDRB     r0,[r0,#0x14]
000104  f0000020          AND      r0,r0,#0x20
000108  b158              CBZ      r0,|L1.290|
00010a  49bf              LDR      r1,|L1.1032|
00010c  6848              LDR      r0,[r1,#4]  ; UART2_tx_buf
00010e  1c41              ADDS     r1,r0,#1
000110  4abd              LDR      r2,|L1.1032|
000112  6051              STR      r1,[r2,#4]  ; UART2_tx_buf
000114  4611              MOV      r1,r2
000116  6889              LDR      r1,[r1,#8]  ; UART2_tx_buf
000118  4001              ANDS     r1,r1,r0
00011a  68d2              LDR      r2,[r2,#0xc]  ; UART2_tx_buf
00011c  5c51              LDRB     r1,[r2,r1]
00011e  4abb              LDR      r2,|L1.1036|
000120  7011              STRB     r1,[r2,#0]
                  |L1.290|
;;;678        CPU_CRITICAL_EXIT();
000122  4628              MOV      r0,r5
000124  f7fffffe          BL       CPU_SR_Restore
;;;679    }
000128  bd70              POP      {r4-r6,pc}
;;;680    
                          ENDP

                  UART0_SendByte PROC
;;;238    /* interrupt r&w */
;;;239    void UART0_SendByte(uint8_t data)
00012a  b570              PUSH     {r4-r6,lr}
;;;240    {
00012c  4604              MOV      r4,r0
;;;241    	CPU_SR_ALLOC();
00012e  2500              MOVS     r5,#0
;;;242        
;;;243    	while(RING_BUF_COUNT(UART0_tx_buf) >= (uint32_t)TX_BUFFER_SIZE0-16);  /* 不会锁死 */
000130  bf00              NOP      
                  |L1.306|
000132  48b7              LDR      r0,|L1.1040|
000134  6800              LDR      r0,[r0,#0]  ; UART0_tx_buf
000136  49b6              LDR      r1,|L1.1040|
000138  6849              LDR      r1,[r1,#4]  ; UART0_tx_buf
00013a  1a40              SUBS     r0,r0,r1
00013c  49b4              LDR      r1,|L1.1040|
00013e  6889              LDR      r1,[r1,#8]  ; UART0_tx_buf
000140  4008              ANDS     r0,r0,r1
000142  28f0              CMP      r0,#0xf0
000144  d2f5              BCS      |L1.306|
;;;244    
;;;245    	CPU_CRITICAL_ENTER(); 
000146  f7fffffe          BL       CPU_SR_Save
00014a  4605              MOV      r5,r0
;;;246    	RING_BUF_WR(UART0_tx_buf,data);
00014c  49b0              LDR      r1,|L1.1040|
00014e  6808              LDR      r0,[r1,#0]  ; UART0_tx_buf
000150  1c41              ADDS     r1,r0,#1
000152  4aaf              LDR      r2,|L1.1040|
000154  6011              STR      r1,[r2,#0]  ; UART0_tx_buf
000156  4611              MOV      r1,r2
000158  6889              LDR      r1,[r1,#8]  ; UART0_tx_buf
00015a  4001              ANDS     r1,r1,r0
00015c  68d2              LDR      r2,[r2,#0xc]  ; UART0_tx_buf
00015e  5454              STRB     r4,[r2,r1]
;;;247        if ((LPC_UART0->LSR&LSR_THRE) != 0) LPC_UART0->THR = RING_BUF_RD(UART0_tx_buf);
000160  48ac              LDR      r0,|L1.1044|
000162  7d00              LDRB     r0,[r0,#0x14]
000164  f0000020          AND      r0,r0,#0x20
000168  b158              CBZ      r0,|L1.386|
00016a  49a9              LDR      r1,|L1.1040|
00016c  6848              LDR      r0,[r1,#4]  ; UART0_tx_buf
00016e  1c41              ADDS     r1,r0,#1
000170  4aa7              LDR      r2,|L1.1040|
000172  6051              STR      r1,[r2,#4]  ; UART0_tx_buf
000174  4611              MOV      r1,r2
000176  6889              LDR      r1,[r1,#8]  ; UART0_tx_buf
000178  4001              ANDS     r1,r1,r0
00017a  68d2              LDR      r2,[r2,#0xc]  ; UART0_tx_buf
00017c  5c51              LDRB     r1,[r2,r1]
00017e  4aa5              LDR      r2,|L1.1044|
000180  7011              STRB     r1,[r2,#0]
                  |L1.386|
;;;248        CPU_CRITICAL_EXIT();
000182  4628              MOV      r0,r5
000184  f7fffffe          BL       CPU_SR_Restore
;;;249    }
000188  bd70              POP      {r4-r6,pc}
;;;250    
                          ENDP

                  uart_printf PROC
;;;66     // __DEBUG_UART2_PRINTF__  __DEBUG_UART2_PRINTF__,
;;;67     void uart_printf(uint8_t uart_n,char *pstr, ...)    
00018a  b40f              PUSH     {r0-r3}
;;;68     {
00018c  b538              PUSH     {r3-r5,lr}
00018e  4605              MOV      r5,r0
;;;69       #ifdef __DEBUG_UART2_PRINTF__
;;;70         va_list arglist;
;;;71         uint8_t *fp;
;;;72     
;;;73     	if(printf_lock)return;
000190  48a1              LDR      r0,|L1.1048|
000192  6800              LDR      r0,[r0,#0]  ; printf_lock
000194  b110              CBZ      r0,|L1.412|
                  |L1.406|
;;;74     	  printf_lock = 1;  //互斥
;;;75         va_start(arglist, pstr);
;;;76         vsnprintf((void*)uart_buf_printf,128,(void*)pstr, arglist);
;;;77         va_end(arglist);
;;;78         fp = uart_buf_printf; 
;;;79        	
;;;80     	  switch (uart_n)
;;;81         {
;;;82     				case 0:	
;;;83     				default:
;;;84     				{ 
;;;85     					while(*fp) UART0_SendByte(*fp++);
;;;86     				}
;;;87     				break;   
;;;88     				case 2:
;;;89     				{ 
;;;90     					while(*fp) UART2_SendByte(*fp++);
;;;91     				}
;;;92     				break;	
;;;93     	      case 3:
;;;94     				{ 
;;;95     					while(*fp) UART3_SendByte(*fp++);
;;;96     				}
;;;97     				break;				
;;;98         }
;;;99     	printf_lock = 0; 
;;;100    #endif
;;;101    }
000196  bc38              POP      {r3-r5}
000198  f85dfb14          LDR      pc,[sp],#0x14
                  |L1.412|
00019c  2001              MOVS     r0,#1                 ;74
00019e  499e              LDR      r1,|L1.1048|
0001a0  6008              STR      r0,[r1,#0]            ;74  ; printf_lock
0001a2  a806              ADD      r0,sp,#0x18           ;75
0001a4  9000              STR      r0,[sp,#0]            ;75
0001a6  2180              MOVS     r1,#0x80              ;76
0001a8  489c              LDR      r0,|L1.1052|
0001aa  9b00              LDR      r3,[sp,#0]            ;76
0001ac  9a05              LDR      r2,[sp,#0x14]         ;76
0001ae  f7fffffe          BL       __c89vsnprintf
0001b2  2000              MOVS     r0,#0                 ;77
0001b4  9000              STR      r0,[sp,#0]            ;77
0001b6  4c99              LDR      r4,|L1.1052|
0001b8  b125              CBZ      r5,|L1.452|
0001ba  2d02              CMP      r5,#2                 ;80
0001bc  d00b              BEQ      |L1.470|
0001be  2d03              CMP      r5,#3                 ;80
0001c0  d012              BEQ      |L1.488|
0001c2  bf00              NOP                            ;82
                  |L1.452|
0001c4  e003              B        |L1.462|
                  |L1.454|
0001c6  f8140b01          LDRB     r0,[r4],#1            ;85
0001ca  f7fffffe          BL       UART0_SendByte
                  |L1.462|
0001ce  7820              LDRB     r0,[r4,#0]            ;85
0001d0  2800              CMP      r0,#0                 ;85
0001d2  d1f8              BNE      |L1.454|
0001d4  e011              B        |L1.506|
                  |L1.470|
0001d6  e003              B        |L1.480|
                  |L1.472|
0001d8  f8140b01          LDRB     r0,[r4],#1            ;90
0001dc  f7fffffe          BL       UART2_SendByte
                  |L1.480|
0001e0  7820              LDRB     r0,[r4,#0]            ;90
0001e2  2800              CMP      r0,#0                 ;90
0001e4  d1f8              BNE      |L1.472|
0001e6  e008              B        |L1.506|
                  |L1.488|
0001e8  e003              B        |L1.498|
                  |L1.490|
0001ea  f8140b01          LDRB     r0,[r4],#1            ;95
0001ee  f7fffffe          BL       UART3_SendByte
                  |L1.498|
0001f2  7820              LDRB     r0,[r4,#0]            ;95
0001f4  2800              CMP      r0,#0                 ;95
0001f6  d1f8              BNE      |L1.490|
0001f8  bf00              NOP                            ;97
                  |L1.506|
0001fa  bf00              NOP                            ;87
0001fc  2000              MOVS     r0,#0                 ;99
0001fe  4986              LDR      r1,|L1.1048|
000200  6008              STR      r0,[r1,#0]            ;99  ; printf_lock
000202  bf00              NOP      
000204  e7c7              B        |L1.406|
;;;102    
                          ENDP

                  UART3_BufClr PROC
;;;863    
;;;864    void UART3_BufClr(void)
000206  2000              MOVS     r0,#0
;;;865    {
;;;866      UART3_tx_buf.wrIdx = 0;
000208  497d              LDR      r1,|L1.1024|
00020a  6008              STR      r0,[r1,#0]  ; UART3_tx_buf
;;;867    	UART3_tx_buf.rdIdx = 0;
00020c  6048              STR      r0,[r1,#4]  ; UART3_tx_buf
;;;868    	UART3_tx_buf.mask  = (uint32_t)(TX_BUFFER_SIZE3-1);
00020e  20ff              MOVS     r0,#0xff
000210  6088              STR      r0,[r1,#8]  ; UART3_tx_buf
;;;869    	UART3_tx_buf.pBuf  = &tx_buffer3[0];
000212  4883              LDR      r0,|L1.1056|
000214  60c8              STR      r0,[r1,#0xc]  ; UART3_tx_buf
;;;870    
;;;871    	UART3_rx_buf.wrIdx = 0;
000216  2000              MOVS     r0,#0
000218  4982              LDR      r1,|L1.1060|
00021a  6008              STR      r0,[r1,#0]  ; UART3_rx_buf
;;;872    	UART3_rx_buf.rdIdx = 0;
00021c  6048              STR      r0,[r1,#4]  ; UART3_rx_buf
;;;873    	UART3_rx_buf.mask  = (uint32_t)(RX_BUFFER_SIZE3-1);
00021e  20ff              MOVS     r0,#0xff
000220  6088              STR      r0,[r1,#8]  ; UART3_rx_buf
;;;874    	UART3_rx_buf.pBuf  = &rx_buffer3[0];	
000222  4881              LDR      r0,|L1.1064|
000224  60c8              STR      r0,[r1,#0xc]  ; UART3_rx_buf
;;;875    }
000226  4770              BX       lr
;;;876    
                          ENDP

                  UART3_Init PROC
;;;788     */
;;;789    static void UART3_Init( uint32_t baud )
000228  e92d4ff0          PUSH     {r4-r11,lr}
;;;790    {
00022c  b085              SUB      sp,sp,#0x14
00022e  4607              MOV      r7,r0
;;;791    	uint32_t pclk_freq;
;;;792    	uint32_t i,err_abs,tmp_i,tmp_err_abs;
;;;793    	uint16_t div;
;;;794    	uint8_t j,k,tmp_j,tmp_k,fra_div,fra_mul;
;;;795    	
;;;796    	tmp_j = tmp_k = 0;
000230  2000              MOVS     r0,#0
000232  9002              STR      r0,[sp,#8]
000234  9003              STR      r0,[sp,#0xc]
;;;797    	tmp_i = 0;
000236  9004              STR      r0,[sp,#0x10]
;;;798    	/* find Divisor and Fractional Divider */
;;;799    	/* 只四舍五入(误差大),要考虑小数位(误差小)*/
;;;800    	/* 1<=MULVAL>=15; 0<=DIVADDVAL>=14; DIVADDVAL<MULVAL */ 
;;;801    	pclk_freq = (25000000); 
000238  f8df91f0          LDR      r9,|L1.1068|
;;;802        div       = (uint16_t)(2*pclk_freq/16/baud + 1)/2; /* 四舍五入 */
00023c  f3c901db          UBFX     r1,r9,#3,#28
000240  fbb1f1f7          UDIV     r1,r1,r7
000244  1c49              ADDS     r1,r1,#1
000246  b288              UXTH     r0,r1
000248  eb0071d0          ADD      r1,r0,r0,LSR #31
00024c  ea4f0861          ASR      r8,r1,#1
;;;803    
;;;804    	fra_div = 0;
000250  2000              MOVS     r0,#0
000252  9001              STR      r0,[sp,#4]
;;;805        fra_mul = 1;
000254  2001              MOVS     r0,#1
000256  9000              STR      r0,[sp,#0]
;;;806    	if((pclk_freq/16/div) != baud)	 /* integer ?*/
000258  ea4f1019          LSR      r0,r9,#4
00025c  fbb0f0f8          UDIV     r0,r0,r8
000260  42b8              CMP      r0,r7
000262  d044              BEQ      |L1.750|
;;;807    	{
;;;808    		err_abs = 0xffffffff;
000264  f04f3aff          MOV      r10,#0xffffffff
;;;809    		/* find the best div,fra_div,fra_abs */
;;;810    		for(i=div; i>div/2; i--)
000268  4646              MOV      r6,r8
00026a  e034              B        |L1.726|
                  |L1.620|
;;;811    		{
;;;812    		    for(j=0; j<15; j++)				/* DIVADDVAL */
00026c  2500              MOVS     r5,#0
00026e  e02f              B        |L1.720|
                  |L1.624|
;;;813    			{
;;;814    				for(k=j+1; k<16; k++)		/* MULVAL */
000270  1c68              ADDS     r0,r5,#1
000272  b2c4              UXTB     r4,r0
000274  e027              B        |L1.710|
                  |L1.630|
;;;815    				{
;;;816    					tmp_err_abs = DEF_ABS((int32_t)(((pclk_freq*k)/16/i/(k+j)) - baud)); 
000276  fb09f004          MUL      r0,r9,r4
00027a  0900              LSRS     r0,r0,#4
00027c  fbb0f0f6          UDIV     r0,r0,r6
000280  1961              ADDS     r1,r4,r5
000282  fbb0f0f1          UDIV     r0,r0,r1
000286  1bc0              SUBS     r0,r0,r7
000288  d509              BPL      |L1.670|
00028a  fb09f004          MUL      r0,r9,r4
00028e  0900              LSRS     r0,r0,#4
000290  fbb0f0f6          UDIV     r0,r0,r6
000294  1961              ADDS     r1,r4,r5
000296  fbb0f0f1          UDIV     r0,r0,r1
00029a  1a38              SUBS     r0,r7,r0
00029c  e008              B        |L1.688|
                  |L1.670|
00029e  fb09f004          MUL      r0,r9,r4
0002a2  0900              LSRS     r0,r0,#4
0002a4  fbb0f0f6          UDIV     r0,r0,r6
0002a8  1961              ADDS     r1,r4,r5
0002aa  fbb0f0f1          UDIV     r0,r0,r1
0002ae  1bc0              SUBS     r0,r0,r7
                  |L1.688|
0002b0  4683              MOV      r11,r0
;;;817    					if(tmp_err_abs < err_abs)
0002b2  45d3              CMP      r11,r10
0002b4  d203              BCS      |L1.702|
;;;818    					{
;;;819    					    err_abs = tmp_err_abs;
0002b6  46da              MOV      r10,r11
;;;820    						tmp_i = i;
0002b8  9604              STR      r6,[sp,#0x10]
;;;821    						tmp_j = j;
0002ba  9503              STR      r5,[sp,#0xc]
;;;822    						tmp_k = k;
0002bc  9402              STR      r4,[sp,#8]
                  |L1.702|
;;;823    					}
;;;824    					if(j == 0)break; 
0002be  b905              CBNZ     r5,|L1.706|
0002c0  e003              B        |L1.714|
                  |L1.706|
0002c2  1c60              ADDS     r0,r4,#1              ;814
0002c4  b2c4              UXTB     r4,r0                 ;814
                  |L1.710|
0002c6  2c10              CMP      r4,#0x10              ;814
0002c8  dbd5              BLT      |L1.630|
                  |L1.714|
0002ca  bf00              NOP      
0002cc  1c68              ADDS     r0,r5,#1              ;812
0002ce  b2c5              UXTB     r5,r0                 ;812
                  |L1.720|
0002d0  2d0f              CMP      r5,#0xf               ;812
0002d2  dbcd              BLT      |L1.624|
0002d4  1e76              SUBS     r6,r6,#1              ;810
                  |L1.726|
0002d6  eb0871d8          ADD      r1,r8,r8,LSR #31      ;810
0002da  ebb60f61          CMP      r6,r1,ASR #1          ;810
0002de  d8c5              BHI      |L1.620|
;;;825    				}
;;;826    			}
;;;827    		}
;;;828    		div	= tmp_i;
0002e0  9804              LDR      r0,[sp,#0x10]
0002e2  fa1ff880          UXTH     r8,r0
;;;829    		fra_div	= tmp_j;
0002e6  9803              LDR      r0,[sp,#0xc]
0002e8  9001              STR      r0,[sp,#4]
;;;830    		fra_mul	= tmp_k;
0002ea  9802              LDR      r0,[sp,#8]
0002ec  9000              STR      r0,[sp,#0]
                  |L1.750|
;;;831    	}
;;;832    
;;;833    	LPC_SC->PCONP |= 1<<25;	          /* enable UART3 clock source */
0002ee  4850              LDR      r0,|L1.1072|
0002f0  6800              LDR      r0,[r0,#0]
0002f2  f0407000          ORR      r0,r0,#0x2000000
0002f6  494e              LDR      r1,|L1.1072|
0002f8  39c4              SUBS     r1,r1,#0xc4
0002fa  f8c100c4          STR      r0,[r1,#0xc4]
;;;834    
;;;835    //	PINSEL1       &= ~(3<<18);            
;;;836    //  PINSEL1       |=   3<<18 ;	      /* uart3 TXD pin select */
;;;837    //	PINSEL1       &= ~(3<<20);            
;;;838    //	PINSEL1       |=  (3<<20);		  /* uart3 RXD pin select */
;;;839    	
;;;840    	PINSEL0       &= ~(2<<0);            
0002fe  484d              LDR      r0,|L1.1076|
000300  6800              LDR      r0,[r0,#0]
000302  f0200002          BIC      r0,r0,#2
000306  494b              LDR      r1,|L1.1076|
000308  6008              STR      r0,[r1,#0]
;;;841      PINSEL0       |=   2<<0;	      /* uart3 TXD pin select */
00030a  4608              MOV      r0,r1
00030c  6800              LDR      r0,[r0,#0]
00030e  f0400002          ORR      r0,r0,#2
000312  6008              STR      r0,[r1,#0]
;;;842    	PINSEL0       &= ~(2<<2);            
000314  4608              MOV      r0,r1
000316  6800              LDR      r0,[r0,#0]
000318  f0200008          BIC      r0,r0,#8
00031c  6008              STR      r0,[r1,#0]
;;;843    	PINSEL0       |=  (2<<2);		  /* uart3 RXD pin select */
00031e  4608              MOV      r0,r1
000320  6800              LDR      r0,[r0,#0]
000322  f0400008          ORR      r0,r0,#8
000326  6008              STR      r0,[r1,#0]
;;;844    	
;;;845    
;;;846    	LPC_UART3->LCR = SET_DLAB;
000328  2080              MOVS     r0,#0x80
00032a  4936              LDR      r1,|L1.1028|
00032c  7308              STRB     r0,[r1,#0xc]
;;;847    	LPC_UART3->DLL = (uint8_t)(div&0x00ff);
00032e  f8818000          STRB     r8,[r1,#0]
;;;848    	LPC_UART3->DLM = (uint8_t)((div>>8)&0x00ff);
000332  ea4f2018          LSR      r0,r8,#8
000336  7108              STRB     r0,[r1,#4]
;;;849    	LPC_UART3->FDR = (fra_div<<FDR_DIVADDVAL)|(fra_mul<<FDR_MULVAL);
000338  e9dd1000          LDRD     r1,r0,[sp,#0]
00033c  ea401001          ORR      r0,r0,r1,LSL #4
000340  4930              LDR      r1,|L1.1028|
000342  3128              ADDS     r1,r1,#0x28
000344  7008              STRB     r0,[r1,#0]
;;;850    	
;;;851    	/* LPC_UART3->TER 中发生使能位默认为1,无需再次设置发送使能位 */
;;;852    	LPC_UART3->LCR = 0x03;  /* DLAB = 0，diable access to 波特率,8N1 */
000346  2003              MOVS     r0,#3
000348  492e              LDR      r1,|L1.1028|
00034a  7308              STRB     r0,[r1,#0xc]
;;;853    	LPC_UART3->IER = DEF_BIT_NONE;
00034c  2000              MOVS     r0,#0
00034e  6048              STR      r0,[r1,#4]
;;;854    	LPC_UART3->FCR = FIFO_ENABLE | RX_FIFO_RESET | TX_FIFO_RESET | RX_TRI_LS3; /* 14 bytes trigger */
000350  20c7              MOVS     r0,#0xc7
000352  7208              STRB     r0,[r1,#8]
;;;855    	
;;;856    	LPC_UART3->IER |= IER_THRE_EN; //使能发送中断
000354  4608              MOV      r0,r1
000356  6840              LDR      r0,[r0,#4]
000358  f0400002          ORR      r0,r0,#2
00035c  6048              STR      r0,[r1,#4]
;;;857      LPC_UART3->IER |= IER_RBR_EN;  //使能接收中断
00035e  4608              MOV      r0,r1
000360  6840              LDR      r0,[r0,#4]
000362  f0400001          ORR      r0,r0,#1
000366  6048              STR      r0,[r1,#4]
;;;858     // NVIC_SetPriority(UART3_IRQn, ((0x01<<3)|0x01));
;;;859    	NVIC_EnableIRQ(UART3_IRQn);
000368  2008              MOVS     r0,#8
00036a  f7fffffe          BL       NVIC_EnableIRQ
;;;860    
;;;861    	UART3_BufClr();
00036e  f7fffffe          BL       UART3_BufClr
;;;862    }
000372  b005              ADD      sp,sp,#0x14
000374  e8bd8ff0          POP      {r4-r11,pc}
;;;863    
                          ENDP

                  Radar_RS485_RD_Init PROC
;;;538    //初始化使能管脚
;;;539    void Radar_RS485_RD_Init( void )
000378  4820              LDR      r0,|L1.1020|
;;;540    {
;;;541    	LPC_GPIO1->FIODIR   |= 1 << 0;
00037a  6a00              LDR      r0,[r0,#0x20]
00037c  f0400001          ORR      r0,r0,#1
000380  491e              LDR      r1,|L1.1020|
000382  6208              STR      r0,[r1,#0x20]
;;;542    	//Radar_RS485_RD()
;;;543    }
000384  4770              BX       lr
;;;544    
                          ENDP

                  UART2_BufClr PROC
;;;636    
;;;637    void UART2_BufClr(void)
000386  2000              MOVS     r0,#0
;;;638    {
;;;639        UART2_tx_buf.wrIdx = 0;
000388  491f              LDR      r1,|L1.1032|
00038a  6008              STR      r0,[r1,#0]  ; UART2_tx_buf
;;;640    	UART2_tx_buf.rdIdx = 0;
00038c  6048              STR      r0,[r1,#4]  ; UART2_tx_buf
;;;641    	UART2_tx_buf.mask  = (uint32_t)(TX_BUFFER_SIZE2-1);
00038e  f24010ff          MOV      r0,#0x1ff
000392  6088              STR      r0,[r1,#8]  ; UART2_tx_buf
;;;642    	UART2_tx_buf.pBuf  = &tx_buffer2[0];
000394  4828              LDR      r0,|L1.1080|
000396  60c8              STR      r0,[r1,#0xc]  ; UART2_tx_buf
;;;643    
;;;644    	UART2_rx_buf.wrIdx = 0;
000398  2000              MOVS     r0,#0
00039a  4928              LDR      r1,|L1.1084|
00039c  6008              STR      r0,[r1,#0]  ; UART2_rx_buf
;;;645    	UART2_rx_buf.rdIdx = 0;
00039e  6048              STR      r0,[r1,#4]  ; UART2_rx_buf
;;;646    	UART2_rx_buf.mask  = (uint32_t)(RX_BUFFER_SIZE2-1);
0003a0  f24010ff          MOV      r0,#0x1ff
0003a4  6088              STR      r0,[r1,#8]  ; UART2_rx_buf
;;;647    	UART2_rx_buf.pBuf  = &rx_buffer2[0];	
0003a6  4826              LDR      r0,|L1.1088|
0003a8  60c8              STR      r0,[r1,#0xc]  ; UART2_rx_buf
;;;648    	
;;;649    	UART2_rx_buf_copy.wrIdx = 0;
0003aa  2000              MOVS     r0,#0
0003ac  4925              LDR      r1,|L1.1092|
0003ae  6008              STR      r0,[r1,#0]  ; UART2_rx_buf_copy
;;;650    	UART2_rx_buf_copy.rdIdx = 0;
0003b0  6048              STR      r0,[r1,#4]  ; UART2_rx_buf_copy
;;;651    	UART2_rx_buf_copy.mask  = (uint32_t)(RX_BUFFER_SIZE2-1);
0003b2  f24010ff          MOV      r0,#0x1ff
0003b6  6088              STR      r0,[r1,#8]  ; UART2_rx_buf_copy
;;;652    	UART2_rx_buf_copy.pBuf  = &rx_buffer2_copy[0];
0003b8  4823              LDR      r0,|L1.1096|
0003ba  60c8              STR      r0,[r1,#0xc]  ; UART2_rx_buf_copy
;;;653    }
0003bc  4770              BX       lr
;;;654    
                          ENDP

                  UART2_Init PROC
;;;556     */
;;;557    static void UART2_Init( uint32_t baud )
0003be  e92d4ff0          PUSH     {r4-r11,lr}
;;;558    {
0003c2  b085              SUB      sp,sp,#0x14
0003c4  4607              MOV      r7,r0
;;;559    	uint32_t pclk_freq;
;;;560    	uint32_t i,err_abs,tmp_i,tmp_err_abs;
;;;561    	uint16_t div;
;;;562    	uint8_t j,k,tmp_j,tmp_k,fra_div,fra_mul;
;;;563    	
;;;564    	tmp_j = tmp_k = 0;
0003c6  2000              MOVS     r0,#0
0003c8  9002              STR      r0,[sp,#8]
0003ca  9003              STR      r0,[sp,#0xc]
;;;565    	tmp_i = 0;
0003cc  9004              STR      r0,[sp,#0x10]
;;;566    	/* find Divisor and Fractional Divider */
;;;567    	/* 只四舍五入(误差大),要考虑小数位(误差小)*/
;;;568    	/* 1<=MULVAL>=15; 0<=DIVADDVAL>=14; DIVADDVAL<MULVAL */ 
;;;569    	pclk_freq = (25000000); 
0003ce  f8df905c          LDR      r9,|L1.1068|
;;;570        div       = (uint16_t)(2*pclk_freq/16/baud + 1)/2; /* 四舍五入 */
0003d2  f3c901db          UBFX     r1,r9,#3,#28
0003d6  fbb1f1f7          UDIV     r1,r1,r7
0003da  1c49              ADDS     r1,r1,#1
0003dc  b288              UXTH     r0,r1
0003de  eb0071d0          ADD      r1,r0,r0,LSR #31
0003e2  ea4f0861          ASR      r8,r1,#1
;;;571    	
;;;572    	fra_div = 0;
0003e6  2000              MOVS     r0,#0
0003e8  9001              STR      r0,[sp,#4]
;;;573        fra_mul = 1;
0003ea  2001              MOVS     r0,#1
0003ec  9000              STR      r0,[sp,#0]
;;;574    	if((pclk_freq/16/div) != baud)	 /* integer ?*/
0003ee  ea4f1019          LSR      r0,r9,#4
0003f2  fbb0f0f8          UDIV     r0,r0,r8
0003f6  42b8              CMP      r0,r7
0003f8  d06d              BEQ      |L1.1238|
;;;575    	{
;;;576    		err_abs = 0xffffffff;
0003fa  e027              B        |L1.1100|
                  |L1.1020|
                          DCD      0x2009c000
                  |L1.1024|
                          DCD      UART3_tx_buf
                  |L1.1028|
                          DCD      0x4009c000
                  |L1.1032|
                          DCD      UART2_tx_buf
                  |L1.1036|
                          DCD      0x40098000
                  |L1.1040|
                          DCD      UART0_tx_buf
                  |L1.1044|
                          DCD      0x4000c000
                  |L1.1048|
                          DCD      printf_lock
                  |L1.1052|
                          DCD      uart_buf_printf
                  |L1.1056|
                          DCD      tx_buffer3
                  |L1.1060|
                          DCD      UART3_rx_buf
                  |L1.1064|
                          DCD      rx_buffer3
                  |L1.1068|
                          DCD      0x017d7840
                  |L1.1072|
                          DCD      0x400fc0c4
                  |L1.1076|
                          DCD      0x4002c000
                  |L1.1080|
                          DCD      tx_buffer2
                  |L1.1084|
                          DCD      UART2_rx_buf
                  |L1.1088|
                          DCD      rx_buffer2
                  |L1.1092|
                          DCD      UART2_rx_buf_copy
                  |L1.1096|
                          DCD      rx_buffer2_copy
                  |L1.1100|
00044c  f04f3aff          MOV      r10,#0xffffffff
;;;577    		/* find the best div,fra_div,fra_abs */
;;;578    		for(i=div; i>div/2; i--)
000450  4646              MOV      r6,r8
000452  e034              B        |L1.1214|
                  |L1.1108|
;;;579    		{
;;;580    		    for(j=0; j<15; j++)				/* DIVADDVAL */
000454  2500              MOVS     r5,#0
000456  e02f              B        |L1.1208|
                  |L1.1112|
;;;581    			{
;;;582    				for(k=j+1; k<16; k++)		/* MULVAL */
000458  1c68              ADDS     r0,r5,#1
00045a  b2c4              UXTB     r4,r0
00045c  e027              B        |L1.1198|
                  |L1.1118|
;;;583    				{
;;;584    					tmp_err_abs = DEF_ABS((int32_t)(((pclk_freq*k)/16/i/(k+j)) - baud)); 
00045e  fb09f004          MUL      r0,r9,r4
000462  0900              LSRS     r0,r0,#4
000464  fbb0f0f6          UDIV     r0,r0,r6
000468  1961              ADDS     r1,r4,r5
00046a  fbb0f0f1          UDIV     r0,r0,r1
00046e  1bc0              SUBS     r0,r0,r7
000470  d509              BPL      |L1.1158|
000472  fb09f004          MUL      r0,r9,r4
000476  0900              LSRS     r0,r0,#4
000478  fbb0f0f6          UDIV     r0,r0,r6
00047c  1961              ADDS     r1,r4,r5
00047e  fbb0f0f1          UDIV     r0,r0,r1
000482  1a38              SUBS     r0,r7,r0
000484  e008              B        |L1.1176|
                  |L1.1158|
000486  fb09f004          MUL      r0,r9,r4
00048a  0900              LSRS     r0,r0,#4
00048c  fbb0f0f6          UDIV     r0,r0,r6
000490  1961              ADDS     r1,r4,r5
000492  fbb0f0f1          UDIV     r0,r0,r1
000496  1bc0              SUBS     r0,r0,r7
                  |L1.1176|
000498  4683              MOV      r11,r0
;;;585    					if(tmp_err_abs < err_abs)
00049a  45d3              CMP      r11,r10
00049c  d203              BCS      |L1.1190|
;;;586    					{
;;;587    					    err_abs = tmp_err_abs;
00049e  46da              MOV      r10,r11
;;;588    						tmp_i = i;
0004a0  9604              STR      r6,[sp,#0x10]
;;;589    						tmp_j = j;
0004a2  9503              STR      r5,[sp,#0xc]
;;;590    						tmp_k = k;
0004a4  9402              STR      r4,[sp,#8]
                  |L1.1190|
;;;591    					}
;;;592    					if(j == 0)break; 
0004a6  b905              CBNZ     r5,|L1.1194|
0004a8  e003              B        |L1.1202|
                  |L1.1194|
0004aa  1c60              ADDS     r0,r4,#1              ;582
0004ac  b2c4              UXTB     r4,r0                 ;582
                  |L1.1198|
0004ae  2c10              CMP      r4,#0x10              ;582
0004b0  dbd5              BLT      |L1.1118|
                  |L1.1202|
0004b2  bf00              NOP      
0004b4  1c68              ADDS     r0,r5,#1              ;580
0004b6  b2c5              UXTB     r5,r0                 ;580
                  |L1.1208|
0004b8  2d0f              CMP      r5,#0xf               ;580
0004ba  dbcd              BLT      |L1.1112|
0004bc  1e76              SUBS     r6,r6,#1              ;578
                  |L1.1214|
0004be  eb0871d8          ADD      r1,r8,r8,LSR #31      ;578
0004c2  ebb60f61          CMP      r6,r1,ASR #1          ;578
0004c6  d8c5              BHI      |L1.1108|
;;;593    				}
;;;594    			}
;;;595    		}
;;;596    		div	= tmp_i;
0004c8  9804              LDR      r0,[sp,#0x10]
0004ca  fa1ff880          UXTH     r8,r0
;;;597    		fra_div	= tmp_j;
0004ce  9803              LDR      r0,[sp,#0xc]
0004d0  9001              STR      r0,[sp,#4]
;;;598    		fra_mul	= tmp_k;
0004d2  9802              LDR      r0,[sp,#8]
0004d4  9000              STR      r0,[sp,#0]
                  |L1.1238|
;;;599    	}
;;;600    
;;;601    	LPC_SC->PCONP |= 1<<24;	          /* enable UART2 clock source */
0004d6  48f7              LDR      r0,|L1.2228|
0004d8  6800              LDR      r0,[r0,#0]
0004da  f0407080          ORR      r0,r0,#0x1000000
0004de  49f5              LDR      r1,|L1.2228|
0004e0  39c4              SUBS     r1,r1,#0xc4
0004e2  f8c100c4          STR      r0,[r1,#0xc4]
;;;602    
;;;603    //	PINSEL0       &= ~(3<<20);            
;;;604    //    PINSEL0       |=   1<<20 ;	      /* uart2 TXD pin select */
;;;605    		//P2.8
;;;606      PINSEL4       &= ~(3<<16);            
0004e6  48f4              LDR      r0,|L1.2232|
0004e8  6900              LDR      r0,[r0,#0x10]
0004ea  f4203040          BIC      r0,r0,#0x30000
0004ee  49f2              LDR      r1,|L1.2232|
0004f0  6108              STR      r0,[r1,#0x10]
;;;607      PINSEL4       |=   2<<16 ;	      /* uart2 TXD pin select */
0004f2  4608              MOV      r0,r1
0004f4  6900              LDR      r0,[r0,#0x10]
0004f6  f4403000          ORR      r0,r0,#0x20000
0004fa  6108              STR      r0,[r1,#0x10]
;;;608    	
;;;609    	PINSEL0       &= ~(3<<22);            
0004fc  4608              MOV      r0,r1
0004fe  6800              LDR      r0,[r0,#0]
000500  f4200040          BIC      r0,r0,#0xc00000
000504  6008              STR      r0,[r1,#0]
;;;610    	PINSEL0       |=  (1<<22);		  /* uart2 RXD pin select */
000506  4608              MOV      r0,r1
000508  6800              LDR      r0,[r0,#0]
00050a  f4400080          ORR      r0,r0,#0x400000
00050e  6008              STR      r0,[r1,#0]
;;;611    	
;;;612    	
;;;613    
;;;614    	
;;;615    
;;;616    	LPC_UART2->LCR = SET_DLAB;
000510  2080              MOVS     r0,#0x80
000512  49ea              LDR      r1,|L1.2236|
000514  7308              STRB     r0,[r1,#0xc]
;;;617    	LPC_UART2->DLL = (uint8_t)(div&0x00ff);
000516  f8818000          STRB     r8,[r1,#0]
;;;618    	LPC_UART2->DLM = (uint8_t)((div>>8)&0x00ff);
00051a  ea4f2018          LSR      r0,r8,#8
00051e  7108              STRB     r0,[r1,#4]
;;;619    	LPC_UART2->FDR = (fra_div<<FDR_DIVADDVAL)|(fra_mul<<FDR_MULVAL);
000520  e9dd1000          LDRD     r1,r0,[sp,#0]
000524  ea401001          ORR      r0,r0,r1,LSL #4
000528  49e4              LDR      r1,|L1.2236|
00052a  3128              ADDS     r1,r1,#0x28
00052c  7008              STRB     r0,[r1,#0]
;;;620    	
;;;621    	/* LPC_UART2->TER 中发生使能位默认为1,无需再次设置发送使能位 */
;;;622    	LPC_UART2->LCR = 0x03;  /* DLAB = 0，diable access to 波特率,8N1 */
00052e  2003              MOVS     r0,#3
000530  49e2              LDR      r1,|L1.2236|
000532  7308              STRB     r0,[r1,#0xc]
;;;623    	LPC_UART2->IER = DEF_BIT_NONE;
000534  2000              MOVS     r0,#0
000536  6048              STR      r0,[r1,#4]
;;;624    	LPC_UART2->FCR = FIFO_ENABLE | RX_FIFO_RESET | TX_FIFO_RESET | RX_TRI_LS3; /* 14 bytes trigger */
000538  20c7              MOVS     r0,#0xc7
00053a  7208              STRB     r0,[r1,#8]
;;;625    	
;;;626    	LPC_UART2->IER |= IER_THRE_EN; //使能发送中断
00053c  4608              MOV      r0,r1
00053e  6840              LDR      r0,[r0,#4]
000540  f0400002          ORR      r0,r0,#2
000544  6048              STR      r0,[r1,#4]
;;;627      LPC_UART2->IER |= IER_RBR_EN;  //使能接收中断
000546  4608              MOV      r0,r1
000548  6840              LDR      r0,[r0,#4]
00054a  f0400001          ORR      r0,r0,#1
00054e  6048              STR      r0,[r1,#4]
;;;628    
;;;629    	NVIC_EnableIRQ(UART2_IRQn);;
000550  2007              MOVS     r0,#7
000552  f7fffffe          BL       NVIC_EnableIRQ
;;;630    
;;;631    	UART2_BufClr();
000556  f7fffffe          BL       UART2_BufClr
;;;632    	
;;;633    	Radar_RS485_RD_Init();
00055a  f7fffffe          BL       Radar_RS485_RD_Init
;;;634    	Radar_RS485_RD();
00055e  48d8              LDR      r0,|L1.2240|
000560  6bc0              LDR      r0,[r0,#0x3c]
000562  f0400001          ORR      r0,r0,#1
000566  49d6              LDR      r1,|L1.2240|
000568  63c8              STR      r0,[r1,#0x3c]
;;;635    }
00056a  b005              ADD      sp,sp,#0x14
00056c  e8bd8ff0          POP      {r4-r11,pc}
;;;636    
                          ENDP

                  UART1_BufClr PROC
;;;321    
;;;322    void UART1_BufClr(void)
000570  2000              MOVS     r0,#0
;;;323    {
;;;324      UART1_tx_buf.wrIdx = 0;
000572  49d4              LDR      r1,|L1.2244|
000574  6008              STR      r0,[r1,#0]  ; UART1_tx_buf
;;;325    	UART1_tx_buf.rdIdx = 0;
000576  6048              STR      r0,[r1,#4]  ; UART1_tx_buf
;;;326    	UART1_tx_buf.mask  = (uint32_t)(TX_BUFFER_SIZE1-1);
000578  20ff              MOVS     r0,#0xff
00057a  6088              STR      r0,[r1,#8]  ; UART1_tx_buf
;;;327    	UART1_tx_buf.pBuf  = &tx_buffer1[0];
00057c  48d2              LDR      r0,|L1.2248|
00057e  60c8              STR      r0,[r1,#0xc]  ; UART1_tx_buf
;;;328    
;;;329    	UART1_rx_buf.wrIdx = 0;
000580  2000              MOVS     r0,#0
000582  49d2              LDR      r1,|L1.2252|
000584  6008              STR      r0,[r1,#0]  ; UART1_rx_buf
;;;330    	UART1_rx_buf.rdIdx = 0;
000586  6048              STR      r0,[r1,#4]  ; UART1_rx_buf
;;;331    	UART1_rx_buf.mask  = (uint32_t)(RX_BUFFER_SIZE1-1);
000588  20ff              MOVS     r0,#0xff
00058a  6088              STR      r0,[r1,#8]  ; UART1_rx_buf
;;;332    	UART1_rx_buf.pBuf  = &rx_buffer1[0];	
00058c  48d0              LDR      r0,|L1.2256|
00058e  60c8              STR      r0,[r1,#0xc]  ; UART1_rx_buf
;;;333    }
000590  4770              BX       lr
;;;334    
                          ENDP

                  UART1_Init PROC
;;;340    
;;;341    static void UART1_Init( uint32_t baud )
000592  e92d4ff0          PUSH     {r4-r11,lr}
;;;342    {	
000596  b085              SUB      sp,sp,#0x14
000598  4607              MOV      r7,r0
;;;343    	uint32_t pclk_freq;
;;;344    	uint32_t i,err_abs,tmp_i,tmp_err_abs;
;;;345    	uint16_t div;
;;;346    	uint8_t j,k,tmp_j,tmp_k,fra_div,fra_mul;
;;;347    	
;;;348    	tmp_j = tmp_k = 0;
00059a  2000              MOVS     r0,#0
00059c  9002              STR      r0,[sp,#8]
00059e  9003              STR      r0,[sp,#0xc]
;;;349    	tmp_i = 0;
0005a0  9004              STR      r0,[sp,#0x10]
;;;350    	/* find Divisor and Fractional Divider */
;;;351    	/* 只四舍五入(误差大),要考虑小数位(误差小)*/
;;;352    	/* 1<=MULVAL>=15; 0<=DIVADDVAL>=14; DIVADDVAL<MULVAL */ 
;;;353    	pclk_freq = (25000000); 
0005a2  f8df9330          LDR      r9,|L1.2260|
;;;354        div = (uint16_t)(2*pclk_freq/16/baud + 1)/2; /* 四舍五入 */
0005a6  f3c901db          UBFX     r1,r9,#3,#28
0005aa  fbb1f1f7          UDIV     r1,r1,r7
0005ae  1c49              ADDS     r1,r1,#1
0005b0  b288              UXTH     r0,r1
0005b2  eb0071d0          ADD      r1,r0,r0,LSR #31
0005b6  ea4f0861          ASR      r8,r1,#1
;;;355    	
;;;356    	fra_div = 0;
0005ba  2000              MOVS     r0,#0
0005bc  9001              STR      r0,[sp,#4]
;;;357        fra_mul = 1;
0005be  2001              MOVS     r0,#1
0005c0  9000              STR      r0,[sp,#0]
;;;358    	if((pclk_freq/16/div) != baud)	 /* integer ?*/
0005c2  ea4f1019          LSR      r0,r9,#4
0005c6  fbb0f0f8          UDIV     r0,r0,r8
0005ca  42b8              CMP      r0,r7
0005cc  d044              BEQ      |L1.1624|
;;;359    	{
;;;360    		err_abs = 0xffffffff;
0005ce  f04f3aff          MOV      r10,#0xffffffff
;;;361    		/* find the best div,fra_div,fra_abs */
;;;362    		for(i=div; i>div/2; i--)
0005d2  4646              MOV      r6,r8
0005d4  e034              B        |L1.1600|
                  |L1.1494|
;;;363    		{
;;;364    		    for(j=0; j<15; j++)				/* DIVADDVAL */
0005d6  2500              MOVS     r5,#0
0005d8  e02f              B        |L1.1594|
                  |L1.1498|
;;;365    			{
;;;366    				for(k=j+1; k<16; k++)		/* MULVAL */
0005da  1c68              ADDS     r0,r5,#1
0005dc  b2c4              UXTB     r4,r0
0005de  e027              B        |L1.1584|
                  |L1.1504|
;;;367    				{
;;;368    					tmp_err_abs = DEF_ABS((int32_t)(((pclk_freq*k)/16/i/(k+j)) - baud)); 
0005e0  fb09f004          MUL      r0,r9,r4
0005e4  0900              LSRS     r0,r0,#4
0005e6  fbb0f0f6          UDIV     r0,r0,r6
0005ea  1961              ADDS     r1,r4,r5
0005ec  fbb0f0f1          UDIV     r0,r0,r1
0005f0  1bc0              SUBS     r0,r0,r7
0005f2  d509              BPL      |L1.1544|
0005f4  fb09f004          MUL      r0,r9,r4
0005f8  0900              LSRS     r0,r0,#4
0005fa  fbb0f0f6          UDIV     r0,r0,r6
0005fe  1961              ADDS     r1,r4,r5
000600  fbb0f0f1          UDIV     r0,r0,r1
000604  1a38              SUBS     r0,r7,r0
000606  e008              B        |L1.1562|
                  |L1.1544|
000608  fb09f004          MUL      r0,r9,r4
00060c  0900              LSRS     r0,r0,#4
00060e  fbb0f0f6          UDIV     r0,r0,r6
000612  1961              ADDS     r1,r4,r5
000614  fbb0f0f1          UDIV     r0,r0,r1
000618  1bc0              SUBS     r0,r0,r7
                  |L1.1562|
00061a  4683              MOV      r11,r0
;;;369    					if(tmp_err_abs < err_abs)
00061c  45d3              CMP      r11,r10
00061e  d203              BCS      |L1.1576|
;;;370    					{
;;;371    					    err_abs = tmp_err_abs;
000620  46da              MOV      r10,r11
;;;372    						tmp_i = i;
000622  9604              STR      r6,[sp,#0x10]
;;;373    						tmp_j = j;
000624  9503              STR      r5,[sp,#0xc]
;;;374    						tmp_k = k;
000626  9402              STR      r4,[sp,#8]
                  |L1.1576|
;;;375    					}
;;;376    					if(j == 0)break; 
000628  b905              CBNZ     r5,|L1.1580|
00062a  e003              B        |L1.1588|
                  |L1.1580|
00062c  1c60              ADDS     r0,r4,#1              ;366
00062e  b2c4              UXTB     r4,r0                 ;366
                  |L1.1584|
000630  2c10              CMP      r4,#0x10              ;366
000632  dbd5              BLT      |L1.1504|
                  |L1.1588|
000634  bf00              NOP      
000636  1c68              ADDS     r0,r5,#1              ;364
000638  b2c5              UXTB     r5,r0                 ;364
                  |L1.1594|
00063a  2d0f              CMP      r5,#0xf               ;364
00063c  dbcd              BLT      |L1.1498|
00063e  1e76              SUBS     r6,r6,#1              ;362
                  |L1.1600|
000640  eb0871d8          ADD      r1,r8,r8,LSR #31      ;362
000644  ebb60f61          CMP      r6,r1,ASR #1          ;362
000648  d8c5              BHI      |L1.1494|
;;;377    				}
;;;378    			}
;;;379    		}
;;;380    		div	= tmp_i;
00064a  9804              LDR      r0,[sp,#0x10]
00064c  fa1ff880          UXTH     r8,r0
;;;381    		fra_div	= tmp_j;
000650  9803              LDR      r0,[sp,#0xc]
000652  9001              STR      r0,[sp,#4]
;;;382    		fra_mul	= tmp_k;
000654  9802              LDR      r0,[sp,#8]
000656  9000              STR      r0,[sp,#0]
                  |L1.1624|
;;;383    	}
;;;384    
;;;385    	LPC_SC->PCONP       |=  1<<4;	          /* enable UART1 clock source */
000658  4896              LDR      r0,|L1.2228|
00065a  6800              LDR      r0,[r0,#0]
00065c  f0400010          ORR      r0,r0,#0x10
000660  4994              LDR      r1,|L1.2228|
000662  39c4              SUBS     r1,r1,#0xc4
000664  f8c100c4          STR      r0,[r1,#0xc4]
;;;386    
;;;387    	PINSEL4 &= ~(0x03<<0);            
000668  4893              LDR      r0,|L1.2232|
00066a  6900              LDR      r0,[r0,#0x10]
00066c  f0200003          BIC      r0,r0,#3
000670  4991              LDR      r1,|L1.2232|
000672  6108              STR      r0,[r1,#0x10]
;;;388    	PINSEL4 |=   0x02<<0 ;			  /* uart1 TXD pin select */
000674  4608              MOV      r0,r1
000676  6900              LDR      r0,[r0,#0x10]
000678  f0400002          ORR      r0,r0,#2
00067c  6108              STR      r0,[r1,#0x10]
;;;389    	PINSEL4 &= ~(0x03<<2);            
00067e  4608              MOV      r0,r1
000680  6900              LDR      r0,[r0,#0x10]
000682  f020000c          BIC      r0,r0,#0xc
000686  6108              STR      r0,[r1,#0x10]
;;;390    	PINSEL4 |=  (0x02<<2);			  /* uart1 RXD pin select */
000688  4608              MOV      r0,r1
00068a  6900              LDR      r0,[r0,#0x10]
00068c  f0400008          ORR      r0,r0,#8
000690  6108              STR      r0,[r1,#0x10]
;;;391    
;;;392    	LPC_UART1->LCR = SET_DLAB;
000692  2080              MOVS     r0,#0x80
000694  4990              LDR      r1,|L1.2264|
000696  7308              STRB     r0,[r1,#0xc]
;;;393    	LPC_UART1->DLL = (uint8_t)(div&0x00ff);
000698  f8818000          STRB     r8,[r1,#0]
;;;394    	LPC_UART1->DLM = (uint8_t)((div>>8)&0x00ff);
00069c  ea4f2018          LSR      r0,r8,#8
0006a0  7108              STRB     r0,[r1,#4]
;;;395    	LPC_UART1->FDR = (fra_div<<FDR_DIVADDVAL)|(fra_mul<<FDR_MULVAL);
0006a2  e9dd1000          LDRD     r1,r0,[sp,#0]
0006a6  ea401001          ORR      r0,r0,r1,LSL #4
0006aa  498b              LDR      r1,|L1.2264|
0006ac  6288              STR      r0,[r1,#0x28]
;;;396    	
;;;397    	/* LPC_UART0->TER 中发生使能位默认为1,无需再次设置发送使能位 */
;;;398    	LPC_UART1->LCR = 0x03;  /* DLAB = 0，diable access to 波特率,8N1 */
0006ae  2003              MOVS     r0,#3
0006b0  7308              STRB     r0,[r1,#0xc]
;;;399    	LPC_UART1->IER = DEF_BIT_NONE;
0006b2  2000              MOVS     r0,#0
0006b4  6048              STR      r0,[r1,#4]
;;;400    	LPC_UART1->FCR = FIFO_ENABLE | RX_FIFO_RESET | TX_FIFO_RESET | RX_TRI_LS3; /* 14 bytes trigger */
0006b6  20c7              MOVS     r0,#0xc7
0006b8  7208              STRB     r0,[r1,#8]
;;;401    
;;;402      LPC_UART1->IER |= IER_RBR_EN;  //使能接收中断
0006ba  4608              MOV      r0,r1
0006bc  6840              LDR      r0,[r0,#4]
0006be  f0400001          ORR      r0,r0,#1
0006c2  6048              STR      r0,[r1,#4]
;;;403    	LPC_UART1->IER |= IER_THRE_EN; //使能发送中断
0006c4  4608              MOV      r0,r1
0006c6  6840              LDR      r0,[r0,#4]
0006c8  f0400002          ORR      r0,r0,#2
0006cc  6048              STR      r0,[r1,#4]
;;;404    	NVIC_EnableIRQ(UART1_IRQn);
0006ce  2006              MOVS     r0,#6
0006d0  f7fffffe          BL       NVIC_EnableIRQ
;;;405    
;;;406    	UART1_BufClr();
0006d4  f7fffffe          BL       UART1_BufClr
;;;407    	//RS485_RD_Init();
;;;408    }
0006d8  b005              ADD      sp,sp,#0x14
0006da  e8bd8ff0          POP      {r4-r11,pc}
;;;409    
                          ENDP

                  UART0_BufClr PROC
;;;211    
;;;212    void UART0_BufClr(void)
0006de  2000              MOVS     r0,#0
;;;213    {
;;;214      UART0_tx_buf.wrIdx = 0;
0006e0  497e              LDR      r1,|L1.2268|
0006e2  6008              STR      r0,[r1,#0]  ; UART0_tx_buf
;;;215    	UART0_tx_buf.rdIdx = 0;
0006e4  6048              STR      r0,[r1,#4]  ; UART0_tx_buf
;;;216    	UART0_tx_buf.mask  = (uint32_t)(TX_BUFFER_SIZE0-1);
0006e6  20ff              MOVS     r0,#0xff
0006e8  6088              STR      r0,[r1,#8]  ; UART0_tx_buf
;;;217    	UART0_tx_buf.pBuf  = &tx_buffer0[0];
0006ea  487d              LDR      r0,|L1.2272|
0006ec  60c8              STR      r0,[r1,#0xc]  ; UART0_tx_buf
;;;218    
;;;219    	UART0_rx_buf.wrIdx = 0;
0006ee  2000              MOVS     r0,#0
0006f0  497c              LDR      r1,|L1.2276|
0006f2  6008              STR      r0,[r1,#0]  ; UART0_rx_buf
;;;220    	UART0_rx_buf.rdIdx = 0;
0006f4  6048              STR      r0,[r1,#4]  ; UART0_rx_buf
;;;221    	UART0_rx_buf.mask  = (uint32_t)(RX_BUFFER_SIZE0-1);
0006f6  20ff              MOVS     r0,#0xff
0006f8  6088              STR      r0,[r1,#8]  ; UART0_rx_buf
;;;222    	UART0_rx_buf.pBuf  = &rx_buffer0[0];	
0006fa  487b              LDR      r0,|L1.2280|
0006fc  60c8              STR      r0,[r1,#0xc]  ; UART0_rx_buf
;;;223    }
0006fe  4770              BX       lr
;;;224    
                          ENDP

                  UART0_Init PROC
;;;143     */
;;;144    static void UART0_Init( uint32_t baud )
000700  e92d4ff0          PUSH     {r4-r11,lr}
;;;145    {	
000704  b085              SUB      sp,sp,#0x14
000706  4607              MOV      r7,r0
;;;146    	uint32_t pclk_freq;
;;;147    	uint32_t i,err_abs,tmp_i,tmp_err_abs;
;;;148    	uint16_t div;
;;;149    	uint8_t j,k,tmp_j,tmp_k,fra_div,fra_mul;
;;;150    	
;;;151    	tmp_j = tmp_k = 0;
000708  2000              MOVS     r0,#0
00070a  9002              STR      r0,[sp,#8]
00070c  9003              STR      r0,[sp,#0xc]
;;;152    	tmp_i = 0;
00070e  9004              STR      r0,[sp,#0x10]
;;;153    	/* find Divisor and Fractional Divider */
;;;154    	/* 只四舍五入(误差大),要考虑小数位(误差小)*/
;;;155    	/* 1<=MULVAL>=15; 0<=DIVADDVAL>=14; DIVADDVAL<MULVAL */ 
;;;156    	pclk_freq = (25000000); 
000710  f8df91c0          LDR      r9,|L1.2260|
;;;157        div = (uint16_t)(2*pclk_freq/16/baud + 1)/2; /* 四舍五入 */
000714  f3c901db          UBFX     r1,r9,#3,#28
000718  fbb1f1f7          UDIV     r1,r1,r7
00071c  1c49              ADDS     r1,r1,#1
00071e  b288              UXTH     r0,r1
000720  eb0071d0          ADD      r1,r0,r0,LSR #31
000724  ea4f0861          ASR      r8,r1,#1
;;;158    	
;;;159    	fra_div = 0;
000728  2000              MOVS     r0,#0
00072a  9001              STR      r0,[sp,#4]
;;;160        fra_mul = 1;
00072c  2001              MOVS     r0,#1
00072e  9000              STR      r0,[sp,#0]
;;;161    	if((pclk_freq/16/div) != baud)	 /* integer ?*/
000730  ea4f1019          LSR      r0,r9,#4
000734  fbb0f0f8          UDIV     r0,r0,r8
000738  42b8              CMP      r0,r7
00073a  d044              BEQ      |L1.1990|
;;;162    	{
;;;163    		err_abs = 0xffffffff;
00073c  f04f3aff          MOV      r10,#0xffffffff
;;;164    		/* find the best div,fra_div,fra_abs */
;;;165    		for(i=div; i>div/2; i--)
000740  4646              MOV      r6,r8
000742  e034              B        |L1.1966|
                  |L1.1860|
;;;166    		{
;;;167    		    for(j=0; j<15; j++)				/* DIVADDVAL */
000744  2500              MOVS     r5,#0
000746  e02f              B        |L1.1960|
                  |L1.1864|
;;;168    			{
;;;169    				for(k=j+1; k<16; k++)		/* MULVAL */
000748  1c68              ADDS     r0,r5,#1
00074a  b2c4              UXTB     r4,r0
00074c  e027              B        |L1.1950|
                  |L1.1870|
;;;170    				{
;;;171    					tmp_err_abs = DEF_ABS((int32_t)(((pclk_freq*k)/16/i/(k+j)) - baud)); 
00074e  fb09f004          MUL      r0,r9,r4
000752  0900              LSRS     r0,r0,#4
000754  fbb0f0f6          UDIV     r0,r0,r6
000758  1961              ADDS     r1,r4,r5
00075a  fbb0f0f1          UDIV     r0,r0,r1
00075e  1bc0              SUBS     r0,r0,r7
000760  d509              BPL      |L1.1910|
000762  fb09f004          MUL      r0,r9,r4
000766  0900              LSRS     r0,r0,#4
000768  fbb0f0f6          UDIV     r0,r0,r6
00076c  1961              ADDS     r1,r4,r5
00076e  fbb0f0f1          UDIV     r0,r0,r1
000772  1a38              SUBS     r0,r7,r0
000774  e008              B        |L1.1928|
                  |L1.1910|
000776  fb09f004          MUL      r0,r9,r4
00077a  0900              LSRS     r0,r0,#4
00077c  fbb0f0f6          UDIV     r0,r0,r6
000780  1961              ADDS     r1,r4,r5
000782  fbb0f0f1          UDIV     r0,r0,r1
000786  1bc0              SUBS     r0,r0,r7
                  |L1.1928|
000788  4683              MOV      r11,r0
;;;172    					if(tmp_err_abs < err_abs)
00078a  45d3              CMP      r11,r10
00078c  d203              BCS      |L1.1942|
;;;173    					{
;;;174    					    err_abs = tmp_err_abs;
00078e  46da              MOV      r10,r11
;;;175    						tmp_i = i;
000790  9604              STR      r6,[sp,#0x10]
;;;176    						tmp_j = j;
000792  9503              STR      r5,[sp,#0xc]
;;;177    						tmp_k = k;
000794  9402              STR      r4,[sp,#8]
                  |L1.1942|
;;;178    					}
;;;179    					if(j == 0)break; 
000796  b905              CBNZ     r5,|L1.1946|
000798  e003              B        |L1.1954|
                  |L1.1946|
00079a  1c60              ADDS     r0,r4,#1              ;169
00079c  b2c4              UXTB     r4,r0                 ;169
                  |L1.1950|
00079e  2c10              CMP      r4,#0x10              ;169
0007a0  dbd5              BLT      |L1.1870|
                  |L1.1954|
0007a2  bf00              NOP      
0007a4  1c68              ADDS     r0,r5,#1              ;167
0007a6  b2c5              UXTB     r5,r0                 ;167
                  |L1.1960|
0007a8  2d0f              CMP      r5,#0xf               ;167
0007aa  dbcd              BLT      |L1.1864|
0007ac  1e76              SUBS     r6,r6,#1              ;165
                  |L1.1966|
0007ae  eb0871d8          ADD      r1,r8,r8,LSR #31      ;165
0007b2  ebb60f61          CMP      r6,r1,ASR #1          ;165
0007b6  d8c5              BHI      |L1.1860|
;;;180    				}
;;;181    			}
;;;182    		}
;;;183    		div	= tmp_i;
0007b8  9804              LDR      r0,[sp,#0x10]
0007ba  fa1ff880          UXTH     r8,r0
;;;184    		fra_div	= tmp_j;
0007be  9803              LDR      r0,[sp,#0xc]
0007c0  9001              STR      r0,[sp,#4]
;;;185    		fra_mul	= tmp_k;
0007c2  9802              LDR      r0,[sp,#8]
0007c4  9000              STR      r0,[sp,#0]
                  |L1.1990|
;;;186    	}
;;;187    
;;;188    	LPC_SC->PCONP       |=  1<<3;	          /* enable UART0 clock source */
0007c6  483b              LDR      r0,|L1.2228|
0007c8  6800              LDR      r0,[r0,#0]
0007ca  f0400008          ORR      r0,r0,#8
0007ce  4939              LDR      r1,|L1.2228|
0007d0  39c4              SUBS     r1,r1,#0xc4
0007d2  f8c100c4          STR      r0,[r1,#0xc4]
;;;189    
;;;190    	PINSEL0 &= ~(3<<4);            
0007d6  4838              LDR      r0,|L1.2232|
0007d8  6800              LDR      r0,[r0,#0]
0007da  f0200030          BIC      r0,r0,#0x30
0007de  4936              LDR      r1,|L1.2232|
0007e0  6008              STR      r0,[r1,#0]
;;;191    	PINSEL0 |=   1<<4 ;			  /* uart0 TXD pin select */
0007e2  4608              MOV      r0,r1
0007e4  6800              LDR      r0,[r0,#0]
0007e6  f0400010          ORR      r0,r0,#0x10
0007ea  6008              STR      r0,[r1,#0]
;;;192    	PINSEL0 &= ~(3<<6);            
0007ec  4608              MOV      r0,r1
0007ee  6800              LDR      r0,[r0,#0]
0007f0  f02000c0          BIC      r0,r0,#0xc0
0007f4  6008              STR      r0,[r1,#0]
;;;193    	PINSEL0 |=  (1<<6);			  /* uart0 RXD pin select */
0007f6  4608              MOV      r0,r1
0007f8  6800              LDR      r0,[r0,#0]
0007fa  f0400040          ORR      r0,r0,#0x40
0007fe  6008              STR      r0,[r1,#0]
;;;194    
;;;195    	LPC_UART0->LCR = SET_DLAB;
000800  2080              MOVS     r0,#0x80
000802  493a              LDR      r1,|L1.2284|
000804  7308              STRB     r0,[r1,#0xc]
;;;196    	LPC_UART0->DLL = (uint8_t)(div&0x00ff);
000806  f8818000          STRB     r8,[r1,#0]
;;;197    	LPC_UART0->DLM = (uint8_t)((div>>8)&0x00ff);
00080a  ea4f2018          LSR      r0,r8,#8
00080e  7108              STRB     r0,[r1,#4]
;;;198    	LPC_UART0->FDR = (fra_div<<FDR_DIVADDVAL)|(fra_mul<<FDR_MULVAL);
000810  e9dd1000          LDRD     r1,r0,[sp,#0]
000814  ea401001          ORR      r0,r0,r1,LSL #4
000818  4934              LDR      r1,|L1.2284|
00081a  3128              ADDS     r1,r1,#0x28
00081c  7008              STRB     r0,[r1,#0]
;;;199    	
;;;200    	/* LPC_UART0->TER 中发生使能位默认为1,无需再次设置发送使能位 */
;;;201    	LPC_UART0->LCR = 0x03;  /* DLAB = 0，diable access to 波特率,8N1 */
00081e  2003              MOVS     r0,#3
000820  4932              LDR      r1,|L1.2284|
000822  7308              STRB     r0,[r1,#0xc]
;;;202    	LPC_UART0->IER = DEF_BIT_NONE;
000824  2000              MOVS     r0,#0
000826  6048              STR      r0,[r1,#4]
;;;203    	LPC_UART0->FCR = FIFO_ENABLE | RX_FIFO_RESET | TX_FIFO_RESET | RX_TRI_LS3; /* 14 bytes trigger */
000828  20c7              MOVS     r0,#0xc7
00082a  7208              STRB     r0,[r1,#8]
;;;204    
;;;205      LPC_UART0->IER |= IER_RBR_EN;  //使能接收中断
00082c  4608              MOV      r0,r1
00082e  6840              LDR      r0,[r0,#4]
000830  f0400001          ORR      r0,r0,#1
000834  6048              STR      r0,[r1,#4]
;;;206    	LPC_UART0->IER |= IER_THRE_EN; //使能发送中断
000836  4608              MOV      r0,r1
000838  6840              LDR      r0,[r0,#4]
00083a  f0400002          ORR      r0,r0,#2
00083e  6048              STR      r0,[r1,#4]
;;;207    	NVIC_EnableIRQ(UART0_IRQn);
000840  2005              MOVS     r0,#5
000842  f7fffffe          BL       NVIC_EnableIRQ
;;;208    
;;;209    	UART0_BufClr();
000846  f7fffffe          BL       UART0_BufClr
;;;210    }
00084a  b005              ADD      sp,sp,#0x14
00084c  e8bd8ff0          POP      {r4-r11,pc}
;;;211    
                          ENDP

                  UARTS_Init PROC
;;;113     */
;;;114    void UARTS_Init(void)
000850  b510              PUSH     {r4,lr}
;;;115    {
;;;116    #if UART0_EN > 0
;;;117        UART0_Init( 115200 );
000852  f44f30e1          MOV      r0,#0x1c200
000856  f7fffffe          BL       UART0_Init
;;;118    #endif
;;;119    
;;;120    #if UART1_EN > 0
;;;121        UART1_Init( 115200 );
00085a  f44f30e1          MOV      r0,#0x1c200
00085e  f7fffffe          BL       UART1_Init
;;;122    #endif
;;;123    
;;;124    #if UART2_EN > 0
;;;125    	 UART2_Init( 115200);
000862  f44f30e1          MOV      r0,#0x1c200
000866  f7fffffe          BL       UART2_Init
;;;126    #endif
;;;127    
;;;128    #if UART3_EN > 0
;;;129       UART3_Init( 115200 );
00086a  f44f30e1          MOV      r0,#0x1c200
00086e  f7fffffe          BL       UART3_Init
;;;130    #endif
;;;131    }
000872  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  UART0_putchar PROC
;;;225    /* polling r&w */
;;;226    void UART0_putchar(uint8_t c)
000874  491d              LDR      r1,|L1.2284|
;;;227    {
;;;228    	LPC_UART0->THR = c;	       
000876  7008              STRB     r0,[r1,#0]
;;;229        while( (LPC_UART0->LSR & LSR_TEMT) == 0 );  
000878  bf00              NOP      
                  |L1.2170|
00087a  491c              LDR      r1,|L1.2284|
00087c  7d09              LDRB     r1,[r1,#0x14]
00087e  f0010140          AND      r1,r1,#0x40
000882  2900              CMP      r1,#0
000884  d0f9              BEQ      |L1.2170|
;;;230    }
000886  4770              BX       lr
;;;231    
                          ENDP

                  UART0_getchar PROC
;;;232    uint8_t UART0_getchar(void)
000888  bf00              NOP      
                  |L1.2186|
;;;233    {
;;;234        while( (LPC_UART0->LSR&LSR_RDR) == 0 );
00088a  4818              LDR      r0,|L1.2284|
00088c  7d00              LDRB     r0,[r0,#0x14]
00088e  f0000001          AND      r0,r0,#1
000892  2800              CMP      r0,#0
000894  d0f9              BEQ      |L1.2186|
;;;235    	return LPC_UART0->RBR;
000896  4815              LDR      r0,|L1.2284|
000898  7800              LDRB     r0,[r0,#0]
;;;236    }
00089a  4770              BX       lr
;;;237    
                          ENDP

                  UART0_send_pack PROC
;;;250    
;;;251    void UART0_send_pack(uint8_t *buf,uint16_t len)
00089c  e92d41f0          PUSH     {r4-r8,lr}
;;;252    {
0008a0  4605              MOV      r5,r0
0008a2  460c              MOV      r4,r1
;;;253        uint16_t wrNum;
;;;254    	CPU_SR_ALLOC();
0008a4  2700              MOVS     r7,#0
;;;255        
;;;256    	if(len>TX_BUFFER_SIZE0)return;
0008a6  f5b47f80          CMP      r4,#0x100
0008aa  dd01              BLE      |L1.2224|
                  |L1.2220|
;;;257    	
;;;258    	for(;len>0;)
;;;259    	{	
;;;260    	    while(RING_BUF_COUNT(UART0_tx_buf) >= (uint32_t)TX_BUFFER_SIZE0-16);  /* 不会锁死 */
;;;261    	    wrNum = TX_BUFFER_SIZE0 - RING_BUF_COUNT(UART0_tx_buf); /* buf could be writed */
;;;262    		if(wrNum>len)
;;;263    		{
;;;264    		    wrNum = len;
;;;265    		} 
;;;266    		 
;;;267    		len -= wrNum;
;;;268    		CPU_CRITICAL_ENTER(); 
;;;269    		while(wrNum--)
;;;270    		{    
;;;271    	        RING_BUF_WR(UART0_tx_buf,*buf++);	
;;;272    		}
;;;273    		if ( ((LPC_UART0->LSR&LSR_THRE) != 0) )LPC_UART0->THR = RING_BUF_RD(UART0_tx_buf); 
;;;274    		CPU_CRITICAL_EXIT();
;;;275    	}
;;;276    }
0008ac  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2224|
0008b0  e062              B        |L1.2424|
0008b2  0000              DCW      0x0000
                  |L1.2228|
                          DCD      0x400fc0c4
                  |L1.2232|
                          DCD      0x4002c000
                  |L1.2236|
                          DCD      0x40098000
                  |L1.2240|
                          DCD      0x2009c000
                  |L1.2244|
                          DCD      UART1_tx_buf
                  |L1.2248|
                          DCD      tx_buffer1
                  |L1.2252|
                          DCD      UART1_rx_buf
                  |L1.2256|
                          DCD      rx_buffer1
                  |L1.2260|
                          DCD      0x017d7840
                  |L1.2264|
                          DCD      0x40010000
                  |L1.2268|
                          DCD      UART0_tx_buf
                  |L1.2272|
                          DCD      tx_buffer0
                  |L1.2276|
                          DCD      UART0_rx_buf
                  |L1.2280|
                          DCD      rx_buffer0
                  |L1.2284|
                          DCD      0x4000c000
                  |L1.2288|
0008f0  bf00              NOP                            ;260
                  |L1.2290|
0008f2  48fe              LDR      r0,|L1.3308|
0008f4  6800              LDR      r0,[r0,#0]            ;260  ; UART0_tx_buf
0008f6  49fd              LDR      r1,|L1.3308|
0008f8  6849              LDR      r1,[r1,#4]            ;260  ; UART0_tx_buf
0008fa  1a40              SUBS     r0,r0,r1              ;260
0008fc  49fb              LDR      r1,|L1.3308|
0008fe  6889              LDR      r1,[r1,#8]            ;260  ; UART0_tx_buf
000900  4008              ANDS     r0,r0,r1              ;260
000902  28f0              CMP      r0,#0xf0              ;260
000904  d2f5              BCS      |L1.2290|
000906  48f9              LDR      r0,|L1.3308|
000908  6800              LDR      r0,[r0,#0]            ;261  ; UART0_tx_buf
00090a  49f8              LDR      r1,|L1.3308|
00090c  6849              LDR      r1,[r1,#4]            ;261  ; UART0_tx_buf
00090e  1a40              SUBS     r0,r0,r1              ;261
000910  49f6              LDR      r1,|L1.3308|
000912  6889              LDR      r1,[r1,#8]            ;261  ; UART0_tx_buf
000914  4008              ANDS     r0,r0,r1              ;261
000916  f5c07080          RSB      r0,r0,#0x100          ;261
00091a  b286              UXTH     r6,r0                 ;261
00091c  42a6              CMP      r6,r4                 ;262
00091e  dd00              BLE      |L1.2338|
000920  4626              MOV      r6,r4                 ;264
                  |L1.2338|
000922  1ba0              SUBS     r0,r4,r6              ;267
000924  b284              UXTH     r4,r0                 ;267
000926  f7fffffe          BL       CPU_SR_Save
00092a  4607              MOV      r7,r0                 ;268
00092c  e00b              B        |L1.2374|
                  |L1.2350|
00092e  f8152b01          LDRB     r2,[r5],#1            ;271
000932  49ee              LDR      r1,|L1.3308|
000934  6808              LDR      r0,[r1,#0]            ;271  ; UART0_tx_buf
000936  1c41              ADDS     r1,r0,#1              ;271
000938  4bec              LDR      r3,|L1.3308|
00093a  6019              STR      r1,[r3,#0]            ;271  ; UART0_tx_buf
00093c  4619              MOV      r1,r3                 ;271
00093e  6889              LDR      r1,[r1,#8]            ;271  ; UART0_tx_buf
000940  4001              ANDS     r1,r1,r0              ;271
000942  68db              LDR      r3,[r3,#0xc]          ;271  ; UART0_tx_buf
000944  545a              STRB     r2,[r3,r1]            ;271
                  |L1.2374|
000946  1e30              SUBS     r0,r6,#0              ;269
000948  f1a60101          SUB      r1,r6,#1              ;269
00094c  b28e              UXTH     r6,r1                 ;269
00094e  d1ee              BNE      |L1.2350|
000950  48e7              LDR      r0,|L1.3312|
000952  7d00              LDRB     r0,[r0,#0x14]         ;273
000954  f0000020          AND      r0,r0,#0x20           ;273
000958  b158              CBZ      r0,|L1.2418|
00095a  49e4              LDR      r1,|L1.3308|
00095c  6848              LDR      r0,[r1,#4]            ;273  ; UART0_tx_buf
00095e  1c41              ADDS     r1,r0,#1              ;273
000960  4ae2              LDR      r2,|L1.3308|
000962  6051              STR      r1,[r2,#4]            ;273  ; UART0_tx_buf
000964  4611              MOV      r1,r2                 ;273
000966  6889              LDR      r1,[r1,#8]            ;273  ; UART0_tx_buf
000968  4001              ANDS     r1,r1,r0              ;273
00096a  68d2              LDR      r2,[r2,#0xc]          ;273  ; UART0_tx_buf
00096c  5c51              LDRB     r1,[r2,r1]            ;273
00096e  4ae0              LDR      r2,|L1.3312|
000970  7011              STRB     r1,[r2,#0]            ;273
                  |L1.2418|
000972  4638              MOV      r0,r7                 ;274
000974  f7fffffe          BL       CPU_SR_Restore
                  |L1.2424|
000978  2c00              CMP      r4,#0                 ;258
00097a  dcb9              BGT      |L1.2288|
00097c  bf00              NOP      
00097e  e795              B        |L1.2220|
;;;277    
                          ENDP

                  UART0_IRQHandler PROC
;;;278    void UART0_IRQHandler(void) 
000980  b530              PUSH     {r4,r5,lr}
;;;279    {
;;;280        uint8_t reg_iir,i;
;;;281    	 
;;;282    	reg_iir = (uint8_t)(LPC_UART0->IIR & 0x0F);
000982  4adb              LDR      r2,|L1.3312|
000984  6892              LDR      r2,[r2,#8]
000986  f002000f          AND      r0,r2,#0xf
;;;283    	
;;;284    	if(reg_iir != 1)
00098a  2801              CMP      r0,#1
00098c  d03d              BEQ      |L1.2570|
;;;285    	{
;;;286    		reg_iir = reg_iir >> 1;
00098e  1040              ASRS     r0,r0,#1
;;;287    		switch(reg_iir)
000990  2801              CMP      r0,#1
000992  d01c              BEQ      |L1.2510|
000994  2802              CMP      r0,#2
000996  d005              BEQ      |L1.2468|
000998  2803              CMP      r0,#3
00099a  d002              BEQ      |L1.2466|
00099c  2806              CMP      r0,#6
00099e  d132              BNE      |L1.2566|
0009a0  e001              B        |L1.2470|
                  |L1.2466|
;;;288    		{
;;;289    		    case 0x3: /* Highest */
;;;290    			{
;;;291    			
;;;292    			}
;;;293    			break;
0009a2  e031              B        |L1.2568|
                  |L1.2468|
;;;294    			case 0x2: /* Second */
;;;295    			case 0x6:
0009a4  bf00              NOP      
                  |L1.2470|
;;;296    			{
;;;297    				while(LPC_UART0->LSR & LSR_RDR)
0009a6  e00b              B        |L1.2496|
                  |L1.2472|
;;;298    				{
;;;299    					RING_BUF_WR(UART0_rx_buf,LPC_UART0->RBR);	
0009a8  4bd1              LDR      r3,|L1.3312|
0009aa  781c              LDRB     r4,[r3,#0]
0009ac  4bd1              LDR      r3,|L1.3316|
0009ae  681a              LDR      r2,[r3,#0]  ; UART0_rx_buf
0009b0  1c53              ADDS     r3,r2,#1
0009b2  4dd0              LDR      r5,|L1.3316|
0009b4  602b              STR      r3,[r5,#0]  ; UART0_rx_buf
0009b6  462b              MOV      r3,r5
0009b8  689b              LDR      r3,[r3,#8]  ; UART0_rx_buf
0009ba  4013              ANDS     r3,r3,r2
0009bc  68ed              LDR      r5,[r5,#0xc]  ; UART0_rx_buf
0009be  54ec              STRB     r4,[r5,r3]
                  |L1.2496|
0009c0  4acb              LDR      r2,|L1.3312|
0009c2  7d12              LDRB     r2,[r2,#0x14]         ;297
0009c4  f0020201          AND      r2,r2,#1              ;297
0009c8  2a00              CMP      r2,#0                 ;297
0009ca  d1ed              BNE      |L1.2472|
;;;300    				}
;;;301    			}
;;;302    			break;
0009cc  e01c              B        |L1.2568|
                  |L1.2510|
;;;303    			case 0x1:  /* Third */
;;;304    			{
;;;305    			    i = 16;
0009ce  2110              MOVS     r1,#0x10
;;;306    				while (i && RING_BUF_COUNT(UART0_tx_buf))
0009d0  e00d              B        |L1.2542|
                  |L1.2514|
;;;307                    {
;;;308                        i--;
0009d2  1e4a              SUBS     r2,r1,#1
0009d4  b2d1              UXTB     r1,r2
;;;309                        LPC_UART0->THR = RING_BUF_RD(UART0_tx_buf);
0009d6  4bc5              LDR      r3,|L1.3308|
0009d8  685a              LDR      r2,[r3,#4]  ; UART0_tx_buf
0009da  1c53              ADDS     r3,r2,#1
0009dc  4cc3              LDR      r4,|L1.3308|
0009de  6063              STR      r3,[r4,#4]  ; UART0_tx_buf
0009e0  4623              MOV      r3,r4
0009e2  689b              LDR      r3,[r3,#8]  ; UART0_tx_buf
0009e4  4013              ANDS     r3,r3,r2
0009e6  68e4              LDR      r4,[r4,#0xc]  ; UART0_tx_buf
0009e8  5ce3              LDRB     r3,[r4,r3]
0009ea  4cc1              LDR      r4,|L1.3312|
0009ec  7023              STRB     r3,[r4,#0]
                  |L1.2542|
0009ee  b149              CBZ      r1,|L1.2564|
0009f0  4abe              LDR      r2,|L1.3308|
0009f2  6812              LDR      r2,[r2,#0]            ;306  ; UART0_tx_buf
0009f4  4bbd              LDR      r3,|L1.3308|
0009f6  685b              LDR      r3,[r3,#4]            ;306  ; UART0_tx_buf
0009f8  1ad2              SUBS     r2,r2,r3              ;306
0009fa  4bbc              LDR      r3,|L1.3308|
0009fc  689b              LDR      r3,[r3,#8]            ;306  ; UART0_tx_buf
0009fe  401a              ANDS     r2,r2,r3              ;306
000a00  2a00              CMP      r2,#0                 ;306
000a02  d1e6              BNE      |L1.2514|
                  |L1.2564|
;;;310                    }  
;;;311    			}
;;;312    			break;
000a04  e000              B        |L1.2568|
                  |L1.2566|
;;;313    			default :
;;;314    			break;
000a06  bf00              NOP      
                  |L1.2568|
000a08  bf00              NOP                            ;293
                  |L1.2570|
;;;315    		}
;;;316    	}
;;;317    }
000a0a  bd30              POP      {r4,r5,pc}
;;;318    #endif
                          ENDP

                  RS485_RD_Init PROC
;;;335    //初始化使能管脚
;;;336    void RS485_RD_Init( void )
000a0c  48ba              LDR      r0,|L1.3320|
;;;337    {
;;;338    	LPC_GPIO1->FIODIR   |= 1 << 14;
000a0e  6a00              LDR      r0,[r0,#0x20]
000a10  f4404080          ORR      r0,r0,#0x4000
000a14  49b8              LDR      r1,|L1.3320|
000a16  6208              STR      r0,[r1,#0x20]
;;;339    }
000a18  4770              BX       lr
;;;340    
                          ENDP

                  UART1_putchar PROC
;;;411    /* polling r&w */
;;;412    void UART1_putchar(uint8_t c)
000a1a  49b8              LDR      r1,|L1.3324|
;;;413    {
;;;414    	LPC_UART1->THR = c;	       
000a1c  7008              STRB     r0,[r1,#0]
;;;415        while( (LPC_UART1->LSR & LSR_TEMT) == 0 );  
000a1e  bf00              NOP      
                  |L1.2592|
000a20  49b6              LDR      r1,|L1.3324|
000a22  7d09              LDRB     r1,[r1,#0x14]
000a24  f0010140          AND      r1,r1,#0x40
000a28  2900              CMP      r1,#0
000a2a  d0f9              BEQ      |L1.2592|
;;;416    }
000a2c  4770              BX       lr
;;;417    
                          ENDP

                  UART1_getchar PROC
;;;418    uint8_t UART1_getchar(void)
000a2e  bf00              NOP      
                  |L1.2608|
;;;419    {
;;;420        while( (LPC_UART1->LSR&LSR_RDR) == 0 );
000a30  48b2              LDR      r0,|L1.3324|
000a32  7d00              LDRB     r0,[r0,#0x14]
000a34  f0000001          AND      r0,r0,#1
000a38  2800              CMP      r0,#0
000a3a  d0f9              BEQ      |L1.2608|
;;;421    	return LPC_UART1->RBR;
000a3c  48af              LDR      r0,|L1.3324|
000a3e  7800              LDRB     r0,[r0,#0]
;;;422    }
000a40  4770              BX       lr
;;;423    
                          ENDP

                  UART1_SendByte PROC
;;;424    /* interrupt r&w */
;;;425    void UART1_SendByte(uint8_t data)
000a42  b570              PUSH     {r4-r6,lr}
;;;426    {
000a44  4604              MOV      r4,r0
;;;427    	CPU_SR_ALLOC();
000a46  2500              MOVS     r5,#0
;;;428        
;;;429    	while(RING_BUF_COUNT(UART1_tx_buf) >= (uint32_t)TX_BUFFER_SIZE1-16);  /* 不会锁死 */
000a48  bf00              NOP      
                  |L1.2634|
000a4a  48ad              LDR      r0,|L1.3328|
000a4c  6800              LDR      r0,[r0,#0]  ; UART1_tx_buf
000a4e  49ac              LDR      r1,|L1.3328|
000a50  6849              LDR      r1,[r1,#4]  ; UART1_tx_buf
000a52  1a40              SUBS     r0,r0,r1
000a54  49aa              LDR      r1,|L1.3328|
000a56  6889              LDR      r1,[r1,#8]  ; UART1_tx_buf
000a58  4008              ANDS     r0,r0,r1
000a5a  28f0              CMP      r0,#0xf0
000a5c  d2f5              BCS      |L1.2634|
;;;430    
;;;431    	CPU_CRITICAL_ENTER(); 
000a5e  f7fffffe          BL       CPU_SR_Save
000a62  4605              MOV      r5,r0
;;;432    	RING_BUF_WR(UART1_tx_buf,data);
000a64  49a6              LDR      r1,|L1.3328|
000a66  6808              LDR      r0,[r1,#0]  ; UART1_tx_buf
000a68  1c41              ADDS     r1,r0,#1
000a6a  4aa5              LDR      r2,|L1.3328|
000a6c  6011              STR      r1,[r2,#0]  ; UART1_tx_buf
000a6e  4611              MOV      r1,r2
000a70  6889              LDR      r1,[r1,#8]  ; UART1_tx_buf
000a72  4001              ANDS     r1,r1,r0
000a74  68d2              LDR      r2,[r2,#0xc]  ; UART1_tx_buf
000a76  5454              STRB     r4,[r2,r1]
;;;433        if ((LPC_UART1->LSR&LSR_THRE) != 0) LPC_UART1->THR = RING_BUF_RD(UART1_tx_buf);
000a78  48a0              LDR      r0,|L1.3324|
000a7a  7d00              LDRB     r0,[r0,#0x14]
000a7c  f0000020          AND      r0,r0,#0x20
000a80  b158              CBZ      r0,|L1.2714|
000a82  499f              LDR      r1,|L1.3328|
000a84  6848              LDR      r0,[r1,#4]  ; UART1_tx_buf
000a86  1c41              ADDS     r1,r0,#1
000a88  4a9d              LDR      r2,|L1.3328|
000a8a  6051              STR      r1,[r2,#4]  ; UART1_tx_buf
000a8c  4611              MOV      r1,r2
000a8e  6889              LDR      r1,[r1,#8]  ; UART1_tx_buf
000a90  4001              ANDS     r1,r1,r0
000a92  68d2              LDR      r2,[r2,#0xc]  ; UART1_tx_buf
000a94  5c51              LDRB     r1,[r2,r1]
000a96  4a99              LDR      r2,|L1.3324|
000a98  7011              STRB     r1,[r2,#0]
                  |L1.2714|
;;;434        CPU_CRITICAL_EXIT();
000a9a  4628              MOV      r0,r5
000a9c  f7fffffe          BL       CPU_SR_Restore
;;;435    }
000aa0  bd70              POP      {r4-r6,pc}
;;;436    
                          ENDP

                  UART1_send_pack PROC
;;;437    void UART1_send_pack(uint8_t *buf,uint16_t len)
000aa2  e92d41f0          PUSH     {r4-r8,lr}
;;;438    {
000aa6  4605              MOV      r5,r0
000aa8  460c              MOV      r4,r1
;;;439      uint16_t wrNum;
;;;440    	uint32_t delay ;
;;;441    	CPU_SR_ALLOC();
000aaa  f04f0800          MOV      r8,#0
;;;442    	
;;;443    //  RS485_WR();  
;;;444    	
;;;445    	for(delay = 0x1fff ; delay>1 ; delay-- );
000aae  f64177ff          MOV      r7,#0x1fff
000ab2  e000              B        |L1.2742|
                  |L1.2740|
000ab4  1e7f              SUBS     r7,r7,#1
                  |L1.2742|
000ab6  2f01              CMP      r7,#1
000ab8  d8fc              BHI      |L1.2740|
;;;446    	
;;;447    	if(len>TX_BUFFER_SIZE1)return;
000aba  f5b47f80          CMP      r4,#0x100
000abe  dd01              BLE      |L1.2756|
                  |L1.2752|
;;;448    
;;;449    	for(;len>0;)
;;;450    	{	
;;;451    	    while(RING_BUF_COUNT(UART1_tx_buf) >= (uint32_t)TX_BUFFER_SIZE1-16);  /* 不会锁死 */
;;;452    	    wrNum = TX_BUFFER_SIZE1 - RING_BUF_COUNT(UART1_tx_buf); /* buf could be writed */
;;;453    		if(wrNum>len)
;;;454    		{
;;;455    		    wrNum = len;
;;;456    		} 
;;;457    
;;;458    		len -= wrNum;
;;;459    		CPU_CRITICAL_ENTER(); 
;;;460    		while(wrNum--)
;;;461    		{    
;;;462    	        RING_BUF_WR(UART1_tx_buf,*buf++);	
;;;463    		}
;;;464    		if ( ((LPC_UART1->LSR&LSR_THRE) != 0) )LPC_UART1->THR = RING_BUF_RD(UART1_tx_buf); 
;;;465    		CPU_CRITICAL_EXIT();
;;;466    	}
;;;467    }
000ac0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2756|
000ac4  e043              B        |L1.2894|
                  |L1.2758|
000ac6  bf00              NOP                            ;451
                  |L1.2760|
000ac8  488d              LDR      r0,|L1.3328|
000aca  6800              LDR      r0,[r0,#0]            ;451  ; UART1_tx_buf
000acc  498c              LDR      r1,|L1.3328|
000ace  6849              LDR      r1,[r1,#4]            ;451  ; UART1_tx_buf
000ad0  1a40              SUBS     r0,r0,r1              ;451
000ad2  498b              LDR      r1,|L1.3328|
000ad4  6889              LDR      r1,[r1,#8]            ;451  ; UART1_tx_buf
000ad6  4008              ANDS     r0,r0,r1              ;451
000ad8  28f0              CMP      r0,#0xf0              ;451
000ada  d2f5              BCS      |L1.2760|
000adc  4888              LDR      r0,|L1.3328|
000ade  6800              LDR      r0,[r0,#0]            ;452  ; UART1_tx_buf
000ae0  4987              LDR      r1,|L1.3328|
000ae2  6849              LDR      r1,[r1,#4]            ;452  ; UART1_tx_buf
000ae4  1a40              SUBS     r0,r0,r1              ;452
000ae6  4986              LDR      r1,|L1.3328|
000ae8  6889              LDR      r1,[r1,#8]            ;452  ; UART1_tx_buf
000aea  4008              ANDS     r0,r0,r1              ;452
000aec  f5c07080          RSB      r0,r0,#0x100          ;452
000af0  b286              UXTH     r6,r0                 ;452
000af2  42a6              CMP      r6,r4                 ;453
000af4  dd00              BLE      |L1.2808|
000af6  4626              MOV      r6,r4                 ;455
                  |L1.2808|
000af8  1ba0              SUBS     r0,r4,r6              ;458
000afa  b284              UXTH     r4,r0                 ;458
000afc  f7fffffe          BL       CPU_SR_Save
000b00  4680              MOV      r8,r0                 ;459
000b02  e00b              B        |L1.2844|
                  |L1.2820|
000b04  f8152b01          LDRB     r2,[r5],#1            ;462
000b08  497d              LDR      r1,|L1.3328|
000b0a  6808              LDR      r0,[r1,#0]            ;462  ; UART1_tx_buf
000b0c  1c41              ADDS     r1,r0,#1              ;462
000b0e  4b7c              LDR      r3,|L1.3328|
000b10  6019              STR      r1,[r3,#0]            ;462  ; UART1_tx_buf
000b12  4619              MOV      r1,r3                 ;462
000b14  6889              LDR      r1,[r1,#8]            ;462  ; UART1_tx_buf
000b16  4001              ANDS     r1,r1,r0              ;462
000b18  68db              LDR      r3,[r3,#0xc]          ;462  ; UART1_tx_buf
000b1a  545a              STRB     r2,[r3,r1]            ;462
                  |L1.2844|
000b1c  1e30              SUBS     r0,r6,#0              ;460
000b1e  f1a60101          SUB      r1,r6,#1              ;460
000b22  b28e              UXTH     r6,r1                 ;460
000b24  d1ee              BNE      |L1.2820|
000b26  4875              LDR      r0,|L1.3324|
000b28  7d00              LDRB     r0,[r0,#0x14]         ;464
000b2a  f0000020          AND      r0,r0,#0x20           ;464
000b2e  b158              CBZ      r0,|L1.2888|
000b30  4973              LDR      r1,|L1.3328|
000b32  6848              LDR      r0,[r1,#4]            ;464  ; UART1_tx_buf
000b34  1c41              ADDS     r1,r0,#1              ;464
000b36  4a72              LDR      r2,|L1.3328|
000b38  6051              STR      r1,[r2,#4]            ;464  ; UART1_tx_buf
000b3a  4611              MOV      r1,r2                 ;464
000b3c  6889              LDR      r1,[r1,#8]            ;464  ; UART1_tx_buf
000b3e  4001              ANDS     r1,r1,r0              ;464
000b40  68d2              LDR      r2,[r2,#0xc]          ;464  ; UART1_tx_buf
000b42  5c51              LDRB     r1,[r2,r1]            ;464
000b44  4a6d              LDR      r2,|L1.3324|
000b46  7011              STRB     r1,[r2,#0]            ;464
                  |L1.2888|
000b48  4640              MOV      r0,r8                 ;465
000b4a  f7fffffe          BL       CPU_SR_Restore
                  |L1.2894|
000b4e  2c00              CMP      r4,#0                 ;449
000b50  dcb9              BGT      |L1.2758|
000b52  bf00              NOP      
000b54  e7b4              B        |L1.2752|
;;;468    
                          ENDP

                  UART1_ReicieveByte PROC
;;;469    
;;;470    uint8_t UART1_ReicieveByte(void)
000b56  b570              PUSH     {r4-r6,lr}
;;;471    {	
;;;472        uint8_t data;
;;;473        CPU_SR_ALLOC();
000b58  2500              MOVS     r5,#0
;;;474        
;;;475        while(RING_BUF_IS_EMPTY(UART1_rx_buf));
000b5a  bf00              NOP      
                  |L1.2908|
000b5c  4869              LDR      r0,|L1.3332|
000b5e  6800              LDR      r0,[r0,#0]  ; UART1_rx_buf
000b60  4968              LDR      r1,|L1.3332|
000b62  6889              LDR      r1,[r1,#8]  ; UART1_rx_buf
000b64  4008              ANDS     r0,r0,r1
000b66  4967              LDR      r1,|L1.3332|
000b68  6849              LDR      r1,[r1,#4]  ; UART1_rx_buf
000b6a  4a66              LDR      r2,|L1.3332|
000b6c  6892              LDR      r2,[r2,#8]  ; UART1_rx_buf
000b6e  4011              ANDS     r1,r1,r2
000b70  4288              CMP      r0,r1
000b72  d0f3              BEQ      |L1.2908|
;;;476    
;;;477    	CPU_CRITICAL_ENTER();
000b74  f7fffffe          BL       CPU_SR_Save
000b78  4605              MOV      r5,r0
;;;478    	data = RING_BUF_RD(UART1_rx_buf);
000b7a  4962              LDR      r1,|L1.3332|
000b7c  6848              LDR      r0,[r1,#4]  ; UART1_rx_buf
000b7e  1c41              ADDS     r1,r0,#1
000b80  4a60              LDR      r2,|L1.3332|
000b82  6051              STR      r1,[r2,#4]  ; UART1_rx_buf
000b84  4611              MOV      r1,r2
000b86  6889              LDR      r1,[r1,#8]  ; UART1_rx_buf
000b88  4001              ANDS     r1,r1,r0
000b8a  68d2              LDR      r2,[r2,#0xc]  ; UART1_rx_buf
000b8c  5c54              LDRB     r4,[r2,r1]
;;;479        CPU_CRITICAL_EXIT();
000b8e  4628              MOV      r0,r5
000b90  f7fffffe          BL       CPU_SR_Restore
;;;480    
;;;481    	return data;
000b94  4620              MOV      r0,r4
;;;482    }
000b96  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

                  UART1_IRQHandler PROC
;;;484    void UART1_IRQHandler(void) 
000b98  b530              PUSH     {r4,r5,lr}
;;;485    {
;;;486      uint8_t reg_iir,i;
;;;487    
;;;488    	reg_iir = (uint8_t)(LPC_UART1->IIR & 0x0F);
000b9a  4a58              LDR      r2,|L1.3324|
000b9c  6892              LDR      r2,[r2,#8]
000b9e  f002000f          AND      r0,r2,#0xf
;;;489    
;;;490    	if(reg_iir != 1)
000ba2  2801              CMP      r0,#1
000ba4  d041              BEQ      |L1.3114|
;;;491    	{
;;;492    		reg_iir = reg_iir >> 1;
000ba6  1040              ASRS     r0,r0,#1
;;;493    		switch(reg_iir)
000ba8  2801              CMP      r0,#1
000baa  d01c              BEQ      |L1.3046|
000bac  2802              CMP      r0,#2
000bae  d005              BEQ      |L1.3004|
000bb0  2803              CMP      r0,#3
000bb2  d002              BEQ      |L1.3002|
000bb4  2806              CMP      r0,#6
000bb6  d136              BNE      |L1.3110|
000bb8  e001              B        |L1.3006|
                  |L1.3002|
;;;494    		{
;;;495    		  case 0x3: /* Highest */
;;;496    			{
;;;497    
;;;498    			}
;;;499    			break;
000bba  e035              B        |L1.3112|
                  |L1.3004|
;;;500    			case 0x2: /* Second */
;;;501    			case 0x6:
000bbc  bf00              NOP      
                  |L1.3006|
;;;502    			{
;;;503    				while(LPC_UART1->LSR & LSR_RDR)
000bbe  e00b              B        |L1.3032|
                  |L1.3008|
;;;504    				{
;;;505    					RING_BUF_WR(UART1_rx_buf,LPC_UART1->RBR);	
000bc0  4b4e              LDR      r3,|L1.3324|
000bc2  781c              LDRB     r4,[r3,#0]
000bc4  4b4f              LDR      r3,|L1.3332|
000bc6  681a              LDR      r2,[r3,#0]  ; UART1_rx_buf
000bc8  1c53              ADDS     r3,r2,#1
000bca  4d4e              LDR      r5,|L1.3332|
000bcc  602b              STR      r3,[r5,#0]  ; UART1_rx_buf
000bce  462b              MOV      r3,r5
000bd0  689b              LDR      r3,[r3,#8]  ; UART1_rx_buf
000bd2  4013              ANDS     r3,r3,r2
000bd4  68ed              LDR      r5,[r5,#0xc]  ; UART1_rx_buf
000bd6  54ec              STRB     r4,[r5,r3]
                  |L1.3032|
000bd8  4a48              LDR      r2,|L1.3324|
000bda  7d12              LDRB     r2,[r2,#0x14]         ;503
000bdc  f0020201          AND      r2,r2,#1              ;503
000be0  2a00              CMP      r2,#0                 ;503
000be2  d1ed              BNE      |L1.3008|
;;;506    				}
;;;507    			}
;;;508    			break;
000be4  e020              B        |L1.3112|
                  |L1.3046|
;;;509    			case 0x1:  /* Third */
;;;510    			{
;;;511    			    i = 16;
000be6  2110              MOVS     r1,#0x10
;;;512    
;;;513    				//如果已经发送完，下一次进中断再置为接收     
;;;514    				if(  RING_BUF_COUNT(UART1_tx_buf) == 0 ){
000be8  4a45              LDR      r2,|L1.3328|
000bea  6812              LDR      r2,[r2,#0]  ; UART1_tx_buf
000bec  4a44              LDR      r2,|L1.3328|
000bee  6852              LDR      r2,[r2,#4]  ; UART1_tx_buf
;;;515    //					TIMER1_Start();
;;;516    //					RS485_RD();
;;;517    				}
;;;518    				while (i && RING_BUF_COUNT(UART1_tx_buf))
000bf0  e00d              B        |L1.3086|
                  |L1.3058|
;;;519    				{
;;;520    						i--;
000bf2  1e4a              SUBS     r2,r1,#1
000bf4  b2d1              UXTB     r1,r2
;;;521    //						RS485_WR(); 
;;;522    						LPC_UART1->THR = RING_BUF_RD(UART1_tx_buf);
000bf6  4b42              LDR      r3,|L1.3328|
000bf8  685a              LDR      r2,[r3,#4]  ; UART1_tx_buf
000bfa  1c53              ADDS     r3,r2,#1
000bfc  4c40              LDR      r4,|L1.3328|
000bfe  6063              STR      r3,[r4,#4]  ; UART1_tx_buf
000c00  4623              MOV      r3,r4
000c02  689b              LDR      r3,[r3,#8]  ; UART1_tx_buf
000c04  4013              ANDS     r3,r3,r2
000c06  68e4              LDR      r4,[r4,#0xc]  ; UART1_tx_buf
000c08  5ce3              LDRB     r3,[r4,r3]
000c0a  4c3c              LDR      r4,|L1.3324|
000c0c  7023              STRB     r3,[r4,#0]
                  |L1.3086|
000c0e  b149              CBZ      r1,|L1.3108|
000c10  4a3b              LDR      r2,|L1.3328|
000c12  6812              LDR      r2,[r2,#0]            ;518  ; UART1_tx_buf
000c14  4b3a              LDR      r3,|L1.3328|
000c16  685b              LDR      r3,[r3,#4]            ;518  ; UART1_tx_buf
000c18  1ad2              SUBS     r2,r2,r3              ;518
000c1a  4b39              LDR      r3,|L1.3328|
000c1c  689b              LDR      r3,[r3,#8]            ;518  ; UART1_tx_buf
000c1e  401a              ANDS     r2,r2,r3              ;518
000c20  2a00              CMP      r2,#0                 ;518
000c22  d1e6              BNE      |L1.3058|
                  |L1.3108|
;;;523    				}
;;;524    //				//如果已经发送完，就设置成接受模式
;;;525    //				if(  RING_BUF_COUNT(UART1_tx_buf) == 0 ){
;;;526    //					TIMER1_Start();
;;;527    //				}
;;;528    			}
;;;529    			break;
000c24  e000              B        |L1.3112|
                  |L1.3110|
;;;530    			default :
;;;531    			break;
000c26  bf00              NOP      
                  |L1.3112|
000c28  bf00              NOP                            ;499
                  |L1.3114|
;;;532    		}
;;;533    	}
;;;534    }
000c2a  bd30              POP      {r4,r5,pc}
;;;535    #endif /* uart1 endif */
                          ENDP

                  UART2_putchar PROC
;;;655    /* polling r&w */
;;;656    void UART2_putchar(uint8_t c)
000c2c  4936              LDR      r1,|L1.3336|
;;;657    {
;;;658    	LPC_UART2->THR = c;	       
000c2e  7008              STRB     r0,[r1,#0]
;;;659        while( (LPC_UART2->LSR & LSR_TEMT) == 0 );  
000c30  bf00              NOP      
                  |L1.3122|
000c32  4935              LDR      r1,|L1.3336|
000c34  7d09              LDRB     r1,[r1,#0x14]
000c36  f0010140          AND      r1,r1,#0x40
000c3a  2900              CMP      r1,#0
000c3c  d0f9              BEQ      |L1.3122|
;;;660    }
000c3e  4770              BX       lr
;;;661    
                          ENDP

                  UART2_getchar PROC
;;;662    uint8_t UART2_getchar(void)
000c40  bf00              NOP      
                  |L1.3138|
;;;663    {
;;;664        while( (LPC_UART2->LSR&LSR_RDR) == 0 );
000c42  4831              LDR      r0,|L1.3336|
000c44  7d00              LDRB     r0,[r0,#0x14]
000c46  f0000001          AND      r0,r0,#1
000c4a  2800              CMP      r0,#0
000c4c  d0f9              BEQ      |L1.3138|
;;;665    	return LPC_UART2->RBR;
000c4e  482e              LDR      r0,|L1.3336|
000c50  7800              LDRB     r0,[r0,#0]
;;;666    }
000c52  4770              BX       lr
;;;667    
                          ENDP

                  UART2_send_pack PROC
;;;680    
;;;681    void UART2_send_pack(uint8_t *buf,uint16_t len)
000c54  4770              BX       lr
;;;682    {
;;;683      #ifdef __DEBUG_UART2_PRINTF__
;;;684    	
;;;685    	
;;;686    	#else
;;;687    	uint16_t wrNum;
;;;688    	CPU_SR_ALLOC();
;;;689    	if(len>TX_BUFFER_SIZE2)return;
;;;690    	Radar_RS485_WR(); 
;;;691    	for(;len>0;)
;;;692    	{	
;;;693    	    while(RING_BUF_COUNT(UART2_tx_buf) >= (uint32_t)TX_BUFFER_SIZE2-16);  /* 不会锁死 */
;;;694    	    wrNum = TX_BUFFER_SIZE2 - RING_BUF_COUNT(UART2_tx_buf); /* buf could be writed */
;;;695    		if(wrNum>len)
;;;696    		{
;;;697    		    wrNum = len;
;;;698    		} 
;;;699    		 
;;;700    		len -= wrNum;
;;;701    		CPU_CRITICAL_ENTER(); 
;;;702    		while(wrNum--)
;;;703    		{    
;;;704    	        RING_BUF_WR(UART2_tx_buf,*buf++);	
;;;705    		}
;;;706    		if ( ((LPC_UART2->LSR&LSR_THRE) != 0) )LPC_UART2->THR = RING_BUF_RD(UART2_tx_buf); 
;;;707    		CPU_CRITICAL_EXIT();
;;;708    	}
;;;709    	#endif
;;;710    }
;;;711    
                          ENDP

                  UART2_ReicieveByte PROC
;;;712    uint8_t UART2_ReicieveByte(void)
000c56  b570              PUSH     {r4-r6,lr}
;;;713    {	
;;;714        uint8_t data;
;;;715        CPU_SR_ALLOC();
000c58  2500              MOVS     r5,#0
;;;716        
;;;717        while(RING_BUF_IS_EMPTY(UART2_rx_buf));
000c5a  bf00              NOP      
                  |L1.3164|
000c5c  482b              LDR      r0,|L1.3340|
000c5e  6800              LDR      r0,[r0,#0]  ; UART2_rx_buf
000c60  492a              LDR      r1,|L1.3340|
000c62  6889              LDR      r1,[r1,#8]  ; UART2_rx_buf
000c64  4008              ANDS     r0,r0,r1
000c66  4929              LDR      r1,|L1.3340|
000c68  6849              LDR      r1,[r1,#4]  ; UART2_rx_buf
000c6a  4a28              LDR      r2,|L1.3340|
000c6c  6892              LDR      r2,[r2,#8]  ; UART2_rx_buf
000c6e  4011              ANDS     r1,r1,r2
000c70  4288              CMP      r0,r1
000c72  d0f3              BEQ      |L1.3164|
;;;718    
;;;719    	CPU_CRITICAL_ENTER();
000c74  f7fffffe          BL       CPU_SR_Save
000c78  4605              MOV      r5,r0
;;;720    	data = RING_BUF_RD(UART2_rx_buf);
000c7a  4924              LDR      r1,|L1.3340|
000c7c  6848              LDR      r0,[r1,#4]  ; UART2_rx_buf
000c7e  1c41              ADDS     r1,r0,#1
000c80  4a22              LDR      r2,|L1.3340|
000c82  6051              STR      r1,[r2,#4]  ; UART2_rx_buf
000c84  4611              MOV      r1,r2
000c86  6889              LDR      r1,[r1,#8]  ; UART2_rx_buf
000c88  4001              ANDS     r1,r1,r0
000c8a  68d2              LDR      r2,[r2,#0xc]  ; UART2_rx_buf
000c8c  5c54              LDRB     r4,[r2,r1]
;;;721        CPU_CRITICAL_EXIT();
000c8e  4628              MOV      r0,r5
000c90  f7fffffe          BL       CPU_SR_Restore
;;;722    
;;;723    	return data;
000c94  4620              MOV      r0,r4
;;;724    }
000c96  bd70              POP      {r4-r6,pc}
;;;725    
                          ENDP

                  UART2_IRQHandler PROC
;;;727    extern void TIMER2_Start(void);
;;;728    void UART2_IRQHandler(void)
000c98  b570              PUSH     {r4-r6,lr}
;;;729    {
;;;730        uint8_t reg_iir,i;
;;;731    	 uint8_t rx_data ;
;;;732    	reg_iir = (uint8_t)(LPC_UART2->IIR & 0x0F);
000c9a  481b              LDR      r0,|L1.3336|
000c9c  6880              LDR      r0,[r0,#8]
000c9e  f000040f          AND      r4,r0,#0xf
;;;733    	
;;;734    	if(reg_iir != 1)
000ca2  2c01              CMP      r4,#1
000ca4  d074              BEQ      |L1.3472|
;;;735    	{
;;;736    		reg_iir = reg_iir >> 1;
000ca6  1064              ASRS     r4,r4,#1
;;;737    		switch(reg_iir)
000ca8  2c01              CMP      r4,#1
000caa  d03b              BEQ      |L1.3364|
000cac  2c02              CMP      r4,#2
000cae  d005              BEQ      |L1.3260|
000cb0  2c03              CMP      r4,#3
000cb2  d002              BEQ      |L1.3258|
000cb4  2c06              CMP      r4,#6
000cb6  d169              BNE      |L1.3468|
000cb8  e001              B        |L1.3262|
                  |L1.3258|
;;;738    		{
;;;739    		    case 0x3: /* Highest */
;;;740    			{
;;;741    			
;;;742    			}
;;;743    			break;
000cba  e068              B        |L1.3470|
                  |L1.3260|
;;;744    			case 0x2: /* Second */
;;;745    			case 0x6:
000cbc  bf00              NOP      
                  |L1.3262|
;;;746    			{
;;;747    				while(LPC_UART2->LSR & LSR_RDR)
000cbe  e02a              B        |L1.3350|
                  |L1.3264|
;;;748    				{
;;;749    					rx_data = LPC_UART2->RBR ;
000cc0  4811              LDR      r0,|L1.3336|
000cc2  7806              LDRB     r6,[r0,#0]
;;;750    					RING_BUF_WR(UART2_rx_buf,rx_data);	
000cc4  4911              LDR      r1,|L1.3340|
000cc6  6808              LDR      r0,[r1,#0]  ; UART2_rx_buf
000cc8  1c41              ADDS     r1,r0,#1
000cca  4a10              LDR      r2,|L1.3340|
000ccc  6011              STR      r1,[r2,#0]  ; UART2_rx_buf
000cce  4611              MOV      r1,r2
000cd0  6889              LDR      r1,[r1,#8]  ; UART2_rx_buf
000cd2  4001              ANDS     r1,r1,r0
000cd4  68d2              LDR      r2,[r2,#0xc]  ; UART2_rx_buf
000cd6  5456              STRB     r6,[r2,r1]
;;;751    					RING_BUF_WR(UART2_rx_buf_copy,rx_data);						
000cd8  490d              LDR      r1,|L1.3344|
000cda  6808              LDR      r0,[r1,#0]  ; UART2_rx_buf_copy
000cdc  1c41              ADDS     r1,r0,#1
000cde  4a0c              LDR      r2,|L1.3344|
000ce0  6011              STR      r1,[r2,#0]  ; UART2_rx_buf_copy
000ce2  4611              MOV      r1,r2
000ce4  6889              LDR      r1,[r1,#8]  ; UART2_rx_buf_copy
000ce6  4001              ANDS     r1,r1,r0
000ce8  68d2              LDR      r2,[r2,#0xc]  ; UART2_rx_buf_copy
000cea  e013              B        |L1.3348|
                  |L1.3308|
                          DCD      UART0_tx_buf
                  |L1.3312|
                          DCD      0x4000c000
                  |L1.3316|
                          DCD      UART0_rx_buf
                  |L1.3320|
                          DCD      0x2009c000
                  |L1.3324|
                          DCD      0x40010000
                  |L1.3328|
                          DCD      UART1_tx_buf
                  |L1.3332|
                          DCD      UART1_rx_buf
                  |L1.3336|
                          DCD      0x40098000
                  |L1.3340|
                          DCD      UART2_rx_buf
                  |L1.3344|
                          DCD      UART2_rx_buf_copy
                  |L1.3348|
000d14  5456              STRB     r6,[r2,r1]
                  |L1.3350|
000d16  488b              LDR      r0,|L1.3908|
000d18  7d00              LDRB     r0,[r0,#0x14]         ;747
000d1a  f0000001          AND      r0,r0,#1              ;747
000d1e  2800              CMP      r0,#0                 ;747
000d20  d1ce              BNE      |L1.3264|
;;;752    				}
;;;753    			}
;;;754    			break;
000d22  e034              B        |L1.3470|
                  |L1.3364|
;;;755    			case 0x1:  /* Third */
;;;756    			{
;;;757    			    i = 16;
000d24  2510              MOVS     r5,#0x10
;;;758    				if(  RING_BUF_COUNT(UART2_tx_buf) == 0 ){
000d26  4888              LDR      r0,|L1.3912|
000d28  6800              LDR      r0,[r0,#0]  ; UART2_tx_buf
000d2a  4987              LDR      r1,|L1.3912|
000d2c  6849              LDR      r1,[r1,#4]  ; UART2_tx_buf
000d2e  1a40              SUBS     r0,r0,r1
000d30  4985              LDR      r1,|L1.3912|
000d32  6889              LDR      r1,[r1,#8]  ; UART2_tx_buf
000d34  4008              ANDS     r0,r0,r1
000d36  b930              CBNZ     r0,|L1.3398|
;;;759    					smm++;
000d38  4884              LDR      r0,|L1.3916|
000d3a  6800              LDR      r0,[r0,#0]  ; smm
000d3c  1c40              ADDS     r0,r0,#1
000d3e  4983              LDR      r1,|L1.3916|
000d40  6008              STR      r0,[r1,#0]  ; smm
;;;760    					TIMER2_Start();
000d42  f7fffffe          BL       TIMER2_Start
                  |L1.3398|
;;;761    				}
;;;762    				while (i && RING_BUF_COUNT(UART2_tx_buf))
000d46  e013              B        |L1.3440|
                  |L1.3400|
;;;763    				{
;;;764    						i--;
000d48  1e68              SUBS     r0,r5,#1
000d4a  b2c5              UXTB     r5,r0
;;;765    						Radar_RS485_WR();
000d4c  4880              LDR      r0,|L1.3920|
000d4e  6b80              LDR      r0,[r0,#0x38]
000d50  f0400001          ORR      r0,r0,#1
000d54  497e              LDR      r1,|L1.3920|
000d56  6388              STR      r0,[r1,#0x38]
;;;766    						LPC_UART2->THR = RING_BUF_RD(UART2_tx_buf);
000d58  497b              LDR      r1,|L1.3912|
000d5a  6848              LDR      r0,[r1,#4]  ; UART2_tx_buf
000d5c  1c41              ADDS     r1,r0,#1
000d5e  4a7a              LDR      r2,|L1.3912|
000d60  6051              STR      r1,[r2,#4]  ; UART2_tx_buf
000d62  4611              MOV      r1,r2
000d64  6889              LDR      r1,[r1,#8]  ; UART2_tx_buf
000d66  4001              ANDS     r1,r1,r0
000d68  68d2              LDR      r2,[r2,#0xc]  ; UART2_tx_buf
000d6a  5c51              LDRB     r1,[r2,r1]
000d6c  4a75              LDR      r2,|L1.3908|
000d6e  7011              STRB     r1,[r2,#0]
                  |L1.3440|
000d70  b14d              CBZ      r5,|L1.3462|
000d72  4875              LDR      r0,|L1.3912|
000d74  6800              LDR      r0,[r0,#0]            ;762  ; UART2_tx_buf
000d76  4974              LDR      r1,|L1.3912|
000d78  6849              LDR      r1,[r1,#4]            ;762  ; UART2_tx_buf
000d7a  1a40              SUBS     r0,r0,r1              ;762
000d7c  4972              LDR      r1,|L1.3912|
000d7e  6889              LDR      r1,[r1,#8]            ;762  ; UART2_tx_buf
000d80  4008              ANDS     r0,r0,r1              ;762
000d82  2800              CMP      r0,#0                 ;762
000d84  d1e0              BNE      |L1.3400|
                  |L1.3462|
;;;767    				}  
;;;768    			}
;;;769    			break;
000d86  e002              B        |L1.3470|
000d88  e002              B        |L1.3472|
000d8a  e7ff              B        |L1.3468|
                  |L1.3468|
;;;770    			default :
;;;771    			break;
000d8c  bf00              NOP      
                  |L1.3470|
000d8e  bf00              NOP                            ;743
                  |L1.3472|
;;;772    		}
;;;773    	}
;;;774    }
000d90  bd70              POP      {r4-r6,pc}
;;;775    #endif
                          ENDP

                  UART3_putchar PROC
;;;877    /* polling r&w */
;;;878    void UART3_putchar(uint8_t c)
000d92  4970              LDR      r1,|L1.3924|
;;;879    {
;;;880    	LPC_UART3->THR = c;	       
000d94  7008              STRB     r0,[r1,#0]
;;;881        while( (LPC_UART3->LSR & LSR_TEMT) == 0 );  
000d96  bf00              NOP      
                  |L1.3480|
000d98  496e              LDR      r1,|L1.3924|
000d9a  7d09              LDRB     r1,[r1,#0x14]
000d9c  f0010140          AND      r1,r1,#0x40
000da0  2900              CMP      r1,#0
000da2  d0f9              BEQ      |L1.3480|
;;;882    }
000da4  4770              BX       lr
;;;883    
                          ENDP

                  UART3_getchar PROC
;;;884    uint8_t UART3_getchar(void)
000da6  bf00              NOP      
                  |L1.3496|
;;;885    {
;;;886        while( (LPC_UART3->LSR&LSR_RDR) == 0 );
000da8  486a              LDR      r0,|L1.3924|
000daa  7d00              LDRB     r0,[r0,#0x14]
000dac  f0000001          AND      r0,r0,#1
000db0  2800              CMP      r0,#0
000db2  d0f9              BEQ      |L1.3496|
;;;887    	return LPC_UART3->RBR;
000db4  4867              LDR      r0,|L1.3924|
000db6  7800              LDRB     r0,[r0,#0]
;;;888    }
000db8  4770              BX       lr
;;;889    
                          ENDP

                  UART3_send_pack PROC
;;;902    
;;;903    void UART3_send_pack(uint8_t *buf,uint16_t len)
000dba  e92d41f0          PUSH     {r4-r8,lr}
;;;904    {
000dbe  4605              MOV      r5,r0
000dc0  460c              MOV      r4,r1
;;;905        uint16_t wrNum;
;;;906    	CPU_SR_ALLOC();
000dc2  2700              MOVS     r7,#0
;;;907        
;;;908    	if(len>TX_BUFFER_SIZE3)return;
000dc4  f5b47f80          CMP      r4,#0x100
000dc8  dd01              BLE      |L1.3534|
                  |L1.3530|
;;;909    	
;;;910    	for(;len>0;)
;;;911    	{	
;;;912    	    while(RING_BUF_COUNT(UART3_tx_buf) >= (uint32_t)TX_BUFFER_SIZE3-16);  /* 不会锁死 */
;;;913    	    wrNum = TX_BUFFER_SIZE3 - RING_BUF_COUNT(UART3_tx_buf); /* buf could be writed */
;;;914    		if(wrNum>len)
;;;915    		{
;;;916    		    wrNum = len;
;;;917    		} 
;;;918    		 
;;;919    		len -= wrNum;
;;;920    		CPU_CRITICAL_ENTER(); 
;;;921    		while(wrNum--)
;;;922    		{    
;;;923    	        RING_BUF_WR(UART3_tx_buf,*buf++);	
;;;924    		}
;;;925    		if ( ((LPC_UART3->LSR&LSR_THRE) != 0) )LPC_UART3->THR = RING_BUF_RD(UART3_tx_buf); 
;;;926    		CPU_CRITICAL_EXIT();
;;;927    	}
;;;928    }
000dca  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3534|
000dce  e043              B        |L1.3672|
                  |L1.3536|
000dd0  bf00              NOP                            ;912
                  |L1.3538|
000dd2  4861              LDR      r0,|L1.3928|
000dd4  6800              LDR      r0,[r0,#0]            ;912  ; UART3_tx_buf
000dd6  4960              LDR      r1,|L1.3928|
000dd8  6849              LDR      r1,[r1,#4]            ;912  ; UART3_tx_buf
000dda  1a40              SUBS     r0,r0,r1              ;912
000ddc  495e              LDR      r1,|L1.3928|
000dde  6889              LDR      r1,[r1,#8]            ;912  ; UART3_tx_buf
000de0  4008              ANDS     r0,r0,r1              ;912
000de2  28f0              CMP      r0,#0xf0              ;912
000de4  d2f5              BCS      |L1.3538|
000de6  485c              LDR      r0,|L1.3928|
000de8  6800              LDR      r0,[r0,#0]            ;913  ; UART3_tx_buf
000dea  495b              LDR      r1,|L1.3928|
000dec  6849              LDR      r1,[r1,#4]            ;913  ; UART3_tx_buf
000dee  1a40              SUBS     r0,r0,r1              ;913
000df0  4959              LDR      r1,|L1.3928|
000df2  6889              LDR      r1,[r1,#8]            ;913  ; UART3_tx_buf
000df4  4008              ANDS     r0,r0,r1              ;913
000df6  f5c07080          RSB      r0,r0,#0x100          ;913
000dfa  b286              UXTH     r6,r0                 ;913
000dfc  42a6              CMP      r6,r4                 ;914
000dfe  dd00              BLE      |L1.3586|
000e00  4626              MOV      r6,r4                 ;916
                  |L1.3586|
000e02  1ba0              SUBS     r0,r4,r6              ;919
000e04  b284              UXTH     r4,r0                 ;919
000e06  f7fffffe          BL       CPU_SR_Save
000e0a  4607              MOV      r7,r0                 ;920
000e0c  e00b              B        |L1.3622|
                  |L1.3598|
000e0e  f8152b01          LDRB     r2,[r5],#1            ;923
000e12  4951              LDR      r1,|L1.3928|
000e14  6808              LDR      r0,[r1,#0]            ;923  ; UART3_tx_buf
000e16  1c41              ADDS     r1,r0,#1              ;923
000e18  4b4f              LDR      r3,|L1.3928|
000e1a  6019              STR      r1,[r3,#0]            ;923  ; UART3_tx_buf
000e1c  4619              MOV      r1,r3                 ;923
000e1e  6889              LDR      r1,[r1,#8]            ;923  ; UART3_tx_buf
000e20  4001              ANDS     r1,r1,r0              ;923
000e22  68db              LDR      r3,[r3,#0xc]          ;923  ; UART3_tx_buf
000e24  545a              STRB     r2,[r3,r1]            ;923
                  |L1.3622|
000e26  1e30              SUBS     r0,r6,#0              ;921
000e28  f1a60101          SUB      r1,r6,#1              ;921
000e2c  b28e              UXTH     r6,r1                 ;921
000e2e  d1ee              BNE      |L1.3598|
000e30  4848              LDR      r0,|L1.3924|
000e32  7d00              LDRB     r0,[r0,#0x14]         ;925
000e34  f0000020          AND      r0,r0,#0x20           ;925
000e38  b158              CBZ      r0,|L1.3666|
000e3a  4947              LDR      r1,|L1.3928|
000e3c  6848              LDR      r0,[r1,#4]            ;925  ; UART3_tx_buf
000e3e  1c41              ADDS     r1,r0,#1              ;925
000e40  4a45              LDR      r2,|L1.3928|
000e42  6051              STR      r1,[r2,#4]            ;925  ; UART3_tx_buf
000e44  4611              MOV      r1,r2                 ;925
000e46  6889              LDR      r1,[r1,#8]            ;925  ; UART3_tx_buf
000e48  4001              ANDS     r1,r1,r0              ;925
000e4a  68d2              LDR      r2,[r2,#0xc]          ;925  ; UART3_tx_buf
000e4c  5c51              LDRB     r1,[r2,r1]            ;925
000e4e  4a41              LDR      r2,|L1.3924|
000e50  7011              STRB     r1,[r2,#0]            ;925
                  |L1.3666|
000e52  4638              MOV      r0,r7                 ;926
000e54  f7fffffe          BL       CPU_SR_Restore
                  |L1.3672|
000e58  2c00              CMP      r4,#0                 ;910
000e5a  dcb9              BGT      |L1.3536|
000e5c  bf00              NOP      
000e5e  e7b4              B        |L1.3530|
;;;929    
                          ENDP

                  UART3_ReicieveByte PROC
;;;930    uint8_t UART3_ReicieveByte(void)
000e60  b570              PUSH     {r4-r6,lr}
;;;931    {	
;;;932        uint8_t data;
;;;933        CPU_SR_ALLOC();
000e62  2500              MOVS     r5,#0
;;;934        
;;;935        while(RING_BUF_IS_EMPTY(UART3_rx_buf));
000e64  bf00              NOP      
                  |L1.3686|
000e66  483d              LDR      r0,|L1.3932|
000e68  6800              LDR      r0,[r0,#0]  ; UART3_rx_buf
000e6a  493c              LDR      r1,|L1.3932|
000e6c  6889              LDR      r1,[r1,#8]  ; UART3_rx_buf
000e6e  4008              ANDS     r0,r0,r1
000e70  493a              LDR      r1,|L1.3932|
000e72  6849              LDR      r1,[r1,#4]  ; UART3_rx_buf
000e74  4a39              LDR      r2,|L1.3932|
000e76  6892              LDR      r2,[r2,#8]  ; UART3_rx_buf
000e78  4011              ANDS     r1,r1,r2
000e7a  4288              CMP      r0,r1
000e7c  d0f3              BEQ      |L1.3686|
;;;936    
;;;937    	CPU_CRITICAL_ENTER();
000e7e  f7fffffe          BL       CPU_SR_Save
000e82  4605              MOV      r5,r0
;;;938    	data = RING_BUF_RD(UART3_rx_buf);
000e84  4935              LDR      r1,|L1.3932|
000e86  6848              LDR      r0,[r1,#4]  ; UART3_rx_buf
000e88  1c41              ADDS     r1,r0,#1
000e8a  4a34              LDR      r2,|L1.3932|
000e8c  6051              STR      r1,[r2,#4]  ; UART3_rx_buf
000e8e  4611              MOV      r1,r2
000e90  6889              LDR      r1,[r1,#8]  ; UART3_rx_buf
000e92  4001              ANDS     r1,r1,r0
000e94  68d2              LDR      r2,[r2,#0xc]  ; UART3_rx_buf
000e96  5c54              LDRB     r4,[r2,r1]
;;;939        CPU_CRITICAL_EXIT();
000e98  4628              MOV      r0,r5
000e9a  f7fffffe          BL       CPU_SR_Restore
;;;940    
;;;941    	return data;
000e9e  4620              MOV      r0,r4
;;;942    }
000ea0  bd70              POP      {r4-r6,pc}
;;;943    
                          ENDP

                  UART3_IRQHandler PROC
;;;944    void UART3_IRQHandler(void) //UART3_ISRHandler !!!!
000ea2  b530              PUSH     {r4,r5,lr}
;;;945    {
;;;946        uint8_t reg_iir,i;
;;;947    	 
;;;948    	reg_iir = (uint8_t)(LPC_UART3->IIR & 0x0F);
000ea4  4a2b              LDR      r2,|L1.3924|
000ea6  6892              LDR      r2,[r2,#8]
000ea8  f002000f          AND      r0,r2,#0xf
;;;949    	
;;;950    	if(reg_iir != 1)
000eac  2801              CMP      r0,#1
000eae  d03d              BEQ      |L1.3884|
;;;951    	{
;;;952    		reg_iir = reg_iir >> 1;
000eb0  1040              ASRS     r0,r0,#1
;;;953    		switch(reg_iir)
000eb2  2801              CMP      r0,#1
000eb4  d01c              BEQ      |L1.3824|
000eb6  2802              CMP      r0,#2
000eb8  d005              BEQ      |L1.3782|
000eba  2803              CMP      r0,#3
000ebc  d002              BEQ      |L1.3780|
000ebe  2806              CMP      r0,#6
000ec0  d132              BNE      |L1.3880|
000ec2  e001              B        |L1.3784|
                  |L1.3780|
;;;954    		{
;;;955    		  case 0x3: /* Highest */
;;;956    			{
;;;957    			
;;;958    			}
;;;959    			break;
000ec4  e031              B        |L1.3882|
                  |L1.3782|
;;;960    			case 0x2: /* Second */
;;;961    			case 0x6:
000ec6  bf00              NOP      
                  |L1.3784|
;;;962    			{
;;;963    				while(LPC_UART3->LSR & LSR_RDR)
000ec8  e00b              B        |L1.3810|
                  |L1.3786|
;;;964    				{
;;;965    					RING_BUF_WR(UART3_rx_buf,LPC_UART3->RBR);	
000eca  4b22              LDR      r3,|L1.3924|
000ecc  781c              LDRB     r4,[r3,#0]
000ece  4b23              LDR      r3,|L1.3932|
000ed0  681a              LDR      r2,[r3,#0]  ; UART3_rx_buf
000ed2  1c53              ADDS     r3,r2,#1
000ed4  4d21              LDR      r5,|L1.3932|
000ed6  602b              STR      r3,[r5,#0]  ; UART3_rx_buf
000ed8  462b              MOV      r3,r5
000eda  689b              LDR      r3,[r3,#8]  ; UART3_rx_buf
000edc  4013              ANDS     r3,r3,r2
000ede  68ed              LDR      r5,[r5,#0xc]  ; UART3_rx_buf
000ee0  54ec              STRB     r4,[r5,r3]
                  |L1.3810|
000ee2  4a1c              LDR      r2,|L1.3924|
000ee4  7d12              LDRB     r2,[r2,#0x14]         ;963
000ee6  f0020201          AND      r2,r2,#1              ;963
000eea  2a00              CMP      r2,#0                 ;963
000eec  d1ed              BNE      |L1.3786|
;;;966    				}
;;;967    
;;;968    			}
;;;969    			break;
000eee  e01c              B        |L1.3882|
                  |L1.3824|
;;;970    			case 0x1:  /* Third */
;;;971    			{
;;;972    			    i = 16;
000ef0  2110              MOVS     r1,#0x10
;;;973    				while (i && RING_BUF_COUNT(UART3_tx_buf))
000ef2  e00d              B        |L1.3856|
                  |L1.3828|
;;;974            {
;;;975                 i--;
000ef4  1e4a              SUBS     r2,r1,#1
000ef6  b2d1              UXTB     r1,r2
;;;976                 LPC_UART3->THR = RING_BUF_RD(UART3_tx_buf);
000ef8  4b17              LDR      r3,|L1.3928|
000efa  685a              LDR      r2,[r3,#4]  ; UART3_tx_buf
000efc  1c53              ADDS     r3,r2,#1
000efe  4c16              LDR      r4,|L1.3928|
000f00  6063              STR      r3,[r4,#4]  ; UART3_tx_buf
000f02  4623              MOV      r3,r4
000f04  689b              LDR      r3,[r3,#8]  ; UART3_tx_buf
000f06  4013              ANDS     r3,r3,r2
000f08  68e4              LDR      r4,[r4,#0xc]  ; UART3_tx_buf
000f0a  5ce3              LDRB     r3,[r4,r3]
000f0c  4c11              LDR      r4,|L1.3924|
000f0e  7023              STRB     r3,[r4,#0]
                  |L1.3856|
000f10  b149              CBZ      r1,|L1.3878|
000f12  4a11              LDR      r2,|L1.3928|
000f14  6812              LDR      r2,[r2,#0]            ;973  ; UART3_tx_buf
000f16  4b10              LDR      r3,|L1.3928|
000f18  685b              LDR      r3,[r3,#4]            ;973  ; UART3_tx_buf
000f1a  1ad2              SUBS     r2,r2,r3              ;973
000f1c  4b0e              LDR      r3,|L1.3928|
000f1e  689b              LDR      r3,[r3,#8]            ;973  ; UART3_tx_buf
000f20  401a              ANDS     r2,r2,r3              ;973
000f22  2a00              CMP      r2,#0                 ;973
000f24  d1e6              BNE      |L1.3828|
                  |L1.3878|
;;;977            }  
;;;978    			}
;;;979    			break;
000f26  e000              B        |L1.3882|
                  |L1.3880|
;;;980    			default :
;;;981    			break;
000f28  bf00              NOP      
                  |L1.3882|
000f2a  bf00              NOP                            ;959
                  |L1.3884|
;;;982    		}
;;;983    	}
;;;984    }
000f2c  bd30              POP      {r4,r5,pc}
;;;985    #endif
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000f2e  f000021f          AND      r2,r0,#0x1f
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000f32  2101              MOVS     r1,#1
000f34  4091              LSLS     r1,r1,r2
000f36  0942              LSRS     r2,r0,#5
000f38  0092              LSLS     r2,r2,#2
000f3a  f10222e0          ADD      r2,r2,#0xe000e000
000f3e  f8c21100          STR      r1,[r2,#0x100]
;;;1099   }
000f42  4770              BX       lr
;;;1100   
                          ENDP

                  |L1.3908|
                          DCD      0x40098000
                  |L1.3912|
                          DCD      UART2_tx_buf
                  |L1.3916|
                          DCD      ||smm||
                  |L1.3920|
                          DCD      0x2009c000
                  |L1.3924|
                          DCD      0x4009c000
                  |L1.3928|
                          DCD      UART3_tx_buf
                  |L1.3932|
                          DCD      UART3_rx_buf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  UART0_tx_buf
                          %        16
                  UART0_rx_buf
                          %        16
                  tx_buffer0
                          %        256
                  rx_buffer0
                          %        256
                  UART1_tx_buf
                          %        16
                  UART1_rx_buf
                          %        16
                  tx_buffer1
                          %        256
                  rx_buffer1
                          %        256
                  UART2_tx_buf
                          %        16
                  UART2_rx_buf
                          %        16
                  UART2_rx_buf_copy
                          %        16
                  tx_buffer2
                          %        512
                  rx_buffer2
                          %        512
                  rx_buffer2_copy
                          %        512
                  UART3_tx_buf
                          %        16
                  UART3_rx_buf
                          %        16
                  tx_buffer3
                          %        256
                  rx_buffer3
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  printf_lock
                          DCD      0x00000000
                  ||smm||
                          DCD      0x00000000

                          AREA ETHERNET_RAM, DATA, ALIGN=3

                  uart_buf_printf
                          %        128
