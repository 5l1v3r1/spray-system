L 1 "app\crc\MF_CRC8.c"
N/******************************************************************************* 
N*                      CRC8  functions algorithm  liboray                      * 
N*   file : MF_CRC8.c                                                           *
N*                                                                              *
N*   history :                                                                  * 
N*     v1.0 2013-09-13   feng                                                   *
N*******************************************************************************/ 
N
N/*
N * head file       
N */
N#define G8_X5_X4     // for generator polynomial:G(x)=x8+x5+x4+1 
N//#define G8_X2_X1   // for generator polynomial:G(x)=x8+x2+x+1
Nconst unsigned char CRC8_INIT = 0x77;
N
N#ifdef G8_X5_X4
N/*  
N * crc table for generator polynomial:G(x)=x8+x5+x4+1
N */  
Nconst unsigned char CRC8_TAB[256] =
N{  
N    0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41, 
N    0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,    
N    0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,     
N    0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,    
N    0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,   
N    0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,  
N    0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,  
N    0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,  
N    0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,     
N    0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,   
N    0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,    
N    0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,     
N    0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,     
N    0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,    
N    0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,    
N    0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35, 
N};
N
N
N// caculate crc value by lookup table
Nunsigned char Get_CRC8_Check_Sum(unsigned char *pchMessage,unsigned int dwLength,unsigned char ucCRC8) 
N{ 
N    unsigned char ucIndex; 
N     
N    while (dwLength--) 
N    { 
N        ucIndex = ucCRC8^(*pchMessage++); 
N        ucCRC8  = CRC8_TAB[ucIndex]; 
N    } 
N
N    return(ucCRC8); 
N} 
N
N#if 0
S// caculate crc value directly  
Sunsigned char Get_Direct_CRC8_Check_Sum(unsigned char ptr, unsigned char len) 
S{ 
S    unsigned char i; 
S    unsigned char crc=0;
S    unsigned int genPoly = 0x8C;     
S
S    while(len--!=0) 
S    { 
S        for(i=1; i!=0; i=2) 
S        { 
S            if((crc&1)!=0) {crc=2; crc^=0x8C;} 
S            else crc=2; 
S             
S            if((ptr&i)!=0) crc^=0x8C; 
S        } 
S
S        ptr++; 
S    }
S
S    return(crc);  
S}
N#endif
N
N
N#else
S
S/*  
S * crc table for generator polynomial:G(x)=x8+x2+x+1
S */ 
Sconst unsigned char CRC8_TAB[256] = 
S{    
S    0x00,0x07,0x0E,0x09,0x1C,0x1B,0x12,0x15,0x38,0x3F,0x36,0x31,0x24,0x23,0x2A,0x2D,        
S    0x70,0x77,0x7E,0x79,0x6C,0x6B,0x62,0x65,0x48,0x4F,0x46,0x41,0x54,0x53,0x5A,0x5D,   
S    0xE0,0xE7,0xEE,0xE9,0xFC,0xFB,0xF2,0xF5,0xD8,0xDF,0xD6,0xD1,0xC4,0xC3,0xCA,0xCD,  
S    0x90,0x97,0x9E,0x99,0x8C,0x8B,0x82,0x85,0xA8,0xAF,0xA6,0xA1,0xB4,0xB3,0xBA,0xBD,  
S    0xC7,0xC0,0xC9,0xCE,0xDB,0xDC,0xD5,0xD2,0xFF,0xF8,0xF1,0xF6,0xE3,0xE4,0xED,0xEA,  
S    0xB7,0xB0,0xB9,0xBE,0xAB,0xAC,0xA5,0xA2,0x8F,0x88,0x81,0x86,0x93,0x94,0x9D,0x9A,   
S    0x27,0x20,0x29,0x2E,0x3B,0x3C,0x35,0x32,0x1F,0x18,0x11,0x16,0x03,0x04,0x0D,0x0A,  
S    0x57,0x50,0x59,0x5E,0x4B,0x4C,0x45,0x42,0x6F,0x68,0x61,0x66,0x73,0x74,0x7D,0x7A,   
S    0x89,0x8E,0x87,0x80,0x95,0x92,0x9B,0x9C,0xB1,0xB6,0xBF,0xB8,0xAD,0xAA,0xA3,0xA4,   
S    0xF9,0xFE,0xF7,0xF0,0xE5,0xE2,0xEB,0xEC,0xC1,0xC6,0xCF,0xC8,0xDD,0xDA,0xD3,0xD4,  
S    0x69,0x6E,0x67,0x60,0x75,0x72,0x7B,0x7C,0x51,0x56,0x5F,0x58,0x4D,0x4A,0x43,0x44,     
S    0x19,0x1E,0x17,0x10,0x05,0x02,0x0B,0x0C,0x21,0x26,0x2F,0x28,0x3D,0x3A,0x33,0x34,   
S    0x4E,0x49,0x40,0x47,0x52,0x55,0x5C,0x5B,0x76,0x71,0x78,0x7F,0x6A,0x6D,0x64,0x63, 
S    0x3E,0x39,0x30,0x37,0x22,0x25,0x2C,0x2B,0x06,0x01,0x08,0x0F,0x1A,0x1D,0x14,0x13,   
S    0xAE,0xA9,0xA0,0xA7,0xB2,0xB5,0xBC,0xBB,0x96,0x91,0x98,0x9F,0x8A,0x8D,0x84,0x83,   
S    0xDE,0xD9,0xD0,0xD7,0xC2,0xC5,0xCC,0xCB,0xE6,0xE1,0xE8,0xEF,0xFA,0xFD,0xF4,0xF3 
S}; 
S  
Sunsigned char Get_CRC8_Check_Sum(unsigned char *pchMessage,unsigned int dwLength,unsigned char ucCRC8)   
S{ 
S    unsigned char ucIndex; 
S
S    while(dwLength--)
S    {  
S        ucIndex = ucCRC8^(*pchMessage++); 
S        ucCRC8  = CRC8_TAB[ucIndex]; 
S    }
S    //return (~ucCRC8); 
S    return ucCRC8;
S} 
S
S#if 0
S// caculate crc value directly  
Sunsigned char Get_Direct_CRC8_Check_Sum(string &data,unsigned int datalen)(unsigned char *pchMessage,unsigned int dwLength,unsigned char ucCRC) 
S{ 
S    unsigned int i;
S    unsigned char genPoly = 0x07;
S    
S    while(dwLength--)
S    {  
S        ucCRC ^= *pchMessage; 
S        
S        for(i=0; i<8; i++) 
S        {  
S            if ( ucCRC & 0x80 ) ucCRC = (ucCRC << 1) ^ genPoly;     
S            else ucCRC <<= 1;  
S        } 
S    }
S  
S    CRC &= 0xff;
S    return CRC; 
S} 
S#endif
S
S
N#endif
N
N/*
N**  Descriptions: CRC8 Verify function                                  
N**  Input:        Data to Verify,Stream length = Data + checksum                    
N**  Output:       True or False (CRC Verify Result)                                                        
N*/                  
N//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
Nunsigned int Verify_CRC8_Check_Sum(unsigned char *pchMessage, unsigned int dwLength) 
N{
N    unsigned char ucExpected = 0; 
N     
N    if ((pchMessage == 0) || (dwLength <= 2)) return 0; 
N    
N    ucExpected = Get_CRC8_Check_Sum (pchMessage, dwLength-1, CRC8_INIT); 
N     
N    return ( ucExpected == pchMessage[dwLength-1] );
N}  
N
N/*
N**  Descriptions: append CRC8 to the end of data                                
N**  Input:        Data to CRC and append,Stream length = Data + checksum                    
N**  Output:       True or False (CRC Verify Result)                                                        
N*/ 
Nvoid Append_CRC8_Check_Sum(unsigned char *pchMessage, unsigned int dwLength) 
N{  
N    unsigned char ucCRC = 0; 
N     
N    if ((pchMessage == 0) || (dwLength <= 2)) return;
N
N    ucCRC = Get_CRC8_Check_Sum ( (unsigned char *)pchMessage, dwLength-1, CRC8_INIT); 
N     
N    pchMessage[dwLength-1] = ucCRC; 
N}
N
N/*
N********************************************************************************
N*                        END
N********************************************************************************
N*/
