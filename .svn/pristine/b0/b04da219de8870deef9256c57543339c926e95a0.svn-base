/**
  ******************** (C) COPYRIGHT 2011 DJI **********************************
  *
  * @Project Name       : BL_WKM2_MAIN.uvproj
  * @File Name          : can_package.c
  * @Environment        : keil mdk4.12/LPC1765/100M cclock
  * @Author&Date        : 2011-01-27 
  * @Version            : 1.10
  ******************************************************************************
  * @Description
  *	          
  */

/* Includes ------------------------------------------------------------------*/
#include "../cstartup/type.h"
#include "../drivers/drivers.h"
#include "../app/cfg/cfg_inc.h"
#include "can_inc.h"

/* public variables ----------------------------------------------------------*/
CPU_INT08U        upgradeRxBuf[CAN_BUFSIZE] __attribute__ ((aligned (4))) = {0};	   //
CAN_RING_BUF_Type upgradeRxRingBuf          = {0};

CPU_INT08U        upgradeTxBuf[CAN_BUFSIZE] __attribute__ ((aligned (4))) = {0};
CAN_RING_BUF_Type upgradeTxRingBuf          = {0};

/* public Function -----------------------------------------------------------*/
/****************************** can ring buffer process ***************************/
void CAN_RING_BUF_Init(void)
{
    upgradeRxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
	upgradeRxRingBuf.wrIdx   = 0;
	upgradeRxRingBuf.rdIdx   = 0;
	upgradeRxRingBuf.pBuf    = &upgradeRxBuf[0];
	upgradeRxRingBuf.id      = UPGRADE_RX_ID;	   /* 接收缓冲区可以不写 */
	upgradeRxRingBuf.state   = 0;	   /* first state */

	upgradeTxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
	upgradeTxRingBuf.wrIdx   = 0;
	upgradeTxRingBuf.rdIdx   = 0;
	upgradeTxRingBuf.pBuf    = &upgradeTxBuf[0];
	upgradeTxRingBuf.id      = UPGRADE_TX_ID;     /* 中转设备接收被升级的CAN设备通道 */
	upgradeTxRingBuf.state   = 0;
}

/* 环形缓冲区操作 */
uint32_t CAN_RING_BUF_RD(CAN_RING_BUF_Type *ring_buf)
{           
  uint32_t tmp;
	tmp = (*ring_buf).pBuf[(*ring_buf).rdIdx & (*ring_buf).mask];
	(*ring_buf).rdIdx++;
	return tmp;                       
}

void CAN_RING_BUF_WR(CAN_RING_BUF_Type *ring_buf, uint8_t DataIn) 	
{
	(*ring_buf).pBuf[(*ring_buf).wrIdx&(*ring_buf).mask] = DataIn;
	(*ring_buf).wrIdx++;
} 

uint32_t CAN_RING_BUF_IS_FULL(CAN_RING_BUF_Type *ring_buf)
{ 
	/* 注意1为逻辑真值,0为逻辑假值,这里要与DEF_TRUE和DEF_FALSE的值相区别 */
	return ( (((*ring_buf).wrIdx+1)&(*ring_buf).mask) == ((*ring_buf).rdIdx&(*ring_buf).mask) );
}

uint32_t CAN_RING_BUF_IS_EMPTY(CAN_RING_BUF_Type *ring_buf)
{
    /* 注意1为逻辑真值,0为逻辑假值,这里要与DEF_TRUE和DEF_FALSE的值相区别 */
	return ( ((*ring_buf).wrIdx&(*ring_buf).mask) == ((*ring_buf).rdIdx&(*ring_buf).mask) );	
}

uint32_t CAN_RING_BUF_COUNT(CAN_RING_BUF_Type *ring_buf)
{
	return ( ((*ring_buf).wrIdx-(*ring_buf).rdIdx) & (*ring_buf).mask );
}

/*
 * param[in]   dst: buf be written to
 * param[out]  src: pointer to source buf
 * param[in]   cnt: the number of data to be written
 * Return      the number really to be written
 * Notes       read data to can ringbuf
 */
uint32_t CAN_RING_BUF_WR_BLOCK(CAN_RING_BUF_Type *dst,uint8_t *src,uint32_t cnt)
{
    uint32_t tmp_cnt;

	/* 注意:计算可以写入的数量 */
	tmp_cnt = CAN_BUFSIZE - CAN_RING_BUF_COUNT( dst ); 
	
	if(tmp_cnt>cnt) /* 缓冲区中至少有cnt+1个空白位置 */
	{
	    tmp_cnt = cnt;
	}
	else
	{
	    tmp_cnt = 0;
		return tmp_cnt; /* 防止缓冲区写满 */
	}

	while(tmp_cnt--)
	{
		(*dst).pBuf[(*dst).wrIdx & (*dst).mask] = *src;
	    (*dst).wrIdx++;
		src++;    
	}

	return cnt;
}

/*
 * param[in]   dst: read data form src to dst
 * param[out]  src: buf to be read
 * param[in]   cnt: the number of data to be read 
 * Return      the number really to be written
 * Notes       read data form can ringbuf
 */
uint32_t CAN_RING_BUF_RD_BLOCK(uint8_t *dst,CAN_RING_BUF_Type *src,uint32_t cnt)
{
	uint32_t tmp_cnt;

	tmp_cnt = CAN_RING_BUF_COUNT( src );
	
	cnt     = (cnt<=tmp_cnt) ? cnt:tmp_cnt;

	tmp_cnt = cnt;
	while(tmp_cnt--)
	{
		*dst = (*src).pBuf[(*src).rdIdx & (*src).mask];
	   (*src).rdIdx++;
	   dst++;
	}

	return cnt;
}

/****************************** CAN send package process ***************************/
void CAN_tx_function( LPC_CAN_TypeDef *LPC_CANx, CAN_RING_BUF_Type *buf, CPU_INT32U index_TBS ) 
{
	CPU_INT32U cnt = 0;
	CPU_INT32U can_status = 0;
	
	cnt = CAN_RING_BUF_COUNT( buf );
	if( cnt <= 0 ) {
	    return;
	}
	 
	can_status = ( LPC_CANx->SR & 0x000c0c0c );
	if( index_TBS == 1 ) {
		if( ( can_status & 0x0c ) != 0x0c ) {
			return;
		}
		CAN_tx_action( LPC_CANx, buf, cnt , 1 ); 
	} else if( index_TBS == 2 ) {
		if( ( can_status & 0x0c00 ) != 0x0c00 ) {
			return;
		}
		CAN_tx_action( LPC_CANx, buf, cnt, 2 );
	} else if( index_TBS == 3 ) {
		if( ( can_status & 0x0c0000 ) != 0x0c0000 ) {
			return;
		}
		CAN_tx_action( LPC_CANx, buf, cnt, 3 );
	} else if( index_TBS == 4 ) { // 如果有这么多数据则一次填入三个寄存器
		if( ( can_status & 0x040404 ) != 0x040404 ) {
			return;
		}
		CAN_tx_action_all( LPC_CANx, buf, cnt );
	}   
}


/**************************** VIEW send package ***********************/
void CAN_sendbytes_View( LPC_CAN_TypeDef *LPC_CANx, CAN_RING_BUF_Type *dst, CPU_INT08U *src, CPU_INT16U length )
{

	if( CAN_RING_BUF_WR_BLOCK( dst, src, length ) < length ) {
	   // todo stuff tail data error
	} 
	
	if( ( LPC_CANx->GSR & ( 1 << 2 ) ) && ( ( LPC_CANx->SR&0x040404 ) == 0x040404 ) ) {
	    CAN_tx_function( LPC_CANx, dst, 4 );
	}
}
 
/*******************  (C) COPYRIGHT 2011 DJI ************END OF FILE***********/


