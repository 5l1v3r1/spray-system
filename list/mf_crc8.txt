; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\mf_crc8.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\mf_crc8.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\cstartup -I.\drivers\uart -I.\app\cfg -I.\iap -I.\drivers -I.\usb -I.\drivers\adc -I.\drivers\gpio -I.\drivers -I.\RTE\_lpc17xx_can_loader_debug -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DLPC175x_6x -D__DEBUG_UART2_PRINTF__ -D__UART0__ -D__UART1__ -D__UART2__ -D__UART3__ -D__UART2_ENABLE__ -D__UART3_ENABLE__ -D__UART0_ENABLE__ -D__UART1_ENABLE__ --omf_browse=.\output\mf_crc8.crf app\crc\MF_CRC8.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Get_CRC8_Check_Sum PROC
;;;41     // caculate crc value by lookup table
;;;42     unsigned char Get_CRC8_Check_Sum(unsigned char *pchMessage,unsigned int dwLength,unsigned char ucCRC8) 
000000  b530              PUSH     {r4,r5,lr}
;;;43     { 
000002  4603              MOV      r3,r0
;;;44         unsigned char ucIndex; 
;;;45          
;;;46         while (dwLength--) 
000004  e005              B        |L1.18|
                  |L1.6|
;;;47         { 
;;;48             ucIndex = ucCRC8^(*pchMessage++); 
000006  f8130b01          LDRB     r0,[r3],#1
00000a  ea800402          EOR      r4,r0,r2
;;;49             ucCRC8  = CRC8_TAB[ucIndex]; 
00000e  4818              LDR      r0,|L1.112|
000010  5d02              LDRB     r2,[r0,r4]
                  |L1.18|
000012  1e08              SUBS     r0,r1,#0              ;46
000014  f1a10101          SUB      r1,r1,#1              ;46
000018  d1f5              BNE      |L1.6|
;;;50         } 
;;;51     
;;;52         return(ucCRC8); 
00001a  4610              MOV      r0,r2
;;;53     } 
00001c  bd30              POP      {r4,r5,pc}
;;;54     
                          ENDP

                  Verify_CRC8_Check_Sum PROC
;;;150    //CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
;;;151    unsigned int Verify_CRC8_Check_Sum(unsigned char *pchMessage, unsigned int dwLength) 
00001e  b570              PUSH     {r4-r6,lr}
;;;152    {
000020  4605              MOV      r5,r0
000022  460c              MOV      r4,r1
;;;153        unsigned char ucExpected = 0; 
000024  2600              MOVS     r6,#0
;;;154         
;;;155        if ((pchMessage == 0) || (dwLength <= 2)) return 0; 
000026  b10d              CBZ      r5,|L1.44|
000028  2c02              CMP      r4,#2
00002a  d801              BHI      |L1.48|
                  |L1.44|
00002c  2000              MOVS     r0,#0
                  |L1.46|
;;;156        
;;;157        ucExpected = Get_CRC8_Check_Sum (pchMessage, dwLength-1, CRC8_INIT); 
;;;158         
;;;159        return ( ucExpected == pchMessage[dwLength-1] );
;;;160    }  
00002e  bd70              POP      {r4-r6,pc}
                  |L1.48|
000030  1e61              SUBS     r1,r4,#1              ;157
000032  2277              MOVS     r2,#0x77              ;157
000034  4628              MOV      r0,r5                 ;157
000036  f7fffffe          BL       Get_CRC8_Check_Sum
00003a  4606              MOV      r6,r0                 ;157
00003c  1e60              SUBS     r0,r4,#1              ;159
00003e  5c28              LDRB     r0,[r5,r0]            ;159
000040  42b0              CMP      r0,r6                 ;159
000042  d101              BNE      |L1.72|
000044  2001              MOVS     r0,#1                 ;159
000046  e7f2              B        |L1.46|
                  |L1.72|
000048  2000              MOVS     r0,#0                 ;159
00004a  e7f0              B        |L1.46|
;;;161    
                          ENDP

                  Append_CRC8_Check_Sum PROC
;;;166    */ 
;;;167    void Append_CRC8_Check_Sum(unsigned char *pchMessage, unsigned int dwLength) 
00004c  b570              PUSH     {r4-r6,lr}
;;;168    {  
00004e  4605              MOV      r5,r0
000050  460c              MOV      r4,r1
;;;169        unsigned char ucCRC = 0; 
000052  2600              MOVS     r6,#0
;;;170         
;;;171        if ((pchMessage == 0) || (dwLength <= 2)) return;
000054  b10d              CBZ      r5,|L1.90|
000056  2c02              CMP      r4,#2
000058  d800              BHI      |L1.92|
                  |L1.90|
;;;172    
;;;173        ucCRC = Get_CRC8_Check_Sum ( (unsigned char *)pchMessage, dwLength-1, CRC8_INIT); 
;;;174         
;;;175        pchMessage[dwLength-1] = ucCRC; 
;;;176    }
00005a  bd70              POP      {r4-r6,pc}
                  |L1.92|
00005c  1e61              SUBS     r1,r4,#1              ;173
00005e  2277              MOVS     r2,#0x77              ;173
000060  4628              MOV      r0,r5                 ;173
000062  f7fffffe          BL       Get_CRC8_Check_Sum
000066  4606              MOV      r6,r0                 ;173
000068  1e60              SUBS     r0,r4,#1              ;175
00006a  542e              STRB     r6,[r5,r0]            ;175
00006c  bf00              NOP      
00006e  e7f4              B        |L1.90|
;;;177    
                          ENDP

                  |L1.112|
                          DCD      CRC8_TAB

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CRC8_INIT
000000  77                DCB      0x77
                  CRC8_TAB
000001  005ebc            DCB      0x00,0x5e,0xbc
000004  e2613fdd          DCB      0xe2,0x61,0x3f,0xdd
000008  83c29c7e          DCB      0x83,0xc2,0x9c,0x7e
00000c  20a3fd1f          DCB      0x20,0xa3,0xfd,0x1f
000010  419dc321          DCB      0x41,0x9d,0xc3,0x21
000014  7ffca240          DCB      0x7f,0xfc,0xa2,0x40
000018  1e5f01e3          DCB      0x1e,0x5f,0x01,0xe3
00001c  bd3e6082          DCB      0xbd,0x3e,0x60,0x82
000020  dc237d9f          DCB      0xdc,0x23,0x7d,0x9f
000024  c1421cfe          DCB      0xc1,0x42,0x1c,0xfe
000028  a0e1bf5d          DCB      0xa0,0xe1,0xbf,0x5d
00002c  0380de3c          DCB      0x03,0x80,0xde,0x3c
000030  62bee002          DCB      0x62,0xbe,0xe0,0x02
000034  5cdf8163          DCB      0x5c,0xdf,0x81,0x63
000038  3d7c22c0          DCB      0x3d,0x7c,0x22,0xc0
00003c  9e1d43a1          DCB      0x9e,0x1d,0x43,0xa1
000040  ff4618fa          DCB      0xff,0x46,0x18,0xfa
000044  a427799b          DCB      0xa4,0x27,0x79,0x9b
000048  c584da38          DCB      0xc5,0x84,0xda,0x38
00004c  66e5bb59          DCB      0x66,0xe5,0xbb,0x59
000050  07db8567          DCB      0x07,0xdb,0x85,0x67
000054  39bae406          DCB      0x39,0xba,0xe4,0x06
000058  581947a5          DCB      0x58,0x19,0x47,0xa5
00005c  fb7826c4          DCB      0xfb,0x78,0x26,0xc4
000060  9a653bd9          DCB      0x9a,0x65,0x3b,0xd9
000064  87045ab8          DCB      0x87,0x04,0x5a,0xb8
000068  e6a7f91b          DCB      0xe6,0xa7,0xf9,0x1b
00006c  45c6987a          DCB      0x45,0xc6,0x98,0x7a
000070  24f8a644          DCB      0x24,0xf8,0xa6,0x44
000074  1a99c725          DCB      0x1a,0x99,0xc7,0x25
000078  7b3a6486          DCB      0x7b,0x3a,0x64,0x86
00007c  d85b05e7          DCB      0xd8,0x5b,0x05,0xe7
000080  b98cd230          DCB      0xb9,0x8c,0xd2,0x30
000084  6eedb351          DCB      0x6e,0xed,0xb3,0x51
000088  0f4e10f2          DCB      0x0f,0x4e,0x10,0xf2
00008c  ac2f7193          DCB      0xac,0x2f,0x71,0x93
000090  cd114fad          DCB      0xcd,0x11,0x4f,0xad
000094  f3702ecc          DCB      0xf3,0x70,0x2e,0xcc
000098  92d38d6f          DCB      0x92,0xd3,0x8d,0x6f
00009c  31b2ec0e          DCB      0x31,0xb2,0xec,0x0e
0000a0  50aff113          DCB      0x50,0xaf,0xf1,0x13
0000a4  4dce9072          DCB      0x4d,0xce,0x90,0x72
0000a8  2c6d33d1          DCB      0x2c,0x6d,0x33,0xd1
0000ac  8f0c52b0          DCB      0x8f,0x0c,0x52,0xb0
0000b0  ee326c8e          DCB      0xee,0x32,0x6c,0x8e
0000b4  d0530def          DCB      0xd0,0x53,0x0d,0xef
0000b8  b1f0ae4c          DCB      0xb1,0xf0,0xae,0x4c
0000bc  1291cf2d          DCB      0x12,0x91,0xcf,0x2d
0000c0  73ca9476          DCB      0x73,0xca,0x94,0x76
0000c4  28abf517          DCB      0x28,0xab,0xf5,0x17
0000c8  490856b4          DCB      0x49,0x08,0x56,0xb4
0000cc  ea6937d5          DCB      0xea,0x69,0x37,0xd5
0000d0  8b5709eb          DCB      0x8b,0x57,0x09,0xeb
0000d4  b536688a          DCB      0xb5,0x36,0x68,0x8a
0000d8  d495cb29          DCB      0xd4,0x95,0xcb,0x29
0000dc  77f4aa48          DCB      0x77,0xf4,0xaa,0x48
0000e0  16e9b755          DCB      0x16,0xe9,0xb7,0x55
0000e4  0b88d634          DCB      0x0b,0x88,0xd6,0x34
0000e8  6a2b7597          DCB      0x6a,0x2b,0x75,0x97
0000ec  c94a14f6          DCB      0xc9,0x4a,0x14,0xf6
0000f0  a8742ac8          DCB      0xa8,0x74,0x2a,0xc8
0000f4  96154ba9          DCB      0x96,0x15,0x4b,0xa9
0000f8  f7b6e80a          DCB      0xf7,0xb6,0xe8,0x0a
0000fc  54d7896b          DCB      0x54,0xd7,0x89,0x6b
000100  35                DCB      0x35
