; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\can_package.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\can_package.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\cstartup -I.\drivers\uart -I.\app\cfg -I.\iap -I.\drivers -I.\usb -I.\drivers\adc -I.\drivers\gpio -I.\drivers -I.\RTE\_lpc17xx_can_loader_debug -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DLPC175x_6x -D__DEBUG_UART2_PRINTF__ -D__UART0__ -D__UART1__ -D__UART2__ -D__UART3__ -D__UART2_ENABLE__ -D__UART3_ENABLE__ -D__UART0_ENABLE__ -D__UART1_ENABLE__ --omf_browse=.\output\can_package.crf can\can_package.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CAN_RING_BUF_Init PROC
;;;59     /****************************** can ring buffer process ***************************/
;;;60     void CAN_RING_BUF_Init(void)
000000  f44f7000          MOV      r0,#0x200
;;;61     {
;;;62     #if __CAN1_ENABLE__	
;;;63     	can1RxRingBuf.size    = CAN_BUFSIZE;
000004  49b8              LDR      r1,|L1.744|
000006  60c8              STR      r0,[r1,#0xc]  ; can1RxRingBuf
;;;64       can1RxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
000008  1e40              SUBS     r0,r0,#1
00000a  6088              STR      r0,[r1,#8]  ; can1RxRingBuf
;;;65     	can1RxRingBuf.wrIdx   = 0;
00000c  2000              MOVS     r0,#0
00000e  6008              STR      r0,[r1,#0]  ; can1RxRingBuf
;;;66     	can1RxRingBuf.rdIdx   = 0;
000010  6048              STR      r0,[r1,#4]  ; can1RxRingBuf
;;;67     	can1RxRingBuf.pBuf    = &can1RxBuf[0];
000012  48b6              LDR      r0,|L1.748|
000014  6148              STR      r0,[r1,#0x14]  ; can1RxRingBuf
;;;68     	can1RxRingBuf.id      = CAN1_RX_ID;	   /* 接收缓冲区可以不写 */
000016  f2404012          MOV      r0,#0x412
00001a  6108              STR      r0,[r1,#0x10]  ; can1RxRingBuf
;;;69     	can1RxRingBuf.state   = 0;	   /* first state */
00001c  2000              MOVS     r0,#0
00001e  7608              STRB     r0,[r1,#0x18]
;;;70     //CAN1 的第二个BUF
;;;71     	can1Rx2RingBuf.size    = CAN_BUFSIZE;
000020  f44f7000          MOV      r0,#0x200
000024  49b2              LDR      r1,|L1.752|
000026  60c8              STR      r0,[r1,#0xc]  ; can1Rx2RingBuf
;;;72       can1Rx2RingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
000028  1e40              SUBS     r0,r0,#1
00002a  6088              STR      r0,[r1,#8]  ; can1Rx2RingBuf
;;;73     	can1Rx2RingBuf.wrIdx   = 0;
00002c  2000              MOVS     r0,#0
00002e  6008              STR      r0,[r1,#0]  ; can1Rx2RingBuf
;;;74     	can1Rx2RingBuf.rdIdx   = 0;
000030  6048              STR      r0,[r1,#4]  ; can1Rx2RingBuf
;;;75     	can1Rx2RingBuf.pBuf    = &can1Rx2Buf[0];
000032  48b0              LDR      r0,|L1.756|
000034  6148              STR      r0,[r1,#0x14]  ; can1Rx2RingBuf
;;;76     	can1Rx2RingBuf.id      = CAN1_RX_ID2;	   /* 接收缓冲区可以不写 */
000036  f2406017          MOV      r0,#0x617
00003a  6108              STR      r0,[r1,#0x10]  ; can1Rx2RingBuf
;;;77     	can1Rx2RingBuf.state   = 0;	   /* first state */
00003c  2000              MOVS     r0,#0
00003e  7608              STRB     r0,[r1,#0x18]
;;;78     
;;;79     //CAN1 的第三个BUF
;;;80     	can1RxUpgradeRingBuf.size    = CAN_BUFSIZE;
000040  f44f7000          MOV      r0,#0x200
000044  49ac              LDR      r1,|L1.760|
000046  60c8              STR      r0,[r1,#0xc]  ; can1RxUpgradeRingBuf
;;;81       can1RxUpgradeRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
000048  1e40              SUBS     r0,r0,#1
00004a  6088              STR      r0,[r1,#8]  ; can1RxUpgradeRingBuf
;;;82     	can1RxUpgradeRingBuf.wrIdx   = 0;
00004c  2000              MOVS     r0,#0
00004e  6008              STR      r0,[r1,#0]  ; can1RxUpgradeRingBuf
;;;83     	can1RxUpgradeRingBuf.rdIdx   = 0;
000050  6048              STR      r0,[r1,#4]  ; can1RxUpgradeRingBuf
;;;84     	can1RxUpgradeRingBuf.pBuf    = &can1RxUpgradeBuf[0];
000052  48aa              LDR      r0,|L1.764|
000054  6148              STR      r0,[r1,#0x14]  ; can1RxUpgradeRingBuf
;;;85     	can1RxUpgradeRingBuf.id      = CAN1_UPGRADE_ID;	   /* 接收缓冲区可以不写 */
000056  f24040fa          MOV      r0,#0x4fa
00005a  6108              STR      r0,[r1,#0x10]  ; can1RxUpgradeRingBuf
;;;86     	can1RxUpgradeRingBuf.state   = 0;	   /* first state */
00005c  2000              MOVS     r0,#0
00005e  7608              STRB     r0,[r1,#0x18]
;;;87     //CAN1 的第四个buf
;;;88     	can1RxLEDRingBuf.size    = CAN_BUFSIZE;
000060  f44f7000          MOV      r0,#0x200
000064  49a6              LDR      r1,|L1.768|
000066  60c8              STR      r0,[r1,#0xc]  ; can1RxLEDRingBuf
;;;89       can1RxLEDRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
000068  1e40              SUBS     r0,r0,#1
00006a  6088              STR      r0,[r1,#8]  ; can1RxLEDRingBuf
;;;90     	can1RxLEDRingBuf.wrIdx   = 0;
00006c  2000              MOVS     r0,#0
00006e  6008              STR      r0,[r1,#0]  ; can1RxLEDRingBuf
;;;91     	can1RxLEDRingBuf.rdIdx   = 0;
000070  6048              STR      r0,[r1,#4]  ; can1RxLEDRingBuf
;;;92     	can1RxLEDRingBuf.pBuf    = &can1RxLEDBuf[0];
000072  48a4              LDR      r0,|L1.772|
000074  6148              STR      r0,[r1,#0x14]  ; can1RxLEDRingBuf
;;;93     	can1RxLEDRingBuf.id      = CAN1_RX_RADAR;	   /* 接收缓冲区可以不写 */
000076  f44f70c0          MOV      r0,#0x180
00007a  6108              STR      r0,[r1,#0x10]  ; can1RxLEDRingBuf
;;;94     	can1RxLEDRingBuf.state   = 0;	   /* first state */
00007c  2000              MOVS     r0,#0
00007e  7608              STRB     r0,[r1,#0x18]
;;;95     
;;;96     	can1TxRingBuf.size	  = CAN_BUFSIZE;
000080  f44f7000          MOV      r0,#0x200
000084  49a0              LDR      r1,|L1.776|
000086  60c8              STR      r0,[r1,#0xc]  ; can1TxRingBuf
;;;97     	can1TxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
000088  1e40              SUBS     r0,r0,#1
00008a  6088              STR      r0,[r1,#8]  ; can1TxRingBuf
;;;98     	can1TxRingBuf.wrIdx   = 0;
00008c  2000              MOVS     r0,#0
00008e  6008              STR      r0,[r1,#0]  ; can1TxRingBuf
;;;99     	can1TxRingBuf.rdIdx   = 0;
000090  6048              STR      r0,[r1,#4]  ; can1TxRingBuf
;;;100    	can1TxRingBuf.pBuf    = &can1TxBuf[0];
000092  489e              LDR      r0,|L1.780|
000094  6148              STR      r0,[r1,#0x14]  ; can1TxRingBuf
;;;101    	can1TxRingBuf.id      = CAN1_TX_ID;     /* 中转设备接收被升级的CAN设备通道 */
000096  f2404013          MOV      r0,#0x413
00009a  6108              STR      r0,[r1,#0x10]  ; can1TxRingBuf
;;;102    	can1TxRingBuf.state   = 0;
00009c  2000              MOVS     r0,#0
00009e  7608              STRB     r0,[r1,#0x18]
;;;103    	
;;;104    	can1Tx2RingBuf.size	  = CAN_BUFSIZE;
0000a0  f44f7000          MOV      r0,#0x200
0000a4  499a              LDR      r1,|L1.784|
0000a6  60c8              STR      r0,[r1,#0xc]  ; can1Tx2RingBuf
;;;105    	can1Tx2RingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
0000a8  1e40              SUBS     r0,r0,#1
0000aa  6088              STR      r0,[r1,#8]  ; can1Tx2RingBuf
;;;106    	can1Tx2RingBuf.wrIdx   = 0;
0000ac  2000              MOVS     r0,#0
0000ae  6008              STR      r0,[r1,#0]  ; can1Tx2RingBuf
;;;107    	can1Tx2RingBuf.rdIdx   = 0;
0000b0  6048              STR      r0,[r1,#4]  ; can1Tx2RingBuf
;;;108    	can1Tx2RingBuf.pBuf    = &can1Tx2Buf[0];
0000b2  4898              LDR      r0,|L1.788|
0000b4  6148              STR      r0,[r1,#0x14]  ; can1Tx2RingBuf
;;;109    	can1Tx2RingBuf.id      = CAN1_TX_ID2;     /* 中转设备接收被升级的CAN设备通道 */
0000b6  2095              MOVS     r0,#0x95
0000b8  6108              STR      r0,[r1,#0x10]  ; can1Tx2RingBuf
;;;110    	can1Tx2RingBuf.state   = 0;
0000ba  2000              MOVS     r0,#0
0000bc  7608              STRB     r0,[r1,#0x18]
;;;111    	
;;;112    	can1Tx3RingBuf.size	  = CAN_BUFSIZE;
0000be  f44f7000          MOV      r0,#0x200
0000c2  4995              LDR      r1,|L1.792|
0000c4  60c8              STR      r0,[r1,#0xc]  ; can1Tx3RingBuf
;;;113    	can1Tx3RingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
0000c6  1e40              SUBS     r0,r0,#1
0000c8  6088              STR      r0,[r1,#8]  ; can1Tx3RingBuf
;;;114    	can1Tx3RingBuf.wrIdx   = 0;
0000ca  2000              MOVS     r0,#0
0000cc  6008              STR      r0,[r1,#0]  ; can1Tx3RingBuf
;;;115    	can1Tx3RingBuf.rdIdx   = 0;
0000ce  6048              STR      r0,[r1,#4]  ; can1Tx3RingBuf
;;;116    	can1Tx3RingBuf.pBuf    = &can1Tx3Buf[0];
0000d0  4892              LDR      r0,|L1.796|
0000d2  6148              STR      r0,[r1,#0x14]  ; can1Tx3RingBuf
;;;117    	can1Tx3RingBuf.id      = CAN1_TX_ID3;     /* 中转设备接收被升级的CAN设备通道 */
0000d4  f2406016          MOV      r0,#0x616
0000d8  6108              STR      r0,[r1,#0x10]  ; can1Tx3RingBuf
;;;118    	can1Tx3RingBuf.state   = 0;
0000da  2000              MOVS     r0,#0
0000dc  7608              STRB     r0,[r1,#0x18]
;;;119    	
;;;120    	can1UpgradeAckTxRingBuf.size	  = CAN_BUFSIZE;
0000de  f44f7000          MOV      r0,#0x200
0000e2  498f              LDR      r1,|L1.800|
0000e4  60c8              STR      r0,[r1,#0xc]  ; can1UpgradeAckTxRingBuf
;;;121    	can1UpgradeAckTxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
0000e6  1e40              SUBS     r0,r0,#1
0000e8  6088              STR      r0,[r1,#8]  ; can1UpgradeAckTxRingBuf
;;;122    	can1UpgradeAckTxRingBuf.wrIdx   = 0;
0000ea  2000              MOVS     r0,#0
0000ec  6008              STR      r0,[r1,#0]  ; can1UpgradeAckTxRingBuf
;;;123    	can1UpgradeAckTxRingBuf.rdIdx   = 0;
0000ee  6048              STR      r0,[r1,#4]  ; can1UpgradeAckTxRingBuf
;;;124    	can1UpgradeAckTxRingBuf.pBuf    = &can1UpgradeAckTxBuf[0];
0000f0  488c              LDR      r0,|L1.804|
0000f2  6148              STR      r0,[r1,#0x14]  ; can1UpgradeAckTxRingBuf
;;;125    	can1UpgradeAckTxRingBuf.id      = CAN1_UPGRADE_ACK_ID;     /* can升级时返回的CAN ID */
0000f4  f24050fa          MOV      r0,#0x5fa
0000f8  6108              STR      r0,[r1,#0x10]  ; can1UpgradeAckTxRingBuf
;;;126    	can1UpgradeAckTxRingBuf.state   = 0;
0000fa  2000              MOVS     r0,#0
0000fc  7608              STRB     r0,[r1,#0x18]
;;;127        
;;;128    	can1LEDTxRingBuf.size	  = CAN_BUFSIZE;
0000fe  f44f7000          MOV      r0,#0x200
000102  4989              LDR      r1,|L1.808|
000104  60c8              STR      r0,[r1,#0xc]  ; can1LEDTxRingBuf
;;;129    	can1LEDTxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
000106  1e40              SUBS     r0,r0,#1
000108  6088              STR      r0,[r1,#8]  ; can1LEDTxRingBuf
;;;130    	can1LEDTxRingBuf.wrIdx   = 0;
00010a  2000              MOVS     r0,#0
00010c  6008              STR      r0,[r1,#0]  ; can1LEDTxRingBuf
;;;131    	can1LEDTxRingBuf.rdIdx   = 0;
00010e  6048              STR      r0,[r1,#4]  ; can1LEDTxRingBuf
;;;132    	can1LEDTxRingBuf.pBuf    = &can1LEDTxBuf[0];
000110  4886              LDR      r0,|L1.812|
000112  6148              STR      r0,[r1,#0x14]  ; can1LEDTxRingBuf
;;;133    	can1LEDTxRingBuf.id      = CAN1_TX_LED_ID;     /* can升级时返回的CAN ID */
000114  20a1              MOVS     r0,#0xa1
000116  6108              STR      r0,[r1,#0x10]  ; can1LEDTxRingBuf
;;;134    	can1LEDTxRingBuf.state   = 0;    
000118  2000              MOVS     r0,#0
00011a  7608              STRB     r0,[r1,#0x18]
;;;135    #endif
;;;136    #if __CAN2_ENABLE__	
;;;137    	can2RxRingBuf.size    = CAN_BUFSIZE;
;;;138        can2RxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
;;;139    	can2RxRingBuf.wrIdx   = 0;
;;;140    	can2RxRingBuf.rdIdx   = 0;
;;;141    	can2RxRingBuf.pBuf    = &can2RxBuf[0];
;;;142    	can2RxRingBuf.id      = CAN2_RX_ID;	   /* 接收缓冲区可以不写 */
;;;143    	can2RxRingBuf.state   = 0;	   /* first state */
;;;144    
;;;145    	can2TxRingBuf.size	  = CAN_BUFSIZE;
;;;146    	can2TxRingBuf.mask    = ( CPU_INT32U )( CAN_BUFSIZE - 1 );
;;;147    	can2TxRingBuf.wrIdx   = 0;
;;;148    	can2TxRingBuf.rdIdx   = 0;
;;;149    	can2TxRingBuf.pBuf    = &can2TxBuf[0];
;;;150    	can2TxRingBuf.id      = CAN2_TX_ID;     /* 中转设备接收被升级的CAN设备通道 */
;;;151    	can2TxRingBuf.state   = 0;
;;;152    #endif	
;;;153    }
00011c  4770              BX       lr
;;;154    
                          ENDP

                  CAN_RING_BUF_RD PROC
;;;155    /* 环形缓冲区操作 */
;;;156    uint8_t CAN_RING_BUF_RD(CAN_RING_BUF_Type *ring_buf)
00011e  4601              MOV      r1,r0
;;;157    {
;;;158        uint8_t tmp;
;;;159    	tmp = (*ring_buf).pBuf[(*ring_buf).rdIdx & (*ring_buf).mask];
000120  684a              LDR      r2,[r1,#4]
000122  688b              LDR      r3,[r1,#8]
000124  401a              ANDS     r2,r2,r3
000126  694b              LDR      r3,[r1,#0x14]
000128  5c98              LDRB     r0,[r3,r2]
;;;160    	(*ring_buf).rdIdx++;
00012a  684a              LDR      r2,[r1,#4]
00012c  1c52              ADDS     r2,r2,#1
00012e  604a              STR      r2,[r1,#4]
;;;161    
;;;162    	return tmp;
;;;163    }
000130  4770              BX       lr
;;;164    
                          ENDP

                  CAN_RING_BUF_WR PROC
;;;165    void CAN_RING_BUF_WR(CAN_RING_BUF_Type *ring_buf, uint8_t DataIn)
000132  6802              LDR      r2,[r0,#0]
;;;166    {
;;;167    	(*ring_buf).pBuf[(*ring_buf).wrIdx&(*ring_buf).mask] = DataIn;
000134  6883              LDR      r3,[r0,#8]
000136  401a              ANDS     r2,r2,r3
000138  6943              LDR      r3,[r0,#0x14]
00013a  5499              STRB     r1,[r3,r2]
;;;168    	(*ring_buf).wrIdx++;
00013c  6802              LDR      r2,[r0,#0]
00013e  1c52              ADDS     r2,r2,#1
000140  6002              STR      r2,[r0,#0]
;;;169    }
000142  4770              BX       lr
;;;170    
                          ENDP

                  CAN_RING_BUF_IS_FULL PROC
;;;171    uint32_t CAN_RING_BUF_IS_FULL(CAN_RING_BUF_Type *ring_buf)
000144  4601              MOV      r1,r0
;;;172    { 
;;;173    	/* 注意1为逻辑真值,0为逻辑假值,这里要与DEF_TRUE和DEF_FALSE的值相区别 */
;;;174    	return ( (((*ring_buf).wrIdx+1)&(*ring_buf).mask) == ((*ring_buf).rdIdx&(*ring_buf).mask) );
000146  6808              LDR      r0,[r1,#0]
000148  1c40              ADDS     r0,r0,#1
00014a  688a              LDR      r2,[r1,#8]
00014c  4010              ANDS     r0,r0,r2
00014e  684a              LDR      r2,[r1,#4]
000150  688b              LDR      r3,[r1,#8]
000152  401a              ANDS     r2,r2,r3
000154  4290              CMP      r0,r2
000156  d101              BNE      |L1.348|
000158  2001              MOVS     r0,#1
                  |L1.346|
;;;175    }
00015a  4770              BX       lr
                  |L1.348|
00015c  2000              MOVS     r0,#0                 ;174
00015e  e7fc              B        |L1.346|
;;;176    
                          ENDP

                  CAN_RING_BUF_IS_EMPTY PROC
;;;177    uint32_t CAN_RING_BUF_IS_EMPTY(CAN_RING_BUF_Type *ring_buf)
000160  4601              MOV      r1,r0
;;;178    {
;;;179        /* 注意1为逻辑真值,0为逻辑假值,这里要与DEF_TRUE和DEF_FALSE的值相区别 */
;;;180    	return ( ((*ring_buf).wrIdx&(*ring_buf).mask) == ((*ring_buf).rdIdx&(*ring_buf).mask) );	
000162  6808              LDR      r0,[r1,#0]
000164  688a              LDR      r2,[r1,#8]
000166  4010              ANDS     r0,r0,r2
000168  684a              LDR      r2,[r1,#4]
00016a  688b              LDR      r3,[r1,#8]
00016c  401a              ANDS     r2,r2,r3
00016e  4290              CMP      r0,r2
000170  d101              BNE      |L1.374|
000172  2001              MOVS     r0,#1
                  |L1.372|
;;;181    }
000174  4770              BX       lr
                  |L1.374|
000176  2000              MOVS     r0,#0                 ;180
000178  e7fc              B        |L1.372|
;;;182    
                          ENDP

                  CAN_RING_BUF_COUNT PROC
;;;183    uint32_t CAN_RING_BUF_COUNT(CAN_RING_BUF_Type *ring_buf)
00017a  4601              MOV      r1,r0
;;;184    {
;;;185    	return ( ((*ring_buf).wrIdx-(*ring_buf).rdIdx) & (*ring_buf).mask );
00017c  6808              LDR      r0,[r1,#0]
00017e  684a              LDR      r2,[r1,#4]
000180  1a80              SUBS     r0,r0,r2
000182  688a              LDR      r2,[r1,#8]
000184  4010              ANDS     r0,r0,r2
;;;186    }
000186  4770              BX       lr
;;;187    
                          ENDP

                  CAN_RING_BUF_CLEAR PROC
;;;188    void CAN_RING_BUF_CLEAR(CAN_RING_BUF_Type *ring_buf)
000188  2100              MOVS     r1,#0
;;;189    {
;;;190    	ring_buf->rdIdx = ring_buf->wrIdx = 0;
00018a  6001              STR      r1,[r0,#0]
00018c  6041              STR      r1,[r0,#4]
;;;191    }
00018e  4770              BX       lr
;;;192    
                          ENDP

                  CAN_RING_BUF_WR_BLOCK PROC
;;;199     */
;;;200    uint32_t CAN_RING_BUF_WR_BLOCK(CAN_RING_BUF_Type *dst,uint8_t *src,uint32_t cnt)
000190  b570              PUSH     {r4-r6,lr}
;;;201    {
000192  4603              MOV      r3,r0
000194  460d              MOV      r5,r1
000196  4614              MOV      r4,r2
;;;202        uint32_t tmp_cnt;
;;;203    
;;;204    	/* 注意:计算可以写入的数量 */
;;;205    	tmp_cnt = (*dst).size - CAN_RING_BUF_COUNT( dst ); 
000198  4618              MOV      r0,r3
00019a  f7fffffe          BL       CAN_RING_BUF_COUNT
00019e  68d9              LDR      r1,[r3,#0xc]
0001a0  1a0e              SUBS     r6,r1,r0
;;;206    	
;;;207    	if(tmp_cnt>cnt) /* 缓冲区中至少有cnt+1个空白位置 */
0001a2  42a6              CMP      r6,r4
0001a4  d901              BLS      |L1.426|
;;;208    	{
;;;209    	    tmp_cnt = cnt;
0001a6  4626              MOV      r6,r4
0001a8  e002              B        |L1.432|
                  |L1.426|
;;;210    	}
;;;211    	else
;;;212    	{
;;;213    	    tmp_cnt = 0;
0001aa  2600              MOVS     r6,#0
;;;214    		return tmp_cnt; /* 防止缓冲区写满 */
0001ac  4630              MOV      r0,r6
                  |L1.430|
;;;215    	}
;;;216    
;;;217    	while(tmp_cnt--)
;;;218    	{
;;;219    		(*dst).pBuf[(*dst).wrIdx & (*dst).mask] = *src;
;;;220    	    (*dst).wrIdx++;
;;;221    		src++;    
;;;222    	}
;;;223    
;;;224    	return cnt;
;;;225    }
0001ae  bd70              POP      {r4-r6,pc}
                  |L1.432|
0001b0  e009              B        |L1.454|
                  |L1.434|
0001b2  7829              LDRB     r1,[r5,#0]            ;219
0001b4  6818              LDR      r0,[r3,#0]            ;219
0001b6  689a              LDR      r2,[r3,#8]            ;219
0001b8  4010              ANDS     r0,r0,r2              ;219
0001ba  695a              LDR      r2,[r3,#0x14]         ;219
0001bc  5411              STRB     r1,[r2,r0]            ;219
0001be  6818              LDR      r0,[r3,#0]            ;220
0001c0  1c40              ADDS     r0,r0,#1              ;220
0001c2  6018              STR      r0,[r3,#0]            ;220
0001c4  1c6d              ADDS     r5,r5,#1              ;221
                  |L1.454|
0001c6  1e30              SUBS     r0,r6,#0              ;217
0001c8  f1a60601          SUB      r6,r6,#1              ;217
0001cc  d1f1              BNE      |L1.434|
0001ce  4620              MOV      r0,r4                 ;224
0001d0  e7ed              B        |L1.430|
;;;226    
                          ENDP

                  CAN_RING_BUF_RD_BLOCK PROC
;;;233     */
;;;234    uint32_t CAN_RING_BUF_RD_BLOCK(uint8_t *dst,CAN_RING_BUF_Type *src,uint32_t cnt)
0001d2  b570              PUSH     {r4-r6,lr}
;;;235    {
0001d4  4605              MOV      r5,r0
0001d6  460b              MOV      r3,r1
0001d8  4614              MOV      r4,r2
;;;236    	uint32_t tmp_cnt;
;;;237    
;;;238    	tmp_cnt = CAN_RING_BUF_COUNT( src );
0001da  4618              MOV      r0,r3
0001dc  f7fffffe          BL       CAN_RING_BUF_COUNT
0001e0  4606              MOV      r6,r0
;;;239    	cnt     = cnt<=tmp_cnt?cnt:tmp_cnt;
0001e2  42b4              CMP      r4,r6
0001e4  d801              BHI      |L1.490|
0001e6  4620              MOV      r0,r4
0001e8  e000              B        |L1.492|
                  |L1.490|
0001ea  4630              MOV      r0,r6
                  |L1.492|
0001ec  4604              MOV      r4,r0
;;;240    
;;;241    	tmp_cnt = cnt;
0001ee  4626              MOV      r6,r4
;;;242    	while(tmp_cnt--)
0001f0  e009              B        |L1.518|
                  |L1.498|
;;;243    	{
;;;244    		*dst = (*src).pBuf[(*src).rdIdx & (*src).mask];
0001f2  6858              LDR      r0,[r3,#4]
0001f4  6899              LDR      r1,[r3,#8]
0001f6  4008              ANDS     r0,r0,r1
0001f8  6959              LDR      r1,[r3,#0x14]
0001fa  5c08              LDRB     r0,[r1,r0]
0001fc  7028              STRB     r0,[r5,#0]
;;;245    	   (*src).rdIdx++;
0001fe  6858              LDR      r0,[r3,#4]
000200  1c40              ADDS     r0,r0,#1
000202  6058              STR      r0,[r3,#4]
;;;246    	   dst++;
000204  1c6d              ADDS     r5,r5,#1
                  |L1.518|
000206  1e30              SUBS     r0,r6,#0              ;242
000208  f1a60601          SUB      r6,r6,#1              ;242
00020c  d1f1              BNE      |L1.498|
;;;247    	}
;;;248    
;;;249    	return cnt;
00020e  4620              MOV      r0,r4
;;;250    }
000210  bd70              POP      {r4-r6,pc}
;;;251    
                          ENDP

                  CAN_tx_function PROC
;;;253    
;;;254    void CAN_tx_function(LPC_CAN_TypeDef *pCANx, CAN_RING_BUF_Type *buf,CPU_INT32U index_TBS)
000212  e92d41f0          PUSH     {r4-r8,lr}
;;;255    {
000216  4606              MOV      r6,r0
000218  460f              MOV      r7,r1
00021a  4614              MOV      r4,r2
;;;256    	CPU_INT32U cnt = 0;
00021c  f04f0800          MOV      r8,#0
;;;257    	CPU_INT32U can_status = 0;
000220  2500              MOVS     r5,#0
;;;258    
;;;259    	cnt = CAN_RING_BUF_COUNT(buf);
000222  4638              MOV      r0,r7
000224  f7fffffe          BL       CAN_RING_BUF_COUNT
000228  4680              MOV      r8,r0
;;;260    	if(cnt <= 0)
00022a  f1b80f00          CMP      r8,#0
00022e  d101              BNE      |L1.564|
                  |L1.560|
;;;261    	{
;;;262    	    return;
;;;263    	}
;;;264    
;;;265    	can_status = (pCANx->SR & 0x000c0c0c);
;;;266    	if(index_TBS == 1)
;;;267    	{
;;;268    		if( (can_status & 0x0c) != 0x0c)
;;;269    		{
;;;270    			return;
;;;271    		}
;;;272    		CAN_tx_action(pCANx,buf,cnt,1);
;;;273    	}else if( index_TBS == 2)
;;;274    	{
;;;275    		if( (can_status & 0x0c00) != 0x0c00)
;;;276    		{
;;;277    			return;
;;;278    		}
;;;279    		CAN_tx_action(pCANx,buf,cnt,2);
;;;280    	}else if( index_TBS == 3)
;;;281    	{
;;;282    		if((can_status & 0x0c0000) != 0x0c0000)
;;;283    		{
;;;284    			return;
;;;285    		}
;;;286    		CAN_tx_action(pCANx,buf,cnt,3);
;;;287    	}else if(index_TBS == 4) // 如果有这么多数据则一次填入三个寄存器
;;;288    	{
;;;289    		if((can_status & 0x040404) != 0x040404)
;;;290    		{
;;;291    			return;
;;;292    		}
;;;293    		CAN_tx_action_all(pCANx,buf,cnt);
;;;294    	}
;;;295    }
000230  e8bd81f0          POP      {r4-r8,pc}
                  |L1.564|
000234  69f0              LDR      r0,[r6,#0x1c]         ;265
000236  493e              LDR      r1,|L1.816|
000238  ea000501          AND      r5,r0,r1              ;265
00023c  2c01              CMP      r4,#1                 ;266
00023e  d10b              BNE      |L1.600|
000240  f005000c          AND      r0,r5,#0xc            ;268
000244  280c              CMP      r0,#0xc               ;268
000246  d000              BEQ      |L1.586|
000248  e7f2              B        |L1.560|
                  |L1.586|
00024a  2301              MOVS     r3,#1                 ;272
00024c  4642              MOV      r2,r8                 ;272
00024e  4639              MOV      r1,r7                 ;272
000250  4630              MOV      r0,r6                 ;272
000252  f7fffffe          BL       CAN_tx_action
000256  e02a              B        |L1.686|
                  |L1.600|
000258  2c02              CMP      r4,#2                 ;273
00025a  d10c              BNE      |L1.630|
00025c  f4056040          AND      r0,r5,#0xc00          ;275
000260  f5b06f40          CMP      r0,#0xc00             ;275
000264  d000              BEQ      |L1.616|
000266  e7e3              B        |L1.560|
                  |L1.616|
000268  2302              MOVS     r3,#2                 ;279
00026a  4642              MOV      r2,r8                 ;279
00026c  4639              MOV      r1,r7                 ;279
00026e  4630              MOV      r0,r6                 ;279
000270  f7fffffe          BL       CAN_tx_action
000274  e01b              B        |L1.686|
                  |L1.630|
000276  2c03              CMP      r4,#3                 ;280
000278  d10c              BNE      |L1.660|
00027a  f4052040          AND      r0,r5,#0xc0000        ;282
00027e  f5b02f40          CMP      r0,#0xc0000           ;282
000282  d000              BEQ      |L1.646|
000284  e7d4              B        |L1.560|
                  |L1.646|
000286  2303              MOVS     r3,#3                 ;286
000288  4642              MOV      r2,r8                 ;286
00028a  4639              MOV      r1,r7                 ;286
00028c  4630              MOV      r0,r6                 ;286
00028e  f7fffffe          BL       CAN_tx_action
000292  e00c              B        |L1.686|
                  |L1.660|
000294  2c04              CMP      r4,#4                 ;287
000296  d10a              BNE      |L1.686|
000298  4826              LDR      r0,|L1.820|
00029a  4028              ANDS     r0,r0,r5              ;289
00029c  4925              LDR      r1,|L1.820|
00029e  4288              CMP      r0,r1                 ;289
0002a0  d000              BEQ      |L1.676|
0002a2  e7c5              B        |L1.560|
                  |L1.676|
0002a4  4642              MOV      r2,r8                 ;293
0002a6  4639              MOV      r1,r7                 ;293
0002a8  4630              MOV      r0,r6                 ;293
0002aa  f7fffffe          BL       CAN_tx_action_all
                  |L1.686|
0002ae  bf00              NOP      
0002b0  e7be              B        |L1.560|
;;;296    
                          ENDP

                  CAN_sendbytes_View PROC
;;;297    /**************************** VIEW send package ***********************/
;;;298    void CAN_sendbytes_View(LPC_CAN_TypeDef *pCANx, CAN_RING_BUF_Type *dst, CPU_INT08U *src, CPU_INT16U length)
0002b2  e92d41f0          PUSH     {r4-r8,lr}
;;;299    {
0002b6  4604              MOV      r4,r0
0002b8  460d              MOV      r5,r1
0002ba  4616              MOV      r6,r2
0002bc  461f              MOV      r7,r3
;;;300    
;;;301    	if( CAN_RING_BUF_WR_BLOCK(dst,src,length) < length)
0002be  463a              MOV      r2,r7
0002c0  4631              MOV      r1,r6
0002c2  4628              MOV      r0,r5
0002c4  f7fffffe          BL       CAN_RING_BUF_WR_BLOCK
;;;302    	{
;;;303    	   // todo stuff tail data error
;;;304    //	   uart_printf( "can buf over flow!\r\n" );
;;;305    	}
;;;306    
;;;307    
;;;308    	if( (pCANx->GSR&(1<<2)) && ((pCANx->SR&0x040404) == 0x040404) )
0002c8  68a0              LDR      r0,[r4,#8]
0002ca  f0000004          AND      r0,r0,#4
0002ce  b148              CBZ      r0,|L1.740|
0002d0  69e0              LDR      r0,[r4,#0x1c]
0002d2  4918              LDR      r1,|L1.820|
0002d4  4008              ANDS     r0,r0,r1
0002d6  4288              CMP      r0,r1
0002d8  d104              BNE      |L1.740|
;;;309    	{
;;;310    	    CAN_tx_function(pCANx,dst,4);
0002da  2204              MOVS     r2,#4
0002dc  4629              MOV      r1,r5
0002de  4620              MOV      r0,r4
0002e0  f7fffffe          BL       CAN_tx_function
                  |L1.740|
;;;311    	}
;;;312    }
0002e4  e8bd81f0          POP      {r4-r8,pc}
;;;313    
                          ENDP

                  |L1.744|
                          DCD      can1RxRingBuf
                  |L1.748|
                          DCD      can1RxBuf
                  |L1.752|
                          DCD      can1Rx2RingBuf
                  |L1.756|
                          DCD      can1Rx2Buf
                  |L1.760|
                          DCD      can1RxUpgradeRingBuf
                  |L1.764|
                          DCD      can1RxUpgradeBuf
                  |L1.768|
                          DCD      can1RxLEDRingBuf
                  |L1.772|
                          DCD      can1RxLEDBuf
                  |L1.776|
                          DCD      can1TxRingBuf
                  |L1.780|
                          DCD      can1TxBuf
                  |L1.784|
                          DCD      can1Tx2RingBuf
                  |L1.788|
                          DCD      can1Tx2Buf
                  |L1.792|
                          DCD      can1Tx3RingBuf
                  |L1.796|
                          DCD      can1Tx3Buf
                  |L1.800|
                          DCD      can1UpgradeAckTxRingBuf
                  |L1.804|
                          DCD      can1UpgradeAckTxBuf
                  |L1.808|
                          DCD      can1LEDTxRingBuf
                  |L1.812|
                          DCD      can1LEDTxBuf
                  |L1.816|
                          DCD      0x000c0c0c
                  |L1.820|
                          DCD      0x00040404

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  can1RxBuf
                          %        512
                  can1RxRingBuf
                          %        28
                  can1Rx2Buf
                          %        512
                  can1Rx2RingBuf
                          %        28
                  can1RxUpgradeBuf
                          %        512
                  can1RxUpgradeRingBuf
                          %        28
                  can1RxLEDBuf
                          %        512
                  can1RxLEDRingBuf
                          %        28
                  can1TxBuf
                          %        512
                  can1TxRingBuf
                          %        28
                  can1Tx2Buf
                          %        512
                  can1Tx2RingBuf
                          %        28
                  can1Tx3Buf
                          %        512
                  can1Tx3RingBuf
                          %        28
                  can1UpgradeAckTxBuf
                          %        512
                  can1UpgradeAckTxRingBuf
                          %        28
                  can1LEDTxBuf
                          %        512
                  can1LEDTxRingBuf
                          %        28
